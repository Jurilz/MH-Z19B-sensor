
c:/Users/Juri/iot-co2-traffic-lamp/target/2.0.1/argon/iot-co2-traffic-lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002544  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6560  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e574  000d6564  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000214  2003e5dc  2003e5dc  0002e5dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d65cc  000d65cc  000265cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d65f4  000d65f4  000265f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014b438  00000000  00000000  000265f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016b70  00000000  00000000  00171a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002ddb6  00000000  00000000  001885a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027a8  00000000  00000000  001b6356  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007890  00000000  00000000  001b8afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037a05  00000000  00000000  001c038e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003891c  00000000  00000000  001f7d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010a7d8  00000000  00000000  002306af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006c94  00000000  00000000  0033ae88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f8f7 	bl	d6220 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f8ff 	bl	d623c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e574 	.word	0x2003e574
   d4048:	000d6564 	.word	0x000d6564
   d404c:	2003e5dc 	.word	0x2003e5dc
   d4050:	2003e5dc 	.word	0x2003e5dc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f9c1 	bl	d53e4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d652c 	.word	0x000d652c
   d407c:	000d6554 	.word	0x000d6554

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b816 	b.w	d40b0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8c7 	bl	d4218 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b96b 	b.w	d5368 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 be55 	b.w	d4d40 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 be53 	b.w	d4d40 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 be59 	b.w	d4d50 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:

char eventData[64];


// setup() runs once, when the device is first turned on.
void setup() {
   d40b0:	b508      	push	{r3, lr}

  strip.begin();
   d40b2:	4809      	ldr	r0, [pc, #36]	; (d40d8 <setup+0x28>)
   d40b4:	f000 fa15 	bl	d44e2 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show(); // Initialize all pixels to 'off'
   d40b8:	4807      	ldr	r0, [pc, #28]	; (d40d8 <setup+0x28>)
   d40ba:	f000 fa4b 	bl	d4554 <_ZN17Adafruit_NeoPixel4showEv>

    // transmission rate to serial monitor 
  Serial.begin(SERIAL_TRANSMISSION_RATE);
   d40be:	f001 fd2d 	bl	d5b1c <_Z16_fetch_usbserialv>
   d40c2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d40c6:	f001 fd1d 	bl	d5b04 <_ZN9USBSerial5beginEl>
  // Put initialization like pinMode and begin functions here.
  pinMode(SENSOR_PIN, INPUT);
}
   d40ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(SENSOR_PIN, INPUT);
   d40ce:	2100      	movs	r1, #0
   d40d0:	2006      	movs	r0, #6
   d40d2:	f002 b81f 	b.w	d6114 <pinMode>
   d40d6:	bf00      	nop
   d40d8:	2003e62c 	.word	0x2003e62c

000d40dc <_Z18publishMesaruementi>:

  }
  delay(5000);
}

void publishMesaruement(const int co2_ppm) {
   d40dc:	b570      	push	{r4, r5, r6, lr}
   d40de:	b08a      	sub	sp, #40	; 0x28
   d40e0:	4605      	mov	r5, r0

  int timestamp = Time.now();
   d40e2:	f001 f8d3 	bl	d528c <_ZN9TimeClass3nowEv>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d40e6:	4a1f      	ldr	r2, [pc, #124]	; (d4164 <_Z18publishMesaruementi+0x88>)
   d40e8:	4e1f      	ldr	r6, [pc, #124]	; (d4168 <_Z18publishMesaruementi+0x8c>)
   d40ea:	9205      	str	r2, [sp, #20]
        state_(BEGIN) {
   d40ec:	2300      	movs	r3, #0
   d40ee:	4604      	mov	r4, r0
        n_(0) {
   d40f0:	2240      	movs	r2, #64	; 0x40

  JSONBufferWriter writer(eventData, sizeof(eventData));
  writer.beginObject();
   d40f2:	a805      	add	r0, sp, #20
   d40f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
        state_(BEGIN) {
   d40f8:	f88d 3018 	strb.w	r3, [sp, #24]
        n_(0) {
   d40fc:	9607      	str	r6, [sp, #28]
   d40fe:	f001 ff45 	bl	d5f8c <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name, strlen(name));
   d4102:	2205      	movs	r2, #5
   d4104:	4919      	ldr	r1, [pc, #100]	; (d416c <_Z18publishMesaruementi+0x90>)
   d4106:	a805      	add	r0, sp, #20
   d4108:	f001 ffb6 	bl	d6078 <_ZN5spark10JSONWriter4nameEPKcj>
      writer.name("value").value(co2_ppm);
   d410c:	4629      	mov	r1, r5
   d410e:	f001 ff49 	bl	d5fa4 <_ZN5spark10JSONWriter5valueEi>
   d4112:	2209      	movs	r2, #9
   d4114:	4916      	ldr	r1, [pc, #88]	; (d4170 <_Z18publishMesaruementi+0x94>)
   d4116:	a805      	add	r0, sp, #20
   d4118:	f001 ffae 	bl	d6078 <_ZN5spark10JSONWriter4nameEPKcj>
      writer.name("timestamp").value(timestamp);
   d411c:	4621      	mov	r1, r4
   d411e:	f001 ff41 	bl	d5fa4 <_ZN5spark10JSONWriter5valueEi>
  writer.endObject();
   d4122:	a805      	add	r0, sp, #20
   d4124:	f001 ff1c 	bl	d5f60 <_ZN5spark10JSONWriter9endObjectEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4128:	4b12      	ldr	r3, [pc, #72]	; (d4174 <_Z18publishMesaruementi+0x98>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d412a:	4913      	ldr	r1, [pc, #76]	; (d4178 <_Z18publishMesaruementi+0x9c>)
   d412c:	781b      	ldrb	r3, [r3, #0]
   d412e:	f88d 3000 	strb.w	r3, [sp]
   d4132:	4632      	mov	r2, r6
   d4134:	233c      	movs	r3, #60	; 0x3c
   d4136:	a803      	add	r0, sp, #12
   d4138:	f001 faac 	bl	d5694 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d413c:	9c04      	ldr	r4, [sp, #16]
   d413e:	b17c      	cbz	r4, d4160 <_Z18publishMesaruementi+0x84>
      if (--_M_use_count == 0)
   d4140:	6863      	ldr	r3, [r4, #4]
   d4142:	3b01      	subs	r3, #1
   d4144:	6063      	str	r3, [r4, #4]
   d4146:	b95b      	cbnz	r3, d4160 <_Z18publishMesaruementi+0x84>
          _M_dispose();
   d4148:	6823      	ldr	r3, [r4, #0]
   d414a:	4620      	mov	r0, r4
   d414c:	689b      	ldr	r3, [r3, #8]
   d414e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4150:	68a3      	ldr	r3, [r4, #8]
   d4152:	3b01      	subs	r3, #1
   d4154:	60a3      	str	r3, [r4, #8]
   d4156:	b91b      	cbnz	r3, d4160 <_Z18publishMesaruementi+0x84>
            _M_destroy();
   d4158:	6823      	ldr	r3, [r4, #0]
   d415a:	4620      	mov	r0, r4
   d415c:	68db      	ldr	r3, [r3, #12]
   d415e:	4798      	blx	r3

  Particle.publish("co2_concentration", eventData, PRIVATE);
}
   d4160:	b00a      	add	sp, #40	; 0x28
   d4162:	bd70      	pop	{r4, r5, r6, pc}
   d4164:	000d6518 	.word	0x000d6518
   d4168:	2003e5ec 	.word	0x2003e5ec
   d416c:	000d6304 	.word	0x000d6304
   d4170:	000d630a 	.word	0x000d630a
   d4174:	2003e5e0 	.word	0x2003e5e0
   d4178:	000d6314 	.word	0x000d6314

000d417c <_Z5Wheelh>:
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   d417c:	2854      	cmp	r0, #84	; 0x54
   d417e:	d809      	bhi.n	d4194 <_Z5Wheelh+0x18>
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
   d4180:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
   d4184:	3901      	subs	r1, #1
   d4186:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   d418a:	2200      	movs	r2, #0
   d418c:	b2c9      	uxtb	r1, r1
   d418e:	b2c0      	uxtb	r0, r0
   d4190:	f000 bbca 	b.w	d4928 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else if(WheelPos < 170) {
   d4194:	28a9      	cmp	r0, #169	; 0xa9
   d4196:	d80b      	bhi.n	d41b0 <_Z5Wheelh+0x34>
   WheelPos -= 85;
   d4198:	3855      	subs	r0, #85	; 0x55
   d419a:	b2c0      	uxtb	r0, r0
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
   d419c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   d41a0:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   d41a4:	3801      	subs	r0, #1
   d41a6:	b2d2      	uxtb	r2, r2
   d41a8:	2100      	movs	r1, #0
   d41aa:	b2c0      	uxtb	r0, r0
   d41ac:	f000 bbbc 	b.w	d4928 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else {
   WheelPos -= 170;
   d41b0:	3056      	adds	r0, #86	; 0x56
   d41b2:	b2c1      	uxtb	r1, r0
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
   d41b4:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
   d41b8:	3a01      	subs	r2, #1
   d41ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d41be:	b2d2      	uxtb	r2, r2
   d41c0:	b2c9      	uxtb	r1, r1
   d41c2:	2000      	movs	r0, #0
   d41c4:	f000 bbb0 	b.w	d4928 <_ZN17Adafruit_NeoPixel5ColorEhhh>

000d41c8 <_Z7rainbowh>:
void rainbow(uint8_t wait) {
   d41c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(i=0; i<strip.numPixels(); i++) {
   d41cc:	4f11      	ldr	r7, [pc, #68]	; (d4214 <_Z7rainbowh+0x4c>)
void rainbow(uint8_t wait) {
   d41ce:	4606      	mov	r6, r0
  for(j=0; j<256; j++) {
   d41d0:	2400      	movs	r4, #0
   d41d2:	2500      	movs	r5, #0
    for(i=0; i<strip.numPixels(); i++) {
   d41d4:	480f      	ldr	r0, [pc, #60]	; (d4214 <_Z7rainbowh+0x4c>)
   d41d6:	f000 fbac 	bl	d4932 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   d41da:	fa1f f885 	uxth.w	r8, r5
   d41de:	4540      	cmp	r0, r8
   d41e0:	d90a      	bls.n	d41f8 <_Z7rainbowh+0x30>
      strip.setPixelColor(i, Wheel((i+j) & 255));
   d41e2:	1928      	adds	r0, r5, r4
   d41e4:	b2c0      	uxtb	r0, r0
   d41e6:	f7ff ffc9 	bl	d417c <_Z5Wheelh>
   d41ea:	4641      	mov	r1, r8
   d41ec:	4602      	mov	r2, r0
   d41ee:	4638      	mov	r0, r7
   d41f0:	f000 fb56 	bl	d48a0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(i=0; i<strip.numPixels(); i++) {
   d41f4:	3501      	adds	r5, #1
   d41f6:	e7ed      	b.n	d41d4 <_Z7rainbowh+0xc>
    strip.show();
   d41f8:	4638      	mov	r0, r7
  for(j=0; j<256; j++) {
   d41fa:	3401      	adds	r4, #1
    strip.show();
   d41fc:	f000 f9aa 	bl	d4554 <_ZN17Adafruit_NeoPixel4showEv>
  for(j=0; j<256; j++) {
   d4200:	b2a4      	uxth	r4, r4
    delay(wait);
   d4202:	4630      	mov	r0, r6
   d4204:	f001 f85c 	bl	d52c0 <delay>
  for(j=0; j<256; j++) {
   d4208:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   d420c:	d1e1      	bne.n	d41d2 <_Z7rainbowh+0xa>
}
   d420e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4212:	bf00      	nop
   d4214:	2003e62c 	.word	0x2003e62c

000d4218 <loop>:
void loop() {
   d4218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rainbow(20);
   d421c:	2014      	movs	r0, #20
void loop() {
   d421e:	b089      	sub	sp, #36	; 0x24
  rainbow(20);
   d4220:	f7ff ffd2 	bl	d41c8 <_Z7rainbowh>
  duration_1 = pulseIn(SENSOR_PIN, HIGH);
   d4224:	2101      	movs	r1, #1
   d4226:	2006      	movs	r0, #6
   d4228:	f001 ff9e 	bl	d6168 <pulseIn>
   d422c:	f8df 8220 	ldr.w	r8, [pc, #544]	; d4450 <loop+0x238>
  duration_2 = pulseIn(SENSOR_PIN, HIGH);
   d4230:	f8df 9220 	ldr.w	r9, [pc, #544]	; d4454 <loop+0x23c>
  duration_1 = pulseIn(SENSOR_PIN, HIGH);
   d4234:	f8c8 0000 	str.w	r0, [r8]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4238:	f000 fbd6 	bl	d49e8 <HAL_Timer_Get_Milli_Seconds>
  duration_2 = pulseIn(SENSOR_PIN, HIGH);
   d423c:	2101      	movs	r1, #1
   d423e:	4605      	mov	r5, r0
   d4240:	2006      	movs	r0, #6
  pulse_high = duration_1 / 1000;
   d4242:	f8d8 6000 	ldr.w	r6, [r8]
  duration_2 = pulseIn(SENSOR_PIN, HIGH);
   d4246:	f001 ff8f 	bl	d6168 <pulseIn>
  if (duration_1 != 0) {
   d424a:	f8d8 3000 	ldr.w	r3, [r8]
  duration_2 = pulseIn(SENSOR_PIN, HIGH);
   d424e:	f8c9 0000 	str.w	r0, [r9]
  if (duration_1 != 0) {
   d4252:	2b00      	cmp	r3, #0
   d4254:	f000 80e5 	beq.w	d4422 <loop+0x20a>
  pulse_high = duration_1 / 1000;
   d4258:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   d425c:	fbb6 f6f4 	udiv	r6, r6, r4
    pulse_high_2 = (duration_2 / 1000);
   d4260:	fbb0 f4f4 	udiv	r4, r0, r4
   d4264:	f000 fbc0 	bl	d49e8 <HAL_Timer_Get_Milli_Seconds>
    pulse_low = (time_end - (time_start + pulse_high_2));
   d4268:	1963      	adds	r3, r4, r5
   d426a:	1ac7      	subs	r7, r0, r3
    co2_ppm = (((pulse_high - 2) * RANGE) / 1000);
   d426c:	f1a6 0b02 	sub.w	fp, r6, #2
    co2_corrected = (((pulse_high - 2) * RANGE) / (pulse_high + pulse_low - 4));
   d4270:	f241 3588 	movw	r5, #5000	; 0x1388
   d4274:	19f3      	adds	r3, r6, r7
   d4276:	3b04      	subs	r3, #4
   d4278:	fb05 f50b 	mul.w	r5, r5, fp
   d427c:	fb95 f5f3 	sdiv	r5, r5, r3
    Serial.print("CO2 ppm: " + String(co2_ppm) + "; ");
   d4280:	f001 fc4c 	bl	d5b1c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4284:	496a      	ldr	r1, [pc, #424]	; (d4430 <loop+0x218>)
   d4286:	4682      	mov	sl, r0
   d4288:	a804      	add	r0, sp, #16
   d428a:	f000 fea4 	bl	d4fd6 <_ZN6StringC1EPKc>
   d428e:	220a      	movs	r2, #10
   d4290:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
   d4294:	4668      	mov	r0, sp
   d4296:	f000 fec4 	bl	d5022 <_ZN6StringC1Eih>
   d429a:	4669      	mov	r1, sp
   d429c:	a804      	add	r0, sp, #16
   d429e:	f000 fefe 	bl	d509e <_ZplRK15StringSumHelperRK6String>
   d42a2:	4964      	ldr	r1, [pc, #400]	; (d4434 <loop+0x21c>)
   d42a4:	f000 ff07 	bl	d50b6 <_ZplRK15StringSumHelperPKc>
   d42a8:	6801      	ldr	r1, [r0, #0]
   d42aa:	4650      	mov	r0, sl
   d42ac:	f000 ff80 	bl	d51b0 <_ZN5Print5printEPKc>
   d42b0:	4668      	mov	r0, sp
   d42b2:	f000 fe45 	bl	d4f40 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d42b6:	a804      	add	r0, sp, #16
   d42b8:	f000 fe42 	bl	d4f40 <_ZN6StringD1Ev>
    Serial.println("corrected CO2 ppm: " + String(co2_corrected) + "; ");
   d42bc:	f001 fc2e 	bl	d5b1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d42c0:	495d      	ldr	r1, [pc, #372]	; (d4438 <loop+0x220>)
   d42c2:	4682      	mov	sl, r0
   d42c4:	a804      	add	r0, sp, #16
   d42c6:	f000 fe86 	bl	d4fd6 <_ZN6StringC1EPKc>
   d42ca:	220a      	movs	r2, #10
   d42cc:	4629      	mov	r1, r5
   d42ce:	4668      	mov	r0, sp
   d42d0:	f000 fea7 	bl	d5022 <_ZN6StringC1Eih>
   d42d4:	4669      	mov	r1, sp
   d42d6:	a804      	add	r0, sp, #16
   d42d8:	f000 fee1 	bl	d509e <_ZplRK15StringSumHelperRK6String>
   d42dc:	4955      	ldr	r1, [pc, #340]	; (d4434 <loop+0x21c>)
   d42de:	f000 feea 	bl	d50b6 <_ZplRK15StringSumHelperPKc>
   d42e2:	6801      	ldr	r1, [r0, #0]
   d42e4:	4650      	mov	r0, sl
   d42e6:	f000 ff76 	bl	d51d6 <_ZN5Print7printlnEPKc>
   d42ea:	4668      	mov	r0, sp
   d42ec:	f000 fe28 	bl	d4f40 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d42f0:	a804      	add	r0, sp, #16
   d42f2:	f000 fe25 	bl	d4f40 <_ZN6StringD1Ev>
    publishMesaruement(co2_corrected);
   d42f6:	4628      	mov	r0, r5
   d42f8:	f7ff fef0 	bl	d40dc <_Z18publishMesaruementi>
    Serial.print("DURATION_1: " + String(duration_1) + "; ");
   d42fc:	f001 fc0e 	bl	d5b1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4300:	494e      	ldr	r1, [pc, #312]	; (d443c <loop+0x224>)
   d4302:	4605      	mov	r5, r0
   d4304:	a804      	add	r0, sp, #16
   d4306:	f000 fe66 	bl	d4fd6 <_ZN6StringC1EPKc>
   d430a:	220a      	movs	r2, #10
   d430c:	f8d8 1000 	ldr.w	r1, [r8]
   d4310:	4668      	mov	r0, sp
   d4312:	f000 fe99 	bl	d5048 <_ZN6StringC1Emh>
   d4316:	4669      	mov	r1, sp
   d4318:	a804      	add	r0, sp, #16
   d431a:	f000 fec0 	bl	d509e <_ZplRK15StringSumHelperRK6String>
   d431e:	4945      	ldr	r1, [pc, #276]	; (d4434 <loop+0x21c>)
   d4320:	f000 fec9 	bl	d50b6 <_ZplRK15StringSumHelperPKc>
   d4324:	6801      	ldr	r1, [r0, #0]
   d4326:	4628      	mov	r0, r5
   d4328:	f000 ff42 	bl	d51b0 <_ZN5Print5printEPKc>
   d432c:	4668      	mov	r0, sp
   d432e:	f000 fe07 	bl	d4f40 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4332:	a804      	add	r0, sp, #16
   d4334:	f000 fe04 	bl	d4f40 <_ZN6StringD1Ev>
    Serial.print("DURATION_2: " + String(duration_2) + "; ");
   d4338:	f001 fbf0 	bl	d5b1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d433c:	4940      	ldr	r1, [pc, #256]	; (d4440 <loop+0x228>)
   d433e:	4605      	mov	r5, r0
   d4340:	a804      	add	r0, sp, #16
   d4342:	f000 fe48 	bl	d4fd6 <_ZN6StringC1EPKc>
   d4346:	220a      	movs	r2, #10
   d4348:	f8d9 1000 	ldr.w	r1, [r9]
   d434c:	4668      	mov	r0, sp
   d434e:	f000 fe7b 	bl	d5048 <_ZN6StringC1Emh>
   d4352:	4669      	mov	r1, sp
   d4354:	a804      	add	r0, sp, #16
   d4356:	f000 fea2 	bl	d509e <_ZplRK15StringSumHelperRK6String>
   d435a:	4936      	ldr	r1, [pc, #216]	; (d4434 <loop+0x21c>)
   d435c:	f000 feab 	bl	d50b6 <_ZplRK15StringSumHelperPKc>
   d4360:	6801      	ldr	r1, [r0, #0]
   d4362:	4628      	mov	r0, r5
   d4364:	f000 ff24 	bl	d51b0 <_ZN5Print5printEPKc>
   d4368:	4668      	mov	r0, sp
   d436a:	f000 fde9 	bl	d4f40 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d436e:	a804      	add	r0, sp, #16
   d4370:	f000 fde6 	bl	d4f40 <_ZN6StringD1Ev>
    Serial.print("HIGH: " + String(pulse_high) + "; ");
   d4374:	f001 fbd2 	bl	d5b1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4378:	4932      	ldr	r1, [pc, #200]	; (d4444 <loop+0x22c>)
   d437a:	4605      	mov	r5, r0
   d437c:	a804      	add	r0, sp, #16
   d437e:	f000 fe2a 	bl	d4fd6 <_ZN6StringC1EPKc>
   d4382:	220a      	movs	r2, #10
   d4384:	4631      	mov	r1, r6
   d4386:	4668      	mov	r0, sp
   d4388:	f000 fe4b 	bl	d5022 <_ZN6StringC1Eih>
   d438c:	4669      	mov	r1, sp
   d438e:	a804      	add	r0, sp, #16
   d4390:	f000 fe85 	bl	d509e <_ZplRK15StringSumHelperRK6String>
   d4394:	4927      	ldr	r1, [pc, #156]	; (d4434 <loop+0x21c>)
   d4396:	f000 fe8e 	bl	d50b6 <_ZplRK15StringSumHelperPKc>
   d439a:	6801      	ldr	r1, [r0, #0]
   d439c:	4628      	mov	r0, r5
   d439e:	f000 ff07 	bl	d51b0 <_ZN5Print5printEPKc>
   d43a2:	4668      	mov	r0, sp
   d43a4:	f000 fdcc 	bl	d4f40 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d43a8:	a804      	add	r0, sp, #16
   d43aa:	f000 fdc9 	bl	d4f40 <_ZN6StringD1Ev>
    Serial.print("HIGH_2: " + String(pulse_high_2) + "; ");
   d43ae:	f001 fbb5 	bl	d5b1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d43b2:	4925      	ldr	r1, [pc, #148]	; (d4448 <loop+0x230>)
   d43b4:	4605      	mov	r5, r0
   d43b6:	a804      	add	r0, sp, #16
   d43b8:	f000 fe0d 	bl	d4fd6 <_ZN6StringC1EPKc>
   d43bc:	220a      	movs	r2, #10
   d43be:	4621      	mov	r1, r4
   d43c0:	4668      	mov	r0, sp
   d43c2:	f000 fe2e 	bl	d5022 <_ZN6StringC1Eih>
   d43c6:	4669      	mov	r1, sp
   d43c8:	a804      	add	r0, sp, #16
   d43ca:	f000 fe68 	bl	d509e <_ZplRK15StringSumHelperRK6String>
   d43ce:	4919      	ldr	r1, [pc, #100]	; (d4434 <loop+0x21c>)
   d43d0:	f000 fe71 	bl	d50b6 <_ZplRK15StringSumHelperPKc>
   d43d4:	6801      	ldr	r1, [r0, #0]
   d43d6:	4628      	mov	r0, r5
   d43d8:	f000 feea 	bl	d51b0 <_ZN5Print5printEPKc>
   d43dc:	4668      	mov	r0, sp
   d43de:	f000 fdaf 	bl	d4f40 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d43e2:	a804      	add	r0, sp, #16
   d43e4:	f000 fdac 	bl	d4f40 <_ZN6StringD1Ev>
    Serial.println("LOW: " + String(pulse_low) + "; ");
   d43e8:	f001 fb98 	bl	d5b1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d43ec:	4917      	ldr	r1, [pc, #92]	; (d444c <loop+0x234>)
   d43ee:	4604      	mov	r4, r0
   d43f0:	a804      	add	r0, sp, #16
   d43f2:	f000 fdf0 	bl	d4fd6 <_ZN6StringC1EPKc>
   d43f6:	220a      	movs	r2, #10
   d43f8:	4639      	mov	r1, r7
   d43fa:	4668      	mov	r0, sp
   d43fc:	f000 fe11 	bl	d5022 <_ZN6StringC1Eih>
   d4400:	4669      	mov	r1, sp
   d4402:	a804      	add	r0, sp, #16
   d4404:	f000 fe4b 	bl	d509e <_ZplRK15StringSumHelperRK6String>
   d4408:	490a      	ldr	r1, [pc, #40]	; (d4434 <loop+0x21c>)
   d440a:	f000 fe54 	bl	d50b6 <_ZplRK15StringSumHelperPKc>
   d440e:	6801      	ldr	r1, [r0, #0]
   d4410:	4620      	mov	r0, r4
   d4412:	f000 fee0 	bl	d51d6 <_ZN5Print7printlnEPKc>
   d4416:	4668      	mov	r0, sp
   d4418:	f000 fd92 	bl	d4f40 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d441c:	a804      	add	r0, sp, #16
   d441e:	f000 fd8f 	bl	d4f40 <_ZN6StringD1Ev>
  delay(5000);
   d4422:	f241 3088 	movw	r0, #5000	; 0x1388
   d4426:	f000 ff4b 	bl	d52c0 <delay>
}
   d442a:	b009      	add	sp, #36	; 0x24
   d442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4430:	000d6333 	.word	0x000d6333
   d4434:	000d6326 	.word	0x000d6326
   d4438:	000d6329 	.word	0x000d6329
   d443c:	000d633d 	.word	0x000d633d
   d4440:	000d634a 	.word	0x000d634a
   d4444:	000d6357 	.word	0x000d6357
   d4448:	000d635e 	.word	0x000d635e
   d444c:	000d6367 	.word	0x000d6367
   d4450:	2003e5e4 	.word	0x2003e5e4
   d4454:	2003e5e8 	.word	0x2003e5e8

000d4458 <_GLOBAL__sub_I_strip>:
  }
   d4458:	b510      	push	{r4, lr}
        val_(val) {
   d445a:	4b08      	ldr	r3, [pc, #32]	; (d447c <_GLOBAL__sub_I_strip+0x24>)
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d445c:	4c08      	ldr	r4, [pc, #32]	; (d4480 <_GLOBAL__sub_I_strip+0x28>)
   d445e:	2101      	movs	r1, #1
   d4460:	7019      	strb	r1, [r3, #0]
   d4462:	2203      	movs	r2, #3
   d4464:	4620      	mov	r0, r4
   d4466:	2302      	movs	r3, #2
   d4468:	f000 f862 	bl	d4530 <_ZN17Adafruit_NeoPixelC1Ethh>
   d446c:	4620      	mov	r0, r4
   d446e:	4a05      	ldr	r2, [pc, #20]	; (d4484 <_GLOBAL__sub_I_strip+0x2c>)
   d4470:	4905      	ldr	r1, [pc, #20]	; (d4488 <_GLOBAL__sub_I_strip+0x30>)
   d4472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d4476:	f001 beb9 	b.w	d61ec <__aeabi_atexit>
   d447a:	bf00      	nop
   d447c:	2003e5e0 	.word	0x2003e5e0
   d4480:	2003e62c 	.word	0x2003e62c
   d4484:	2003e5dc 	.word	0x2003e5dc
   d4488:	000d448d 	.word	0x000d448d

000d448c <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d448c:	b510      	push	{r4, lr}
   d448e:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4490:	68c0      	ldr	r0, [r0, #12]
   d4492:	b108      	cbz	r0, d4498 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4494:	f000 fc5c 	bl	d4d50 <free>
  if (begun) pinMode(pin, INPUT);
   d4498:	7823      	ldrb	r3, [r4, #0]
   d449a:	b11b      	cbz	r3, d44a4 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d449c:	79e0      	ldrb	r0, [r4, #7]
   d449e:	2100      	movs	r1, #0
   d44a0:	f001 fe38 	bl	d6114 <pinMode>
}
   d44a4:	4620      	mov	r0, r4
   d44a6:	bd10      	pop	{r4, pc}

000d44a8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d44a8:	b538      	push	{r3, r4, r5, lr}
   d44aa:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d44ac:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d44ae:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d44b0:	b108      	cbz	r0, d44b6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d44b2:	f000 fc4d 	bl	d4d50 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d44b6:	79a3      	ldrb	r3, [r4, #6]
   d44b8:	2b06      	cmp	r3, #6
   d44ba:	bf0c      	ite	eq
   d44bc:	2004      	moveq	r0, #4
   d44be:	2003      	movne	r0, #3
   d44c0:	fb10 f005 	smulbb	r0, r0, r5
   d44c4:	b280      	uxth	r0, r0
   d44c6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d44c8:	f000 fc3a 	bl	d4d40 <malloc>
   d44cc:	60e0      	str	r0, [r4, #12]
   d44ce:	b128      	cbz	r0, d44dc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d44d0:	88a2      	ldrh	r2, [r4, #4]
   d44d2:	2100      	movs	r1, #0
   d44d4:	f001 feb2 	bl	d623c <memset>
    numLEDs = n;
   d44d8:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   d44da:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   d44dc:	80a0      	strh	r0, [r4, #4]
   d44de:	8060      	strh	r0, [r4, #2]
}
   d44e0:	e7fb      	b.n	d44da <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000d44e2 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   d44e2:	b510      	push	{r4, lr}
   d44e4:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d44e6:	2101      	movs	r1, #1
   d44e8:	79c0      	ldrb	r0, [r0, #7]
   d44ea:	f001 fe13 	bl	d6114 <pinMode>
  digitalWrite(pin, LOW);
   d44ee:	79e0      	ldrb	r0, [r4, #7]
   d44f0:	2100      	movs	r1, #0
   d44f2:	f001 fe20 	bl	d6136 <digitalWrite>
  begun = true;
   d44f6:	2301      	movs	r3, #1
   d44f8:	7023      	strb	r3, [r4, #0]
}
   d44fa:	bd10      	pop	{r4, pc}

000d44fc <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d44fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   d44fe:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4500:	4605      	mov	r5, r0
   d4502:	460c      	mov	r4, r1
    if (begun) {
   d4504:	b11b      	cbz	r3, d450e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4506:	79c0      	ldrb	r0, [r0, #7]
   d4508:	2100      	movs	r1, #0
   d450a:	f001 fe03 	bl	d6114 <pinMode>
    }
    pin = p;
    if (begun) {
   d450e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   d4510:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4512:	b15b      	cbz	r3, d452c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   d4514:	b2a0      	uxth	r0, r4
   d4516:	2101      	movs	r1, #1
   d4518:	9001      	str	r0, [sp, #4]
   d451a:	f001 fdfb 	bl	d6114 <pinMode>
        digitalWrite(p, LOW);
   d451e:	9801      	ldr	r0, [sp, #4]
   d4520:	2100      	movs	r1, #0
    }
}
   d4522:	b003      	add	sp, #12
   d4524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   d4528:	f001 be05 	b.w	d6136 <digitalWrite>
}
   d452c:	b003      	add	sp, #12
   d452e:	bd30      	pop	{r4, r5, pc}

000d4530 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4530:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4532:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4534:	4604      	mov	r4, r0
   d4536:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4538:	7183      	strb	r3, [r0, #6]
   d453a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d453e:	7005      	strb	r5, [r0, #0]
   d4540:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   d4542:	f7ff ffb1 	bl	d44a8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4546:	4620      	mov	r0, r4
   d4548:	4631      	mov	r1, r6
   d454a:	f7ff ffd7 	bl	d44fc <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d454e:	4620      	mov	r0, r4
   d4550:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4554 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4554:	68c3      	ldr	r3, [r0, #12]
   d4556:	2b00      	cmp	r3, #0
   d4558:	f000 818d 	beq.w	d4876 <_ZN17Adafruit_NeoPixel4showEv+0x322>
void Adafruit_NeoPixel::show(void) {
   d455c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4560:	7983      	ldrb	r3, [r0, #6]
   d4562:	3b02      	subs	r3, #2
   d4564:	b2db      	uxtb	r3, r3
   d4566:	2b04      	cmp	r3, #4
   d4568:	bf9c      	itt	ls
   d456a:	4ac8      	ldrls	r2, [pc, #800]	; (d488c <_ZN17Adafruit_NeoPixel4showEv+0x338>)
   d456c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4570:	b087      	sub	sp, #28
   d4572:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4574:	bf88      	it	hi
   d4576:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4578:	f000 fa2e 	bl	d49d8 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d457c:	692b      	ldr	r3, [r5, #16]
   d457e:	1ac0      	subs	r0, r0, r3
   d4580:	42a0      	cmp	r0, r4
   d4582:	d3f9      	bcc.n	d4578 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4584:	4ac2      	ldr	r2, [pc, #776]	; (d4890 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4586:	88ab      	ldrh	r3, [r5, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4588:	ca07      	ldmia	r2, {r0, r1, r2}
   d458a:	ac06      	add	r4, sp, #24
   d458c:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4590:	9c03      	ldr	r4, [sp, #12]
   d4592:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4596:	b91a      	cbnz	r2, d45a0 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4598:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d459c:	2a00      	cmp	r2, #0
   d459e:	db7c      	blt.n	d469a <_ZN17Adafruit_NeoPixel4showEv+0x146>
   d45a0:	9c04      	ldr	r4, [sp, #16]
   d45a2:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45a6:	b922      	cbnz	r2, d45b2 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45a8:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d45ac:	2a00      	cmp	r2, #0
   d45ae:	f2c0 8152 	blt.w	d4856 <_ZN17Adafruit_NeoPixel4showEv+0x302>
   d45b2:	9c05      	ldr	r4, [sp, #20]
   d45b4:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45b8:	2a00      	cmp	r2, #0
   d45ba:	f000 8137 	beq.w	d482c <_ZN17Adafruit_NeoPixel4showEv+0x2d8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d45be:	4bb5      	ldr	r3, [pc, #724]	; (d4894 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d45c0:	48b5      	ldr	r0, [pc, #724]	; (d4898 <_ZN17Adafruit_NeoPixel4showEv+0x344>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d45c2:	681c      	ldr	r4, [r3, #0]
   d45c4:	79eb      	ldrb	r3, [r5, #7]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d45c6:	68c1      	ldr	r1, [r0, #12]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d45c8:	011a      	lsls	r2, r3, #4
   d45ca:	eb04 1603 	add.w	r6, r4, r3, lsl #4
   d45ce:	5ca7      	ldrb	r7, [r4, r2]
   d45d0:	7873      	ldrb	r3, [r6, #1]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d45d2:	4cb2      	ldr	r4, [pc, #712]	; (d489c <_ZN17Adafruit_NeoPixel4showEv+0x348>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d45d4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   d45d8:	60c1      	str	r1, [r0, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d45da:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d45dc:	f003 031f 	and.w	r3, r3, #31
   d45e0:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d45e4:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d45e6:	433a      	orrs	r2, r7
   d45e8:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d45ea:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d45ec:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d45f0:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d45f4:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   d45f6:	2900      	cmp	r1, #0
   d45f8:	d044      	beq.n	d4684 <_ZN17Adafruit_NeoPixel4showEv+0x130>
   d45fa:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   d45fe:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4600:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   d4604:	f818 cb01 	ldrb.w	ip, [r8], #1
   d4608:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d460a:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d460c:	6863      	ldr	r3, [r4, #4]
   d460e:	1a9b      	subs	r3, r3, r2
   d4610:	2b46      	cmp	r3, #70	; 0x46
   d4612:	d9fb      	bls.n	d460c <_ZN17Adafruit_NeoPixel4showEv+0xb8>
          cyc  = DWT->CYCCNT;
   d4614:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   d4616:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d461a:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   d461e:	ea43 0307 	orr.w	r3, r3, r7
   d4622:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   d4626:	d02f      	beq.n	d4688 <_ZN17Adafruit_NeoPixel4showEv+0x134>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4628:	6863      	ldr	r3, [r4, #4]
   d462a:	1a9b      	subs	r3, r3, r2
   d462c:	2b28      	cmp	r3, #40	; 0x28
   d462e:	d9fb      	bls.n	d4628 <_ZN17Adafruit_NeoPixel4showEv+0xd4>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4630:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4634:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   d4636:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d463a:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   d463e:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4642:	d1e3      	bne.n	d460c <_ZN17Adafruit_NeoPixel4showEv+0xb8>
      for(uint16_t n=0; n<numBytes; n++) {
   d4644:	88ab      	ldrh	r3, [r5, #4]
   d4646:	f10e 0e01 	add.w	lr, lr, #1
   d464a:	fa1f fe8e 	uxth.w	lr, lr
   d464e:	4573      	cmp	r3, lr
   d4650:	d8d8      	bhi.n	d4604 <_ZN17Adafruit_NeoPixel4showEv+0xb0>
   d4652:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   d4656:	fb01 f103 	mul.w	r1, r1, r3
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d465a:	6863      	ldr	r3, [r4, #4]
   d465c:	1a9b      	subs	r3, r3, r2
   d465e:	2b46      	cmp	r3, #70	; 0x46
   d4660:	d9fb      	bls.n	d465a <_ZN17Adafruit_NeoPixel4showEv+0x106>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4662:	6863      	ldr	r3, [r4, #4]
   d4664:	eba3 0909 	sub.w	r9, r3, r9
   d4668:	4589      	cmp	r9, r1
   d466a:	f0c0 80d9 	bcc.w	d4820 <_ZN17Adafruit_NeoPixel4showEv+0x2cc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d466e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4672:	f000 f9a9 	bl	d49c8 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   d4676:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   d4678:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   d467c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   d4680:	2900      	cmp	r1, #0
   d4682:	d1ba      	bne.n	d45fa <_ZN17Adafruit_NeoPixel4showEv+0xa6>
      uint32_t cyc = 0;
   d4684:	460a      	mov	r2, r1
   d4686:	e7e8      	b.n	d465a <_ZN17Adafruit_NeoPixel4showEv+0x106>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4688:	6863      	ldr	r3, [r4, #4]
   d468a:	1a9b      	subs	r3, r3, r2
   d468c:	2b11      	cmp	r3, #17
   d468e:	d8cf      	bhi.n	d4630 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
   d4690:	6863      	ldr	r3, [r4, #4]
   d4692:	1a9b      	subs	r3, r3, r2
   d4694:	2b11      	cmp	r3, #17
   d4696:	d9f7      	bls.n	d4688 <_ZN17Adafruit_NeoPixel4showEv+0x134>
   d4698:	e7ca      	b.n	d4630 <_ZN17Adafruit_NeoPixel4showEv+0xdc>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d469a:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d469e:	2a00      	cmp	r2, #0
   d46a0:	f6bf af7e 	bge.w	d45a0 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d46a4:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d46a8:	2a00      	cmp	r2, #0
   d46aa:	f6bf af79 	bge.w	d45a0 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d46ae:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d46b2:	2a00      	cmp	r2, #0
   d46b4:	f6bf af74 	bge.w	d45a0 <_ZN17Adafruit_NeoPixel4showEv+0x4c>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d46b8:	011b      	lsls	r3, r3, #4
   d46ba:	3304      	adds	r3, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d46bc:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d46be:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d46c0:	f000 fb3e 	bl	d4d40 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d46c4:	2800      	cmp	r0, #0
   d46c6:	f43f af7a 	beq.w	d45be <_ZN17Adafruit_NeoPixel4showEv+0x6a>
    for(uint16_t n=0; n<numBytes; n++) {
   d46ca:	88ab      	ldrh	r3, [r5, #4]
   d46cc:	2b00      	cmp	r3, #0
   d46ce:	f000 80da 	beq.w	d4886 <_ZN17Adafruit_NeoPixel4showEv+0x332>
      uint8_t pix = pixels[n];
   d46d2:	68ea      	ldr	r2, [r5, #12]
   d46d4:	3b01      	subs	r3, #1
   d46d6:	fa12 fe83 	uxtah	lr, r2, r3
   d46da:	f102 3cff 	add.w	ip, r2, #4294967295
    uint16_t pos = 0; // bit position
   d46de:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d46e0:	f248 0206 	movw	r2, #32774	; 0x8006
   d46e4:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   d46e8:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d46ec:	f017 0f80 	tst.w	r7, #128	; 0x80
   d46f0:	bf0c      	ite	eq
   d46f2:	4690      	moveq	r8, r2
   d46f4:	4688      	movne	r8, r1
   d46f6:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
        pos++;
   d46fa:	f103 0801 	add.w	r8, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d46fe:	f017 0f40 	tst.w	r7, #64	; 0x40
        pos++;
   d4702:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4706:	bf0c      	ite	eq
   d4708:	4693      	moveq	fp, r2
   d470a:	468b      	movne	fp, r1
   d470c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   d4710:	f103 0802 	add.w	r8, r3, #2
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4714:	f017 0f20 	tst.w	r7, #32
        pos++;
   d4718:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d471c:	bf0c      	ite	eq
   d471e:	4692      	moveq	sl, r2
   d4720:	468a      	movne	sl, r1
   d4722:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
        pos++;
   d4726:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d472a:	f017 0f10 	tst.w	r7, #16
        pos++;
   d472e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4732:	bf0c      	ite	eq
   d4734:	4691      	moveq	r9, r2
   d4736:	4689      	movne	r9, r1
   d4738:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d473c:	f103 0904 	add.w	r9, r3, #4
   d4740:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4744:	f017 0f08 	tst.w	r7, #8
        pos++;
   d4748:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d474c:	bf0c      	ite	eq
   d474e:	4692      	moveq	sl, r2
   d4750:	468a      	movne	sl, r1
        pos++;
   d4752:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4756:	f017 0f04 	tst.w	r7, #4
   d475a:	f820 a019 	strh.w	sl, [r0, r9, lsl #1]
   d475e:	bf0c      	ite	eq
   d4760:	4691      	moveq	r9, r2
   d4762:	4689      	movne	r9, r1
   d4764:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d4768:	f103 0806 	add.w	r8, r3, #6
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d476c:	f017 0f02 	tst.w	r7, #2
        pos++;
   d4770:	fa1f f888 	uxth.w	r8, r8
   d4774:	f103 0608 	add.w	r6, r3, #8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4778:	bf0c      	ite	eq
   d477a:	4691      	moveq	r9, r2
   d477c:	4689      	movne	r9, r1
        pos++;
   d477e:	3307      	adds	r3, #7
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4780:	07ff      	lsls	r7, r7, #31
   d4782:	f820 9018 	strh.w	r9, [r0, r8, lsl #1]
        pos++;
   d4786:	9601      	str	r6, [sp, #4]
   d4788:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d478a:	d575      	bpl.n	d4878 <_ZN17Adafruit_NeoPixel4showEv+0x324>
    for(uint16_t n=0; n<numBytes; n++) {
   d478c:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d478e:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
        pos++;
   d4792:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    for(uint16_t n=0; n<numBytes; n++) {
   d4796:	d1a7      	bne.n	d46e8 <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d4798:	1c59      	adds	r1, r3, #1
   d479a:	3302      	adds	r3, #2
   d479c:	b289      	uxth	r1, r1
   d479e:	b29b      	uxth	r3, r3
   d47a0:	0049      	lsls	r1, r1, #1
   d47a2:	005b      	lsls	r3, r3, #1
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d47a4:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d47a6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   d47aa:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d47ac:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47ae:	4939      	ldr	r1, [pc, #228]	; (d4894 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d47b0:	52c7      	strh	r7, [r0, r3]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d47b2:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d47b4:	f04f 0c14 	mov.w	ip, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d47b8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d47bc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d47c0:	f8c4 c508 	str.w	ip, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d47c4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   d47c8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d47cc:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d47d0:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   d47d4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d47d8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47dc:	79eb      	ldrb	r3, [r5, #7]
   d47de:	680e      	ldr	r6, [r1, #0]
   d47e0:	eb06 1703 	add.w	r7, r6, r3, lsl #4
   d47e4:	0119      	lsls	r1, r3, #4
   d47e6:	787b      	ldrb	r3, [r7, #1]
   d47e8:	5c71      	ldrb	r1, [r6, r1]
   d47ea:	f003 031f 	and.w	r3, r3, #31
   d47ee:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    pwm->ENABLE = 1;
   d47f2:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47f4:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   d47f8:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   d47fc:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4800:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   d4802:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4806:	2b00      	cmp	r3, #0
   d4808:	d0fb      	beq.n	d4802 <_ZN17Adafruit_NeoPixel4showEv+0x2ae>
    pwm->EVENTS_SEQEND[0] = 0;
   d480a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d480c:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   d4810:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   d4814:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4818:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   d481c:	f000 fa98 	bl	d4d50 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4820:	f000 f8da 	bl	d49d8 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4824:	6128      	str	r0, [r5, #16]
}
   d4826:	b007      	add	sp, #28
   d4828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d482c:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   d4830:	2a00      	cmp	r2, #0
   d4832:	f6bf aec4 	bge.w	d45be <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4836:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d483a:	2a00      	cmp	r2, #0
   d483c:	f6bf aebf 	bge.w	d45be <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4840:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4844:	2a00      	cmp	r2, #0
   d4846:	f6bf aeba 	bge.w	d45be <_ZN17Adafruit_NeoPixel4showEv+0x6a>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d484a:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d484e:	2a00      	cmp	r2, #0
   d4850:	f6bf aeb5 	bge.w	d45be <_ZN17Adafruit_NeoPixel4showEv+0x6a>
   d4854:	e730      	b.n	d46b8 <_ZN17Adafruit_NeoPixel4showEv+0x164>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4856:	f8d4 2564 	ldr.w	r2, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d485a:	2a00      	cmp	r2, #0
   d485c:	f6bf aea9 	bge.w	d45b2 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4860:	f8d4 2568 	ldr.w	r2, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4864:	2a00      	cmp	r2, #0
   d4866:	f6bf aea4 	bge.w	d45b2 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d486a:	f8d4 256c 	ldr.w	r2, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d486e:	2a00      	cmp	r2, #0
   d4870:	f6bf ae9f 	bge.w	d45b2 <_ZN17Adafruit_NeoPixel4showEv+0x5e>
   d4874:	e720      	b.n	d46b8 <_ZN17Adafruit_NeoPixel4showEv+0x164>
   d4876:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   d4878:	45e6      	cmp	lr, ip
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d487a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        pos++;
   d487e:	b2b3      	uxth	r3, r6
    for(uint16_t n=0; n<numBytes; n++) {
   d4880:	f47f af32 	bne.w	d46e8 <_ZN17Adafruit_NeoPixel4showEv+0x194>
   d4884:	e788      	b.n	d4798 <_ZN17Adafruit_NeoPixel4showEv+0x244>
   d4886:	2304      	movs	r3, #4
   d4888:	2102      	movs	r1, #2
   d488a:	e78b      	b.n	d47a4 <_ZN17Adafruit_NeoPixel4showEv+0x250>
   d488c:	000d637c 	.word	0x000d637c
   d4890:	000d6370 	.word	0x000d6370
   d4894:	2003e640 	.word	0x2003e640
   d4898:	e000edf0 	.word	0xe000edf0
   d489c:	e0001000 	.word	0xe0001000

000d48a0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d48a0:	8843      	ldrh	r3, [r0, #2]
   d48a2:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d48a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d48a6:	d926      	bls.n	d48f6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d48a8:	7a05      	ldrb	r5, [r0, #8]
   d48aa:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d48ae:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d48b2:	b2d6      	uxtb	r6, r2
   d48b4:	b13d      	cbz	r5, d48c6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   d48b6:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d48b8:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d48ba:	436e      	muls	r6, r5
      r = (r * brightness) >> 8;
   d48bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d48c0:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d48c4:	0a36      	lsrs	r6, r6, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d48c6:	f890 c006 	ldrb.w	ip, [r0, #6]
   d48ca:	68c7      	ldr	r7, [r0, #12]
   d48cc:	f1bc 0f06 	cmp.w	ip, #6
   d48d0:	bf0c      	ite	eq
   d48d2:	2504      	moveq	r5, #4
   d48d4:	2503      	movne	r5, #3
   d48d6:	4369      	muls	r1, r5
   d48d8:	f1ac 0c02 	sub.w	ip, ip, #2
   d48dc:	187d      	adds	r5, r7, r1
    switch(type) {
   d48de:	f1bc 0f06 	cmp.w	ip, #6
   d48e2:	d81d      	bhi.n	d4920 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   d48e4:	e8df f00c 	tbb	[pc, ip]
   d48e8:	04081c04 	.word	0x04081c04
   d48ec:	040f      	.short	0x040f
   d48ee:	04          	.byte	0x04
   d48ef:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d48f0:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d48f2:	706b      	strb	r3, [r5, #1]
          *p = b;
   d48f4:	70ae      	strb	r6, [r5, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
   d48f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   d48f8:	2bfe      	cmp	r3, #254	; 0xfe
   d48fa:	bf28      	it	cs
   d48fc:	23fe      	movcs	r3, #254	; 0xfe
   d48fe:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d4900:	706e      	strb	r6, [r5, #1]
          *p = g;
   d4902:	70ac      	strb	r4, [r5, #2]
        } break;
   d4904:	e7f7      	b.n	d48f6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p++ = r;
   d4906:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4908:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d490a:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d490c:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   d490e:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4910:	b913      	cbnz	r3, d4918 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   d4912:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4914:	70ea      	strb	r2, [r5, #3]
        } break;
   d4916:	e7ee      	b.n	d48f6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4918:	435a      	muls	r2, r3
   d491a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d491e:	e7f9      	b.n	d4914 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   d4920:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4922:	706c      	strb	r4, [r5, #1]
          *p = b;
   d4924:	70ae      	strb	r6, [r5, #2]
}
   d4926:	e7e6      	b.n	d48f6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>

000d4928 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d4928:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
}
   d492c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   d4930:	4770      	bx	lr

000d4932 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
   d4932:	8840      	ldrh	r0, [r0, #2]
   d4934:	4770      	bx	lr
	...

000d4938 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4938:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d493a:	f000 f815 	bl	d4968 <HAL_Pin_Map>
   d493e:	4b01      	ldr	r3, [pc, #4]	; (d4944 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d4940:	6018      	str	r0, [r3, #0]
}
   d4942:	bd08      	pop	{r3, pc}
   d4944:	2003e640 	.word	0x2003e640

000d4948 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <netdb_freeaddrinfo+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	689b      	ldr	r3, [r3, #8]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030268 	.word	0x00030268

000d4958 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <netdb_getaddrinfo+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	68db      	ldr	r3, [r3, #12]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030268 	.word	0x00030268

000d4968 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <HAL_Pin_Map+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	681b      	ldr	r3, [r3, #0]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	0003022c 	.word	0x0003022c

000d4978 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <HAL_Pin_Mode+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	689b      	ldr	r3, [r3, #8]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003022c 	.word	0x0003022c

000d4988 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_Get_Pin_Mode+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	68db      	ldr	r3, [r3, #12]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003022c 	.word	0x0003022c

000d4998 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_GPIO_Write+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	691b      	ldr	r3, [r3, #16]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003022c 	.word	0x0003022c

000d49a8 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <HAL_Pulse_In+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003022c 	.word	0x0003022c

000d49b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <HAL_RNG_GetRandomNumber+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	685b      	ldr	r3, [r3, #4]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030218 	.word	0x00030218

000d49c8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <HAL_Delay_Microseconds+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	68db      	ldr	r3, [r3, #12]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030218 	.word	0x00030218

000d49d8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	691b      	ldr	r3, [r3, #16]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030218 	.word	0x00030218

000d49e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	695b      	ldr	r3, [r3, #20]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030218 	.word	0x00030218

000d49f8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <hal_rtc_time_is_valid+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030218 	.word	0x00030218

000d4a08 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <hal_rtc_get_time+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030218 	.word	0x00030218

000d4a18 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <os_mutex_recursive_create+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030248 	.word	0x00030248

000d4a28 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <os_mutex_recursive_destroy+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030248 	.word	0x00030248

000d4a38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <inet_inet_ntop+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	695b      	ldr	r3, [r3, #20]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030264 	.word	0x00030264

000d4a48 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <hal_usart_init+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	681b      	ldr	r3, [r3, #0]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	0003023c 	.word	0x0003023c

000d4a58 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <hal_usart_write+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	68db      	ldr	r3, [r3, #12]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	0003023c 	.word	0x0003023c

000d4a68 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <hal_usart_available+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	691b      	ldr	r3, [r3, #16]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	0003023c 	.word	0x0003023c

000d4a78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <hal_usart_read+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	695b      	ldr	r3, [r3, #20]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	0003023c 	.word	0x0003023c

000d4a88 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <hal_usart_peek+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	699b      	ldr	r3, [r3, #24]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	0003023c 	.word	0x0003023c

000d4a98 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <hal_usart_flush+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	69db      	ldr	r3, [r3, #28]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	0003023c 	.word	0x0003023c

000d4aa8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <hal_usart_is_enabled+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	6a1b      	ldr	r3, [r3, #32]
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	0003023c 	.word	0x0003023c

000d4ab8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <hal_usart_available_data_for_write+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003023c 	.word	0x0003023c

000d4ac8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <hal_i2c_write+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	6a1b      	ldr	r3, [r3, #32]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	00030228 	.word	0x00030228

000d4ad8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <hal_i2c_available+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	00030228 	.word	0x00030228

000d4ae8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <hal_i2c_read+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	00030228 	.word	0x00030228

000d4af8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <hal_i2c_peek+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	00030228 	.word	0x00030228

000d4b08 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <hal_i2c_flush+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	00030228 	.word	0x00030228

000d4b18 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <hal_i2c_is_enabled+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	00030228 	.word	0x00030228

000d4b28 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <hal_i2c_init+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	00030228 	.word	0x00030228

000d4b38 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <hal_spi_init+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	69db      	ldr	r3, [r3, #28]
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	00030230 	.word	0x00030230

000d4b48 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <hal_spi_is_enabled+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	6a1b      	ldr	r3, [r3, #32]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	00030230 	.word	0x00030230

000d4b58 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <HAL_USB_USART_Init+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	681b      	ldr	r3, [r3, #0]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	0003024c 	.word	0x0003024c

000d4b68 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <HAL_USB_USART_Begin+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	685b      	ldr	r3, [r3, #4]
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	0003024c 	.word	0x0003024c

000d4b78 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <HAL_USB_USART_Available_Data+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	691b      	ldr	r3, [r3, #16]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	0003024c 	.word	0x0003024c

000d4b88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	695b      	ldr	r3, [r3, #20]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	0003024c 	.word	0x0003024c

000d4b98 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <HAL_USB_USART_Receive_Data+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	699b      	ldr	r3, [r3, #24]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	0003024c 	.word	0x0003024c

000d4ba8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <HAL_USB_USART_Send_Data+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	69db      	ldr	r3, [r3, #28]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	0003024c 	.word	0x0003024c

000d4bb8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <HAL_USB_USART_Flush_Data+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	6a1b      	ldr	r3, [r3, #32]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	0003024c 	.word	0x0003024c

000d4bc8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <system_mode+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	681b      	ldr	r3, [r3, #0]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030220 	.word	0x00030220

000d4bd8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <set_system_mode+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	685b      	ldr	r3, [r3, #4]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030220 	.word	0x00030220

000d4be8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <system_delay_ms+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	695b      	ldr	r3, [r3, #20]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030220 	.word	0x00030220

000d4bf8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <application_thread_current+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030220 	.word	0x00030220

000d4c08 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <application_thread_invoke+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030220 	.word	0x00030220

000d4c18 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <system_thread_get_state+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030220 	.word	0x00030220

000d4c28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b03      	ldr	r3, [pc, #12]	; (d4c38 <system_ctrl_set_app_request_handler+0x10>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c32:	9301      	str	r3, [sp, #4]
   d4c34:	bd08      	pop	{r3, pc}
   d4c36:	0000      	.short	0x0000
   d4c38:	00030220 	.word	0x00030220

000d4c3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b03      	ldr	r3, [pc, #12]	; (d4c4c <system_ctrl_set_result+0x10>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4c46:	9301      	str	r3, [sp, #4]
   d4c48:	bd08      	pop	{r3, pc}
   d4c4a:	0000      	.short	0x0000
   d4c4c:	00030220 	.word	0x00030220

000d4c50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <network_connect+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	685b      	ldr	r3, [r3, #4]
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030240 	.word	0x00030240

000d4c60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <network_connecting+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	689b      	ldr	r3, [r3, #8]
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030240 	.word	0x00030240

000d4c70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <network_disconnect+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	68db      	ldr	r3, [r3, #12]
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030240 	.word	0x00030240

000d4c80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <network_ready+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	691b      	ldr	r3, [r3, #16]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	00030240 	.word	0x00030240

000d4c90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <network_on+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	695b      	ldr	r3, [r3, #20]
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030240 	.word	0x00030240

000d4ca0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <network_off+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	699b      	ldr	r3, [r3, #24]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030240 	.word	0x00030240

000d4cb0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <network_listen+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	69db      	ldr	r3, [r3, #28]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	00030240 	.word	0x00030240

000d4cc0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <network_listening+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	6a1b      	ldr	r3, [r3, #32]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	00030240 	.word	0x00030240

000d4cd0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <network_set_listen_timeout+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030240 	.word	0x00030240

000d4ce0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <network_get_listen_timeout+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	00030240 	.word	0x00030240

000d4cf0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <spark_process+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	689b      	ldr	r3, [r3, #8]
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	00030244 	.word	0x00030244

000d4d00 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <spark_cloud_flag_connected+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	695b      	ldr	r3, [r3, #20]
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030244 	.word	0x00030244

000d4d10 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <spark_send_event+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	6a1b      	ldr	r3, [r3, #32]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	00030244 	.word	0x00030244

000d4d20 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <spark_sync_time_pending+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	00030244 	.word	0x00030244

000d4d30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030244 	.word	0x00030244

000d4d40 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <malloc+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	681b      	ldr	r3, [r3, #0]
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	0003021c 	.word	0x0003021c

000d4d50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d50:	b508      	push	{r3, lr}
   d4d52:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <free+0xc>)
   d4d54:	681b      	ldr	r3, [r3, #0]
   d4d56:	685b      	ldr	r3, [r3, #4]
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	bd08      	pop	{r3, pc}
   d4d5c:	0003021c 	.word	0x0003021c

000d4d60 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <realloc+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	689b      	ldr	r3, [r3, #8]
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	0003021c 	.word	0x0003021c

000d4d70 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <vsnprintf+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	0003021c 	.word	0x0003021c

000d4d80 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4d80:	b508      	push	{r3, lr}
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <abort+0xc>)
   d4d84:	681b      	ldr	r3, [r3, #0]
   d4d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d88:	9301      	str	r3, [sp, #4]
   d4d8a:	bd08      	pop	{r3, pc}
   d4d8c:	0003021c 	.word	0x0003021c

000d4d90 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4d90:	b508      	push	{r3, lr}
   d4d92:	4b02      	ldr	r3, [pc, #8]	; (d4d9c <_malloc_r+0xc>)
   d4d94:	681b      	ldr	r3, [r3, #0]
   d4d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d98:	9301      	str	r3, [sp, #4]
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	0003021c 	.word	0x0003021c

000d4da0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4da0:	b508      	push	{r3, lr}
   d4da2:	4b02      	ldr	r3, [pc, #8]	; (d4dac <newlib_impure_ptr_callback+0xc>)
   d4da4:	681b      	ldr	r3, [r3, #0]
   d4da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4da8:	9301      	str	r3, [sp, #4]
   d4daa:	bd08      	pop	{r3, pc}
   d4dac:	0003021c 	.word	0x0003021c

000d4db0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4db0:	2200      	movs	r2, #0
   d4db2:	6840      	ldr	r0, [r0, #4]
   d4db4:	4611      	mov	r1, r2
   d4db6:	f7ff bf83 	b.w	d4cc0 <network_listening>

000d4dba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4dba:	2200      	movs	r2, #0
   d4dbc:	6840      	ldr	r0, [r0, #4]
   d4dbe:	4611      	mov	r1, r2
   d4dc0:	f7ff bf8e 	b.w	d4ce0 <network_get_listen_timeout>

000d4dc4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4dc4:	6840      	ldr	r0, [r0, #4]
   d4dc6:	2200      	movs	r2, #0
   d4dc8:	f7ff bf82 	b.w	d4cd0 <network_set_listen_timeout>

000d4dcc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4dcc:	6840      	ldr	r0, [r0, #4]
   d4dce:	2200      	movs	r2, #0
   d4dd0:	f081 0101 	eor.w	r1, r1, #1
   d4dd4:	f7ff bf6c 	b.w	d4cb0 <network_listen>

000d4dd8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4dd8:	2300      	movs	r3, #0
   d4dda:	6840      	ldr	r0, [r0, #4]
   d4ddc:	461a      	mov	r2, r3
   d4dde:	4619      	mov	r1, r3
   d4de0:	f7ff bf5e 	b.w	d4ca0 <network_off>

000d4de4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4de4:	2300      	movs	r3, #0
   d4de6:	6840      	ldr	r0, [r0, #4]
   d4de8:	461a      	mov	r2, r3
   d4dea:	4619      	mov	r1, r3
   d4dec:	f7ff bf50 	b.w	d4c90 <network_on>

000d4df0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4df0:	2200      	movs	r2, #0
   d4df2:	6840      	ldr	r0, [r0, #4]
   d4df4:	4611      	mov	r1, r2
   d4df6:	f7ff bf43 	b.w	d4c80 <network_ready>

000d4dfa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4dfa:	2200      	movs	r2, #0
   d4dfc:	6840      	ldr	r0, [r0, #4]
   d4dfe:	4611      	mov	r1, r2
   d4e00:	f7ff bf2e 	b.w	d4c60 <network_connecting>

000d4e04 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e04:	6840      	ldr	r0, [r0, #4]
   d4e06:	2200      	movs	r2, #0
   d4e08:	2102      	movs	r1, #2
   d4e0a:	f7ff bf31 	b.w	d4c70 <network_disconnect>

000d4e0e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4e0e:	2300      	movs	r3, #0
   d4e10:	6840      	ldr	r0, [r0, #4]
   d4e12:	461a      	mov	r2, r3
   d4e14:	f7ff bf1c 	b.w	d4c50 <network_connect>

000d4e18 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e18:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4e1a:	2203      	movs	r2, #3
   d4e1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4e1e:	4a02      	ldr	r2, [pc, #8]	; (d4e28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4e20:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4e22:	4770      	bx	lr
   d4e24:	2003e644 	.word	0x2003e644
   d4e28:	000d6398 	.word	0x000d6398

000d4e2c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4e2c:	b510      	push	{r4, lr}
   d4e2e:	4604      	mov	r4, r0
   d4e30:	4608      	mov	r0, r1
{
    _spi = spi;
   d4e32:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4e34:	f7ff fe80 	bl	d4b38 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4e38:	2300      	movs	r3, #0
   d4e3a:	6063      	str	r3, [r4, #4]
}
   d4e3c:	4620      	mov	r0, r4
   d4e3e:	bd10      	pop	{r4, pc}

000d4e40 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4e40:	b510      	push	{r4, lr}
   d4e42:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4e44:	6800      	ldr	r0, [r0, #0]
   d4e46:	b118      	cbz	r0, d4e50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4e48:	f7ff ff82 	bl	d4d50 <free>
            wakeupSource_ = nullptr;
   d4e4c:	2300      	movs	r3, #0
   d4e4e:	6023      	str	r3, [r4, #0]
        }
    }
   d4e50:	bd10      	pop	{r4, pc}

000d4e52 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4e52:	b510      	push	{r4, lr}
   d4e54:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4e56:	f7ff fff3 	bl	d4e40 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	bd10      	pop	{r4, pc}
	...

000d4e60 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4e60:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4e62:	4b09      	ldr	r3, [pc, #36]	; (d4e88 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4e64:	4c09      	ldr	r4, [pc, #36]	; (d4e8c <_GLOBAL__sub_I_System+0x2c>)
   d4e66:	2202      	movs	r2, #2
   d4e68:	2000      	movs	r0, #0
   d4e6a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4e6c:	4b08      	ldr	r3, [pc, #32]	; (d4e90 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4e6e:	6020      	str	r0, [r4, #0]
   d4e70:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4e72:	71a0      	strb	r0, [r4, #6]
   d4e74:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e76:	f7ff feaf 	bl	d4bd8 <set_system_mode>
SystemClass System;
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	4a05      	ldr	r2, [pc, #20]	; (d4e94 <_GLOBAL__sub_I_System+0x34>)
   d4e7e:	4906      	ldr	r1, [pc, #24]	; (d4e98 <_GLOBAL__sub_I_System+0x38>)
   d4e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4e84:	f001 b9b2 	b.w	d61ec <__aeabi_atexit>
   d4e88:	2003e658 	.word	0x2003e658
   d4e8c:	2003e64c 	.word	0x2003e64c
   d4e90:	ffff0000 	.word	0xffff0000
   d4e94:	2003e5dc 	.word	0x2003e5dc
   d4e98:	000d4e53 	.word	0x000d4e53

000d4e9c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4e9c:	b510      	push	{r4, lr}
   d4e9e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4ea0:	f001 fa1d 	bl	d62de <strlen>
   d4ea4:	3801      	subs	r0, #1
   d4ea6:	1823      	adds	r3, r4, r0
   d4ea8:	4620      	mov	r0, r4
	while(i<j){
   d4eaa:	4283      	cmp	r3, r0
   d4eac:	d906      	bls.n	d4ebc <_Z11str_reversePc+0x20>
		c = *i;
   d4eae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4eb0:	7819      	ldrb	r1, [r3, #0]
   d4eb2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4eb6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d4eba:	e7f6      	b.n	d4eaa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4ebc:	bd10      	pop	{r4, pc}

000d4ebe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4ebe:	b570      	push	{r4, r5, r6, lr}
   d4ec0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4ec2:	1e91      	subs	r1, r2, #2
   d4ec4:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4ec6:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4ec8:	d822      	bhi.n	d4f10 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d4eca:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4ecc:	b16d      	cbz	r5, d4eea <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4ece:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d4ed2:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d4ed6:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d4ed8:	2d09      	cmp	r5, #9
                *ptr += '0';
   d4eda:	bf94      	ite	ls
   d4edc:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4ede:	3157      	addhi	r1, #87	; 0x57
   d4ee0:	b2c9      	uxtb	r1, r1
   d4ee2:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d4ee6:	4635      	mov	r5, r6
	while(a){
   d4ee8:	e7f0      	b.n	d4ecc <ultoa+0xe>
   d4eea:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d4eec:	4423      	add	r3, r4
            *ptr++ = '0';
   d4eee:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d4ef0:	4293      	cmp	r3, r2
   d4ef2:	d902      	bls.n	d4efa <ultoa+0x3c>
            *ptr++ = '0';
   d4ef4:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d4ef8:	e7fa      	b.n	d4ef0 <ultoa+0x32>
   d4efa:	1a1a      	subs	r2, r3, r0
   d4efc:	4283      	cmp	r3, r0
   d4efe:	bf38      	it	cc
   d4f00:	2200      	movcc	r2, #0

	*ptr = '\0';
   d4f02:	2300      	movs	r3, #0
   d4f04:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d4f06:	4620      	mov	r0, r4
   d4f08:	f7ff ffc8 	bl	d4e9c <_Z11str_reversePc>
	return buffer;
   d4f0c:	4620      	mov	r0, r4
}
   d4f0e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d4f10:	2000      	movs	r0, #0
   d4f12:	e7fc      	b.n	d4f0e <ultoa+0x50>

000d4f14 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f14:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4f16:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f18:	460c      	mov	r4, r1
   d4f1a:	4615      	mov	r5, r2
	if(a<0){
   d4f1c:	da0e      	bge.n	d4f3c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d4f22:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f26:	bf14      	ite	ne
   d4f28:	4258      	negne	r0, r3
   d4f2a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4f2c:	2301      	movs	r3, #1
		*buffer = '-';
   d4f2e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d4f30:	462a      	mov	r2, r5
   d4f32:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d4f34:	f7ff ffc3 	bl	d4ebe <ultoa>
	}
	return buffer;
}
   d4f38:	4620      	mov	r0, r4
   d4f3a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d4f3c:	2301      	movs	r3, #1
   d4f3e:	e7f9      	b.n	d4f34 <itoa+0x20>

000d4f40 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4f40:	b510      	push	{r4, lr}
   d4f42:	4604      	mov	r4, r0
{
	free(buffer);
   d4f44:	6800      	ldr	r0, [r0, #0]
   d4f46:	f7ff ff03 	bl	d4d50 <free>
}
   d4f4a:	4620      	mov	r0, r4
   d4f4c:	bd10      	pop	{r4, pc}

000d4f4e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4f4e:	b510      	push	{r4, lr}
   d4f50:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4f52:	6800      	ldr	r0, [r0, #0]
   d4f54:	b108      	cbz	r0, d4f5a <_ZN6String10invalidateEv+0xc>
   d4f56:	f7ff fefb 	bl	d4d50 <free>
	buffer = NULL;
   d4f5a:	2300      	movs	r3, #0
	capacity = len = 0;
   d4f5c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4f60:	6023      	str	r3, [r4, #0]
}
   d4f62:	bd10      	pop	{r4, pc}

000d4f64 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4f64:	b538      	push	{r3, r4, r5, lr}
   d4f66:	4604      	mov	r4, r0
   d4f68:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4f6a:	6800      	ldr	r0, [r0, #0]
   d4f6c:	3101      	adds	r1, #1
   d4f6e:	f7ff fef7 	bl	d4d60 <realloc>
	if (newbuffer) {
   d4f72:	b110      	cbz	r0, d4f7a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4f74:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4f78:	2001      	movs	r0, #1
	}
	return 0;
}
   d4f7a:	bd38      	pop	{r3, r4, r5, pc}

000d4f7c <_ZN6String7reserveEj>:
{
   d4f7c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4f7e:	6803      	ldr	r3, [r0, #0]
{
   d4f80:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4f82:	b123      	cbz	r3, d4f8e <_ZN6String7reserveEj+0x12>
   d4f84:	6843      	ldr	r3, [r0, #4]
   d4f86:	428b      	cmp	r3, r1
   d4f88:	d301      	bcc.n	d4f8e <_ZN6String7reserveEj+0x12>
   d4f8a:	2001      	movs	r0, #1
}
   d4f8c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4f8e:	4620      	mov	r0, r4
   d4f90:	f7ff ffe8 	bl	d4f64 <_ZN6String12changeBufferEj>
   d4f94:	2800      	cmp	r0, #0
   d4f96:	d0f9      	beq.n	d4f8c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4f98:	68a3      	ldr	r3, [r4, #8]
   d4f9a:	2b00      	cmp	r3, #0
   d4f9c:	d1f5      	bne.n	d4f8a <_ZN6String7reserveEj+0xe>
   d4f9e:	6822      	ldr	r2, [r4, #0]
   d4fa0:	7013      	strb	r3, [r2, #0]
   d4fa2:	e7f2      	b.n	d4f8a <_ZN6String7reserveEj+0xe>

000d4fa4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4fa6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4fa8:	4611      	mov	r1, r2
   d4faa:	9201      	str	r2, [sp, #4]
{
   d4fac:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4fae:	f7ff ffe5 	bl	d4f7c <_ZN6String7reserveEj>
   d4fb2:	9a01      	ldr	r2, [sp, #4]
   d4fb4:	b928      	cbnz	r0, d4fc2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	f7ff ffc9 	bl	d4f4e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4fbc:	4620      	mov	r0, r4
   d4fbe:	b003      	add	sp, #12
   d4fc0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4fc2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4fc4:	4629      	mov	r1, r5
   d4fc6:	6820      	ldr	r0, [r4, #0]
   d4fc8:	f001 f92a 	bl	d6220 <memcpy>
	buffer[len] = 0;
   d4fcc:	6822      	ldr	r2, [r4, #0]
   d4fce:	68a3      	ldr	r3, [r4, #8]
   d4fd0:	2100      	movs	r1, #0
   d4fd2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4fd4:	e7f2      	b.n	d4fbc <_ZN6String4copyEPKcj+0x18>

000d4fd6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4fd6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4fd8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4fda:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4fde:	4604      	mov	r4, r0
	len = 0;
   d4fe0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4fe2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4fe4:	b141      	cbz	r1, d4ff8 <_ZN6StringC1EPKc+0x22>
   d4fe6:	4608      	mov	r0, r1
   d4fe8:	9101      	str	r1, [sp, #4]
   d4fea:	f001 f978 	bl	d62de <strlen>
   d4fee:	9901      	ldr	r1, [sp, #4]
   d4ff0:	4602      	mov	r2, r0
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	f7ff ffd6 	bl	d4fa4 <_ZN6String4copyEPKcj>
}
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	b002      	add	sp, #8
   d4ffc:	bd10      	pop	{r4, pc}

000d4ffe <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4ffe:	b513      	push	{r0, r1, r4, lr}
   d5000:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5002:	b159      	cbz	r1, d501c <_ZN6StringaSEPKc+0x1e>
   d5004:	4608      	mov	r0, r1
   d5006:	9101      	str	r1, [sp, #4]
   d5008:	f001 f969 	bl	d62de <strlen>
   d500c:	9901      	ldr	r1, [sp, #4]
   d500e:	4602      	mov	r2, r0
   d5010:	4620      	mov	r0, r4
   d5012:	f7ff ffc7 	bl	d4fa4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5016:	4620      	mov	r0, r4
   d5018:	b002      	add	sp, #8
   d501a:	bd10      	pop	{r4, pc}
	else invalidate();
   d501c:	f7ff ff97 	bl	d4f4e <_ZN6String10invalidateEv>
   d5020:	e7f9      	b.n	d5016 <_ZN6StringaSEPKc+0x18>

000d5022 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d5022:	b510      	push	{r4, lr}
   d5024:	4604      	mov	r4, r0
   d5026:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5028:	2300      	movs	r3, #0
	capacity = 0;
   d502a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d502e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5030:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d5032:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d5034:	a901      	add	r1, sp, #4
   d5036:	f7ff ff6d 	bl	d4f14 <itoa>
	*this = buf;
   d503a:	a901      	add	r1, sp, #4
   d503c:	4620      	mov	r0, r4
   d503e:	f7ff ffde 	bl	d4ffe <_ZN6StringaSEPKc>
}
   d5042:	4620      	mov	r0, r4
   d5044:	b00a      	add	sp, #40	; 0x28
   d5046:	bd10      	pop	{r4, pc}

000d5048 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
   d5048:	b510      	push	{r4, lr}
   d504a:	4604      	mov	r4, r0
   d504c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d504e:	2300      	movs	r3, #0
	capacity = 0;
   d5050:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5054:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5056:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
   d5058:	4608      	mov	r0, r1
	ultoa(value, buf, base);
   d505a:	2301      	movs	r3, #1
   d505c:	a901      	add	r1, sp, #4
   d505e:	f7ff ff2e 	bl	d4ebe <ultoa>
	*this = buf;
   d5062:	a901      	add	r1, sp, #4
   d5064:	4620      	mov	r0, r4
   d5066:	f7ff ffca 	bl	d4ffe <_ZN6StringaSEPKc>
}
   d506a:	4620      	mov	r0, r4
   d506c:	b00a      	add	sp, #40	; 0x28
   d506e:	bd10      	pop	{r4, pc}

000d5070 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5070:	b570      	push	{r4, r5, r6, lr}
   d5072:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5074:	460e      	mov	r6, r1
   d5076:	b909      	cbnz	r1, d507c <_ZN6String6concatEPKcj+0xc>
   d5078:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d507a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d507c:	b16a      	cbz	r2, d509a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d507e:	6884      	ldr	r4, [r0, #8]
   d5080:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5082:	4621      	mov	r1, r4
   d5084:	f7ff ff7a 	bl	d4f7c <_ZN6String7reserveEj>
   d5088:	2800      	cmp	r0, #0
   d508a:	d0f5      	beq.n	d5078 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d508c:	6828      	ldr	r0, [r5, #0]
   d508e:	68ab      	ldr	r3, [r5, #8]
   d5090:	4631      	mov	r1, r6
   d5092:	4418      	add	r0, r3
   d5094:	f001 f8fe 	bl	d6294 <strcpy>
	len = newlen;
   d5098:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d509a:	2001      	movs	r0, #1
   d509c:	e7ed      	b.n	d507a <_ZN6String6concatEPKcj+0xa>

000d509e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d509e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d50a0:	688a      	ldr	r2, [r1, #8]
   d50a2:	6809      	ldr	r1, [r1, #0]
{
   d50a4:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d50a6:	f7ff ffe3 	bl	d5070 <_ZN6String6concatEPKcj>
   d50aa:	b910      	cbnz	r0, d50b2 <_ZplRK15StringSumHelperRK6String+0x14>
   d50ac:	4620      	mov	r0, r4
   d50ae:	f7ff ff4e 	bl	d4f4e <_ZN6String10invalidateEv>
	return a;
}
   d50b2:	4620      	mov	r0, r4
   d50b4:	bd10      	pop	{r4, pc}

000d50b6 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d50b6:	b513      	push	{r0, r1, r4, lr}
   d50b8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d50ba:	b929      	cbnz	r1, d50c8 <_ZplRK15StringSumHelperPKc+0x12>
   d50bc:	4620      	mov	r0, r4
   d50be:	f7ff ff46 	bl	d4f4e <_ZN6String10invalidateEv>
	return a;
}
   d50c2:	4620      	mov	r0, r4
   d50c4:	b002      	add	sp, #8
   d50c6:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d50c8:	4608      	mov	r0, r1
   d50ca:	9101      	str	r1, [sp, #4]
   d50cc:	f001 f907 	bl	d62de <strlen>
   d50d0:	9901      	ldr	r1, [sp, #4]
   d50d2:	4602      	mov	r2, r0
   d50d4:	4620      	mov	r0, r4
   d50d6:	f7ff ffcb 	bl	d5070 <_ZN6String6concatEPKcj>
   d50da:	2800      	cmp	r0, #0
   d50dc:	d0ee      	beq.n	d50bc <_ZplRK15StringSumHelperPKc+0x6>
   d50de:	e7f0      	b.n	d50c2 <_ZplRK15StringSumHelperPKc+0xc>

000d50e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d50e0:	b510      	push	{r4, lr}
          _M_dispose();
   d50e2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d50e4:	4604      	mov	r4, r0
          _M_dispose();
   d50e6:	689b      	ldr	r3, [r3, #8]
   d50e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d50ea:	68a3      	ldr	r3, [r4, #8]
   d50ec:	3b01      	subs	r3, #1
   d50ee:	60a3      	str	r3, [r4, #8]
   d50f0:	b92b      	cbnz	r3, d50fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d50f2:	6823      	ldr	r3, [r4, #0]
   d50f4:	4620      	mov	r0, r4
   d50f6:	68db      	ldr	r3, [r3, #12]
    }
   d50f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d50fc:	4718      	bx	r3
    }
   d50fe:	bd10      	pop	{r4, pc}

000d5100 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5100:	b510      	push	{r4, lr}
   d5102:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5104:	6800      	ldr	r0, [r0, #0]
   d5106:	b108      	cbz	r0, d510c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5108:	f7ff fc8e 	bl	d4a28 <os_mutex_recursive_destroy>
    }
   d510c:	4620      	mov	r0, r4
   d510e:	bd10      	pop	{r4, pc}

000d5110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5110:	680b      	ldr	r3, [r1, #0]
   d5112:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5114:	b113      	cbz	r3, d511c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5116:	685a      	ldr	r2, [r3, #4]
   d5118:	3201      	adds	r2, #1
   d511a:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d511c:	4770      	bx	lr

000d511e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d511e:	b510      	push	{r4, lr}
   d5120:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d5122:	6800      	ldr	r0, [r0, #0]
   d5124:	b128      	cbz	r0, d5132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d5126:	6843      	ldr	r3, [r0, #4]
   d5128:	3b01      	subs	r3, #1
   d512a:	6043      	str	r3, [r0, #4]
   d512c:	b90b      	cbnz	r3, d5132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d512e:	f7ff ffd7 	bl	d50e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d5132:	4620      	mov	r0, r4
   d5134:	bd10      	pop	{r4, pc}
	...

000d5138 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5138:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d513a:	4c06      	ldr	r4, [pc, #24]	; (d5154 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d513c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d513e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5140:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5142:	f7ff fc69 	bl	d4a18 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5146:	4620      	mov	r0, r4
   d5148:	4a03      	ldr	r2, [pc, #12]	; (d5158 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d514a:	4904      	ldr	r1, [pc, #16]	; (d515c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d514c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5150:	f001 b84c 	b.w	d61ec <__aeabi_atexit>
   d5154:	2003e65c 	.word	0x2003e65c
   d5158:	2003e5dc 	.word	0x2003e5dc
   d515c:	000d5101 	.word	0x000d5101

000d5160 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5162:	4606      	mov	r6, r0
   d5164:	460d      	mov	r5, r1
  size_t n = 0;
   d5166:	188f      	adds	r7, r1, r2
   d5168:	2400      	movs	r4, #0
  while (size--) {
   d516a:	42bd      	cmp	r5, r7
   d516c:	d00c      	beq.n	d5188 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d516e:	6833      	ldr	r3, [r6, #0]
   d5170:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5174:	689b      	ldr	r3, [r3, #8]
   d5176:	4630      	mov	r0, r6
   d5178:	4798      	blx	r3
     if (chunk>=0)
   d517a:	1e03      	subs	r3, r0, #0
   d517c:	db01      	blt.n	d5182 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d517e:	441c      	add	r4, r3
  while (size--) {
   d5180:	e7f3      	b.n	d516a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5182:	2c00      	cmp	r4, #0
   d5184:	bf08      	it	eq
   d5186:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5188:	4620      	mov	r0, r4
   d518a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d518c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d518c:	b513      	push	{r0, r1, r4, lr}
   d518e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5190:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5192:	b159      	cbz	r1, d51ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5194:	9101      	str	r1, [sp, #4]
   d5196:	f001 f8a2 	bl	d62de <strlen>
   d519a:	6823      	ldr	r3, [r4, #0]
   d519c:	9901      	ldr	r1, [sp, #4]
   d519e:	68db      	ldr	r3, [r3, #12]
   d51a0:	4602      	mov	r2, r0
   d51a2:	4620      	mov	r0, r4
    }
   d51a4:	b002      	add	sp, #8
   d51a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d51aa:	4718      	bx	r3
    }
   d51ac:	b002      	add	sp, #8
   d51ae:	bd10      	pop	{r4, pc}

000d51b0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d51b0:	b508      	push	{r3, lr}
  return write(str);
   d51b2:	f7ff ffeb 	bl	d518c <_ZN5Print5writeEPKc>
}
   d51b6:	bd08      	pop	{r3, pc}

000d51b8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d51b8:	6803      	ldr	r3, [r0, #0]
   d51ba:	689b      	ldr	r3, [r3, #8]
   d51bc:	4718      	bx	r3

000d51be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d51be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d51c0:	210d      	movs	r1, #13
{
   d51c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d51c4:	f7ff fff8 	bl	d51b8 <_ZN5Print5printEc>
  n += print('\n');
   d51c8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d51ca:	4604      	mov	r4, r0
  n += print('\n');
   d51cc:	4628      	mov	r0, r5
   d51ce:	f7ff fff3 	bl	d51b8 <_ZN5Print5printEc>
  return n;
}
   d51d2:	4420      	add	r0, r4
   d51d4:	bd38      	pop	{r3, r4, r5, pc}

000d51d6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d51d6:	b538      	push	{r3, r4, r5, lr}
   d51d8:	4605      	mov	r5, r0
  return write(str);
   d51da:	f7ff ffd7 	bl	d518c <_ZN5Print5writeEPKc>
   d51de:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d51e0:	4628      	mov	r0, r5
   d51e2:	f7ff ffec 	bl	d51be <_ZN5Print7printlnEv>
  return n;
}
   d51e6:	4420      	add	r0, r4
   d51e8:	bd38      	pop	{r3, r4, r5, pc}

000d51ea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d51ea:	b530      	push	{r4, r5, lr}
   d51ec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d51ee:	2300      	movs	r3, #0
   d51f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d51f4:	2a01      	cmp	r2, #1
   d51f6:	bf98      	it	ls
   d51f8:	220a      	movls	r2, #10
   d51fa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d51fc:	460d      	mov	r5, r1
   d51fe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5202:	fb01 5312 	mls	r3, r1, r2, r5
   d5206:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d520a:	2b09      	cmp	r3, #9
   d520c:	bf94      	ite	ls
   d520e:	3330      	addls	r3, #48	; 0x30
   d5210:	3337      	addhi	r3, #55	; 0x37
   d5212:	b2db      	uxtb	r3, r3
  } while(n);
   d5214:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5216:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d521a:	d9ef      	bls.n	d51fc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d521c:	4621      	mov	r1, r4
   d521e:	f7ff ffb5 	bl	d518c <_ZN5Print5writeEPKc>
}
   d5222:	b00b      	add	sp, #44	; 0x2c
   d5224:	bd30      	pop	{r4, r5, pc}
	...

000d5228 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5228:	4b01      	ldr	r3, [pc, #4]	; (d5230 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d522a:	4a02      	ldr	r2, [pc, #8]	; (d5234 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d522c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d522e:	4770      	bx	lr
   d5230:	2003e660 	.word	0x2003e660
   d5234:	000d63c4 	.word	0x000d63c4

000d5238 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5238:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d523a:	2000      	movs	r0, #0
   d523c:	f7ff fd70 	bl	d4d20 <spark_sync_time_pending>
   d5240:	b128      	cbz	r0, d524e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5242:	f7ff fd5d 	bl	d4d00 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5246:	f080 0001 	eor.w	r0, r0, #1
   d524a:	b2c0      	uxtb	r0, r0
    }
   d524c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d524e:	2001      	movs	r0, #1
   d5250:	e7fc      	b.n	d524c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d5252 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5252:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d5254:	2000      	movs	r0, #0
   d5256:	f7ff fbcf 	bl	d49f8 <hal_rtc_time_is_valid>
    if (rtcstate)
   d525a:	4604      	mov	r4, r0
   d525c:	b9a0      	cbnz	r0, d5288 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d525e:	f7ff fcb3 	bl	d4bc8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5262:	2801      	cmp	r0, #1
   d5264:	d110      	bne.n	d5288 <_ZN9TimeClass7isValidEv+0x36>
   d5266:	4620      	mov	r0, r4
   d5268:	f7ff fcd6 	bl	d4c18 <system_thread_get_state>
   d526c:	b960      	cbnz	r0, d5288 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d526e:	f7ff ffe3 	bl	d5238 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5272:	b910      	cbnz	r0, d527a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5274:	f7ff fd3c 	bl	d4cf0 <spark_process>
        while (_while() && !_condition()) {
   d5278:	e7f9      	b.n	d526e <_ZN9TimeClass7isValidEv+0x1c>
   d527a:	f7ff ffdd 	bl	d5238 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d527e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d5282:	2000      	movs	r0, #0
   d5284:	f7ff bbb8 	b.w	d49f8 <hal_rtc_time_is_valid>
}
   d5288:	4620      	mov	r0, r4
   d528a:	bd10      	pop	{r4, pc}

000d528c <_ZN9TimeClass3nowEv>:
{
   d528c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d528e:	f7ff ffe0 	bl	d5252 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d5292:	2210      	movs	r2, #16
   d5294:	2100      	movs	r1, #0
   d5296:	4668      	mov	r0, sp
   d5298:	f000 ffd0 	bl	d623c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d529c:	2100      	movs	r1, #0
   d529e:	4668      	mov	r0, sp
   d52a0:	f7ff fbb2 	bl	d4a08 <hal_rtc_get_time>
}
   d52a4:	9800      	ldr	r0, [sp, #0]
   d52a6:	b005      	add	sp, #20
   d52a8:	f85d fb04 	ldr.w	pc, [sp], #4

000d52ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d52ac:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d52ae:	681a      	ldr	r2, [r3, #0]
   d52b0:	4b02      	ldr	r3, [pc, #8]	; (d52bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d52b2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d52b4:	4770      	bx	lr
   d52b6:	bf00      	nop
   d52b8:	2003e574 	.word	0x2003e574
   d52bc:	2003e664 	.word	0x2003e664

000d52c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d52c0:	2100      	movs	r1, #0
   d52c2:	f7ff bc91 	b.w	d4be8 <system_delay_ms>

000d52c6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d52c6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d52c8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d52ca:	4604      	mov	r4, r0
      if (_M_manager)
   d52cc:	b113      	cbz	r3, d52d4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52ce:	2203      	movs	r2, #3
   d52d0:	4601      	mov	r1, r0
   d52d2:	4798      	blx	r3
    }
   d52d4:	4620      	mov	r0, r4
   d52d6:	bd10      	pop	{r4, pc}

000d52d8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d52d8:	b510      	push	{r4, lr}
   d52da:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52dc:	f7ff fff3 	bl	d52c6 <_ZNSt14_Function_baseD1Ev>
   d52e0:	4620      	mov	r0, r4
   d52e2:	bd10      	pop	{r4, pc}

000d52e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d52e4:	b513      	push	{r0, r1, r4, lr}
   d52e6:	460b      	mov	r3, r1
   d52e8:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52ea:	e9d0 0100 	ldrd	r0, r1, [r0]
   d52ee:	466c      	mov	r4, sp
   d52f0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d52f4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d52f8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d52fc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5300:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5304:	b002      	add	sp, #8
   d5306:	bd10      	pop	{r4, pc}

000d5308 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5308:	4803      	ldr	r0, [pc, #12]	; (d5318 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d530a:	4a04      	ldr	r2, [pc, #16]	; (d531c <_GLOBAL__sub_I_RGB+0x14>)
   d530c:	4904      	ldr	r1, [pc, #16]	; (d5320 <_GLOBAL__sub_I_RGB+0x18>)
   d530e:	2300      	movs	r3, #0
   d5310:	6083      	str	r3, [r0, #8]
   d5312:	f000 bf6b 	b.w	d61ec <__aeabi_atexit>
   d5316:	bf00      	nop
   d5318:	2003e668 	.word	0x2003e668
   d531c:	2003e5dc 	.word	0x2003e5dc
   d5320:	000d52d9 	.word	0x000d52d9

000d5324 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5324:	4b01      	ldr	r3, [pc, #4]	; (d532c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5326:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5328:	4770      	bx	lr
   d532a:	bf00      	nop
   d532c:	2003e578 	.word	0x2003e578

000d5330 <serialEventRun>:
{
   d5330:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5332:	4b0b      	ldr	r3, [pc, #44]	; (d5360 <serialEventRun+0x30>)
   d5334:	b143      	cbz	r3, d5348 <serialEventRun+0x18>
   d5336:	f000 fbf1 	bl	d5b1c <_Z16_fetch_usbserialv>
   d533a:	6803      	ldr	r3, [r0, #0]
   d533c:	691b      	ldr	r3, [r3, #16]
   d533e:	4798      	blx	r3
   d5340:	2800      	cmp	r0, #0
   d5342:	dd01      	ble.n	d5348 <serialEventRun+0x18>
        serialEvent();
   d5344:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5348:	4b06      	ldr	r3, [pc, #24]	; (d5364 <serialEventRun+0x34>)
   d534a:	b143      	cbz	r3, d535e <serialEventRun+0x2e>
   d534c:	f000 fc64 	bl	d5c18 <_Z22__fetch_global_Serial1v>
   d5350:	6803      	ldr	r3, [r0, #0]
   d5352:	691b      	ldr	r3, [r3, #16]
   d5354:	4798      	blx	r3
   d5356:	2800      	cmp	r0, #0
   d5358:	dd01      	ble.n	d535e <serialEventRun+0x2e>
        serialEvent1();
   d535a:	f3af 8000 	nop.w
}
   d535e:	bd08      	pop	{r3, pc}
	...

000d5368 <_post_loop>:
{
   d5368:	b508      	push	{r3, lr}
	serialEventRun();
   d536a:	f7ff ffe1 	bl	d5330 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d536e:	f7ff fb3b 	bl	d49e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5372:	4b01      	ldr	r3, [pc, #4]	; (d5378 <_post_loop+0x10>)
   d5374:	6018      	str	r0, [r3, #0]
}
   d5376:	bd08      	pop	{r3, pc}
   d5378:	2003e7d4 	.word	0x2003e7d4

000d537c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d537c:	4802      	ldr	r0, [pc, #8]	; (d5388 <_Z33system_initialize_user_backup_ramv+0xc>)
   d537e:	4a03      	ldr	r2, [pc, #12]	; (d538c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5380:	4903      	ldr	r1, [pc, #12]	; (d5390 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5382:	1a12      	subs	r2, r2, r0
   d5384:	f000 bf4c 	b.w	d6220 <memcpy>
   d5388:	2003f400 	.word	0x2003f400
   d538c:	2003f404 	.word	0x2003f404
   d5390:	000d6560 	.word	0x000d6560

000d5394 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5394:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5396:	2300      	movs	r3, #0
   d5398:	9300      	str	r3, [sp, #0]
   d539a:	461a      	mov	r2, r3
   d539c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d53a0:	f7ff fc4c 	bl	d4c3c <system_ctrl_set_result>
}
   d53a4:	b003      	add	sp, #12
   d53a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d53ac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d53ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d53ae:	8843      	ldrh	r3, [r0, #2]
   d53b0:	2b0a      	cmp	r3, #10
   d53b2:	d008      	beq.n	d53c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d53b4:	2b50      	cmp	r3, #80	; 0x50
   d53b6:	d10b      	bne.n	d53d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d53b8:	4b09      	ldr	r3, [pc, #36]	; (d53e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d53ba:	681b      	ldr	r3, [r3, #0]
   d53bc:	b14b      	cbz	r3, d53d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d53be:	b003      	add	sp, #12
   d53c0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d53c4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d53c6:	f7ff ffe5 	bl	d5394 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d53ca:	b003      	add	sp, #12
   d53cc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d53d0:	2300      	movs	r3, #0
   d53d2:	9300      	str	r3, [sp, #0]
   d53d4:	461a      	mov	r2, r3
   d53d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d53da:	f7ff fc2f 	bl	d4c3c <system_ctrl_set_result>
}
   d53de:	e7f4      	b.n	d53ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d53e0:	2003e67c 	.word	0x2003e67c

000d53e4 <module_user_init_hook>:
{
   d53e4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d53e6:	4c12      	ldr	r4, [pc, #72]	; (d5430 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d53e8:	4812      	ldr	r0, [pc, #72]	; (d5434 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d53ea:	4d13      	ldr	r5, [pc, #76]	; (d5438 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d53ec:	2100      	movs	r1, #0
   d53ee:	f7ff fcd7 	bl	d4da0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d53f2:	6823      	ldr	r3, [r4, #0]
   d53f4:	42ab      	cmp	r3, r5
   d53f6:	4b11      	ldr	r3, [pc, #68]	; (d543c <module_user_init_hook+0x58>)
   d53f8:	bf0c      	ite	eq
   d53fa:	2201      	moveq	r2, #1
   d53fc:	2200      	movne	r2, #0
   d53fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5400:	d002      	beq.n	d5408 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5402:	f7ff ffbb 	bl	d537c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5406:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5408:	f7ff fad6 	bl	d49b8 <HAL_RNG_GetRandomNumber>
   d540c:	4604      	mov	r4, r0
    srand(seed);
   d540e:	f000 ff1d 	bl	d624c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5412:	4b0b      	ldr	r3, [pc, #44]	; (d5440 <module_user_init_hook+0x5c>)
   d5414:	b113      	cbz	r3, d541c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5416:	4620      	mov	r0, r4
   d5418:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d541c:	2100      	movs	r1, #0
   d541e:	4808      	ldr	r0, [pc, #32]	; (d5440 <module_user_init_hook+0x5c>)
   d5420:	f7ff fc86 	bl	d4d30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5428:	4806      	ldr	r0, [pc, #24]	; (d5444 <module_user_init_hook+0x60>)
   d542a:	2100      	movs	r1, #0
   d542c:	f7ff bbfc 	b.w	d4c28 <system_ctrl_set_app_request_handler>
   d5430:	2003f400 	.word	0x2003f400
   d5434:	000d5325 	.word	0x000d5325
   d5438:	9a271c1e 	.word	0x9a271c1e
   d543c:	2003e678 	.word	0x2003e678
   d5440:	00000000 	.word	0x00000000
   d5444:	000d53ad 	.word	0x000d53ad

000d5448 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5448:	4770      	bx	lr

000d544a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d544a:	2000      	movs	r0, #0
   d544c:	4770      	bx	lr

000d544e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d544e:	b510      	push	{r4, lr}
   d5450:	2110      	movs	r1, #16
   d5452:	4604      	mov	r4, r0
   d5454:	f000 fecf 	bl	d61f6 <_ZdlPvj>
   d5458:	4620      	mov	r0, r4
   d545a:	bd10      	pop	{r4, pc}

000d545c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d545c:	b508      	push	{r3, lr}
      { delete this; }
   d545e:	f7ff fff6 	bl	d544e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5462:	bd08      	pop	{r3, pc}

000d5464 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5464:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5466:	2200      	movs	r2, #0
   d5468:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d546c:	6002      	str	r2, [r0, #0]
   d546e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5470:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5472:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5474:	680c      	ldr	r4, [r1, #0]
   d5476:	8085      	strh	r5, [r0, #4]
   d5478:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d547a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d547c:	bd30      	pop	{r4, r5, pc}

000d547e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d547e:	b510      	push	{r4, lr}
   d5480:	4604      	mov	r4, r0
    free((void*)msg_);
   d5482:	6800      	ldr	r0, [r0, #0]
   d5484:	f7ff fc64 	bl	d4d50 <free>
}
   d5488:	4620      	mov	r0, r4
   d548a:	bd10      	pop	{r4, pc}

000d548c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d548c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d548e:	68c4      	ldr	r4, [r0, #12]
   d5490:	b1f4      	cbz	r4, d54d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5492:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5494:	2b02      	cmp	r3, #2
   d5496:	d103      	bne.n	d54a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5498:	f104 000c 	add.w	r0, r4, #12
   d549c:	f7ff ffef 	bl	d547e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d54a0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d54a2:	b135      	cbz	r5, d54b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d54a4:	4628      	mov	r0, r5
   d54a6:	f7ff ff0e 	bl	d52c6 <_ZNSt14_Function_baseD1Ev>
   d54aa:	2110      	movs	r1, #16
   d54ac:	4628      	mov	r0, r5
   d54ae:	f000 fea2 	bl	d61f6 <_ZdlPvj>
   d54b2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d54b4:	b135      	cbz	r5, d54c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d54b6:	4628      	mov	r0, r5
   d54b8:	f7ff ff05 	bl	d52c6 <_ZNSt14_Function_baseD1Ev>
   d54bc:	2110      	movs	r1, #16
   d54be:	4628      	mov	r0, r5
   d54c0:	f000 fe99 	bl	d61f6 <_ZdlPvj>
   d54c4:	4620      	mov	r0, r4
   d54c6:	2114      	movs	r1, #20
   d54c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d54cc:	f000 be93 	b.w	d61f6 <_ZdlPvj>
   d54d0:	bd38      	pop	{r3, r4, r5, pc}

000d54d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d54d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54d4:	460e      	mov	r6, r1
   d54d6:	4604      	mov	r4, r0
   d54d8:	f856 3b04 	ldr.w	r3, [r6], #4
   d54dc:	9300      	str	r3, [sp, #0]
   d54de:	460d      	mov	r5, r1
   d54e0:	a801      	add	r0, sp, #4
   d54e2:	4631      	mov	r1, r6
   d54e4:	f7ff fe14 	bl	d5110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d54e8:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d54ea:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d54ec:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d54ee:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d54f0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d54f2:	2300      	movs	r3, #0
   d54f4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d54f6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d54f8:	f7ff fe11 	bl	d511e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54fc:	4630      	mov	r0, r6
   d54fe:	f7ff fe0e 	bl	d511e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5502:	4628      	mov	r0, r5
   d5504:	2108      	movs	r1, #8
   d5506:	f000 fe76 	bl	d61f6 <_ZdlPvj>
        return p;
    }
   d550a:	4620      	mov	r0, r4
   d550c:	b002      	add	sp, #8
   d550e:	bd70      	pop	{r4, r5, r6, pc}

000d5510 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5510:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5512:	b510      	push	{r4, lr}
      if (_M_empty())
   d5514:	b90a      	cbnz	r2, d551a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5516:	f000 fe72 	bl	d61fe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d551a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d551e:	68c3      	ldr	r3, [r0, #12]
   d5520:	4718      	bx	r3

000d5522 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5522:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5524:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5526:	f100 0110 	add.w	r1, r0, #16
   d552a:	f7ff fff1 	bl	d5510 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d552e:	bd08      	pop	{r3, pc}

000d5530 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5530:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5532:	b510      	push	{r4, lr}
      if (_M_empty())
   d5534:	b90a      	cbnz	r2, d553a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5536:	f000 fe62 	bl	d61fe <_ZSt25__throw_bad_function_callv>
    }
   d553a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d553e:	68c3      	ldr	r3, [r0, #12]
   d5540:	4718      	bx	r3

000d5542 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5542:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5544:	6800      	ldr	r0, [r0, #0]
   d5546:	f100 0110 	add.w	r1, r0, #16
   d554a:	f7ff fff1 	bl	d5530 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d554e:	bd08      	pop	{r3, pc}

000d5550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5550:	b538      	push	{r3, r4, r5, lr}
   d5552:	2300      	movs	r3, #0
   d5554:	4604      	mov	r4, r0
   d5556:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5558:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d555a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d555c:	f7fe fd99 	bl	d4092 <_Znwj>
   d5560:	b128      	cbz	r0, d556e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5562:	2301      	movs	r3, #1
   d5564:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5568:	4b02      	ldr	r3, [pc, #8]	; (d5574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d556a:	6003      	str	r3, [r0, #0]
   d556c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d556e:	6020      	str	r0, [r4, #0]
	}
   d5570:	4620      	mov	r0, r4
   d5572:	bd38      	pop	{r3, r4, r5, pc}
   d5574:	000d63ec 	.word	0x000d63ec

000d5578 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5578:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d557a:	2300      	movs	r3, #0
   d557c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d557e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5580:	4604      	mov	r4, r0
   d5582:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5584:	b12b      	cbz	r3, d5592 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5586:	2202      	movs	r2, #2
   d5588:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d558a:	68eb      	ldr	r3, [r5, #12]
   d558c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d558e:	68ab      	ldr	r3, [r5, #8]
   d5590:	60a3      	str	r3, [r4, #8]
    }
   d5592:	4620      	mov	r0, r4
   d5594:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5598:	b5f0      	push	{r4, r5, r6, r7, lr}
   d559a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d559c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d559e:	4668      	mov	r0, sp
   d55a0:	f7ff ff60 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d55a4:	f04f 0302 	mov.w	r3, #2
   d55a8:	e8d4 2f4f 	ldrexb	r2, [r4]
   d55ac:	2a00      	cmp	r2, #0
   d55ae:	d103      	bne.n	d55b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d55b0:	e8c4 3f41 	strexb	r1, r3, [r4]
   d55b4:	2900      	cmp	r1, #0
   d55b6:	d1f7      	bne.n	d55a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d55b8:	d125      	bne.n	d5606 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d55ba:	f104 050c 	add.w	r5, r4, #12
   d55be:	4669      	mov	r1, sp
   d55c0:	4628      	mov	r0, r5
   d55c2:	f7ff ff4f 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d55c6:	f3bf 8f5b 	dmb	ish
   d55ca:	2301      	movs	r3, #1
   d55cc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d55ce:	2000      	movs	r0, #0
   d55d0:	f104 0308 	add.w	r3, r4, #8
   d55d4:	f3bf 8f5b 	dmb	ish
   d55d8:	e853 6f00 	ldrex	r6, [r3]
   d55dc:	e843 0200 	strex	r2, r0, [r3]
   d55e0:	2a00      	cmp	r2, #0
   d55e2:	d1f9      	bne.n	d55d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d55e4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d55e8:	b16e      	cbz	r6, d5606 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d55ea:	f7ff fb05 	bl	d4bf8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d55ee:	b178      	cbz	r0, d5610 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d55f0:	4629      	mov	r1, r5
   d55f2:	4630      	mov	r0, r6
   d55f4:	f7ff ff8c 	bl	d5510 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d55f8:	4630      	mov	r0, r6
   d55fa:	f7ff fe64 	bl	d52c6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d55fe:	2110      	movs	r1, #16
   d5600:	4630      	mov	r0, r6
   d5602:	f000 fdf8 	bl	d61f6 <_ZdlPvj>
        p_->setError(std::move(error));
   d5606:	4668      	mov	r0, sp
   d5608:	f7ff ff39 	bl	d547e <_ZN8particle5ErrorD1Ev>
    }
   d560c:	b009      	add	sp, #36	; 0x24
   d560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5610:	4631      	mov	r1, r6
   d5612:	a802      	add	r0, sp, #8
   d5614:	f7ff ffb0 	bl	d5578 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5618:	68e0      	ldr	r0, [r4, #12]
   d561a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d561e:	b108      	cbz	r0, d5624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5620:	f000 fe40 	bl	d62a4 <strdup>
        type_(type) {
   d5624:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5626:	2010      	movs	r0, #16
   d5628:	f8ad 501c 	strh.w	r5, [sp, #28]
   d562c:	f7fe fd31 	bl	d4092 <_Znwj>
   d5630:	4605      	mov	r5, r0
   d5632:	b1e8      	cbz	r0, d5670 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5634:	2700      	movs	r7, #0
   d5636:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5638:	2018      	movs	r0, #24
   d563a:	f7fe fd2a 	bl	d4092 <_Znwj>
   d563e:	4604      	mov	r4, r0
   d5640:	b188      	cbz	r0, d5666 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5642:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5644:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5646:	a802      	add	r0, sp, #8
   d5648:	f7ff fe4c 	bl	d52e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d564c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d564e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5650:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5652:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5654:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5656:	a906      	add	r1, sp, #24
   d5658:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d565a:	60e3      	str	r3, [r4, #12]
   d565c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5660:	9205      	str	r2, [sp, #20]
   d5662:	f7ff feff 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5666:	4b08      	ldr	r3, [pc, #32]	; (d5688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5668:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d566a:	4b08      	ldr	r3, [pc, #32]	; (d568c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d566c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d566e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5670:	a806      	add	r0, sp, #24
   d5672:	f7ff ff04 	bl	d547e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5676:	a802      	add	r0, sp, #8
   d5678:	f7ff fe25 	bl	d52c6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d567c:	2200      	movs	r2, #0
   d567e:	4629      	mov	r1, r5
   d5680:	4803      	ldr	r0, [pc, #12]	; (d5690 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5682:	f7ff fac1 	bl	d4c08 <application_thread_invoke>
   d5686:	e7b7      	b.n	d55f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5688:	000d5523 	.word	0x000d5523
   d568c:	000d57b9 	.word	0x000d57b9
   d5690:	000d5c6d 	.word	0x000d5c6d

000d5694 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5698:	b08a      	sub	sp, #40	; 0x28
   d569a:	4605      	mov	r5, r0
   d569c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d56a0:	460c      	mov	r4, r1
   d56a2:	4617      	mov	r7, r2
   d56a4:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d56a6:	f7ff fb2b 	bl	d4d00 <spark_cloud_flag_connected>
   d56aa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d56ac:	4682      	mov	sl, r0
   d56ae:	bb38      	cbnz	r0, d5700 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d56b0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d56b4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d56b6:	a905      	add	r1, sp, #20
   d56b8:	4630      	mov	r0, r6
   d56ba:	f8ad 3018 	strh.w	r3, [sp, #24]
   d56be:	f7ff fed1 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
   d56c2:	2014      	movs	r0, #20
   d56c4:	f7fe fce5 	bl	d4092 <_Znwj>
   d56c8:	4604      	mov	r4, r0
   d56ca:	b148      	cbz	r0, d56e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d56cc:	2302      	movs	r3, #2
   d56ce:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d56d0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d56d2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d56d6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d56d8:	4631      	mov	r1, r6
   d56da:	300c      	adds	r0, #12
   d56dc:	f7ff fec2 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d56e0:	4628      	mov	r0, r5
	: __shared_count(__p)
   d56e2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d56e4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d56e8:	f7ff ff32 	bl	d5550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d56ec:	4630      	mov	r0, r6
   d56ee:	f7ff fec6 	bl	d547e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d56f2:	a805      	add	r0, sp, #20
   d56f4:	f7ff fec3 	bl	d547e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d56f8:	4628      	mov	r0, r5
   d56fa:	b00a      	add	sp, #40	; 0x28
   d56fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5700:	230c      	movs	r3, #12
   d5702:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5706:	2014      	movs	r0, #20
   d5708:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d570c:	9307      	str	r3, [sp, #28]
   d570e:	f7fe fcc0 	bl	d4092 <_Znwj>
   d5712:	4601      	mov	r1, r0
   d5714:	b128      	cbz	r0, d5722 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5716:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d571a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d571e:	f880 a001 	strb.w	sl, [r0, #1]
   d5722:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5724:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5726:	f7ff ff13 	bl	d5550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d572a:	4b22      	ldr	r3, [pc, #136]	; (d57b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d572c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d572e:	2008      	movs	r0, #8
   d5730:	f7fe fcaf 	bl	d4092 <_Znwj>
   d5734:	4682      	mov	sl, r0
   d5736:	b128      	cbz	r0, d5744 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5738:	9b03      	ldr	r3, [sp, #12]
   d573a:	f840 3b04 	str.w	r3, [r0], #4
   d573e:	a904      	add	r1, sp, #16
   d5740:	f7ff fce6 	bl	d5110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5744:	9600      	str	r6, [sp, #0]
   d5746:	fa5f f389 	uxtb.w	r3, r9
   d574a:	4642      	mov	r2, r8
   d574c:	4639      	mov	r1, r7
   d574e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5750:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5754:	f7ff fadc 	bl	d4d10 <spark_send_event>
   d5758:	b9b8      	cbnz	r0, d578a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d575a:	9b03      	ldr	r3, [sp, #12]
   d575c:	785b      	ldrb	r3, [r3, #1]
   d575e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5762:	b993      	cbnz	r3, d578a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5764:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5768:	a905      	add	r1, sp, #20
   d576a:	a803      	add	r0, sp, #12
   d576c:	9205      	str	r2, [sp, #20]
   d576e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5772:	f7ff ff11 	bl	d5598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5776:	a805      	add	r0, sp, #20
   d5778:	f7ff fe81 	bl	d547e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d577c:	a805      	add	r0, sp, #20
   d577e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5780:	f7ff fea7 	bl	d54d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5784:	a806      	add	r0, sp, #24
   d5786:	f7ff fcca 	bl	d511e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d578a:	9b03      	ldr	r3, [sp, #12]
   d578c:	9305      	str	r3, [sp, #20]
   d578e:	a904      	add	r1, sp, #16
   d5790:	a806      	add	r0, sp, #24
   d5792:	f7ff fcbd 	bl	d5110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5796:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5798:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d579a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d579c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d579e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d57a0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d57a2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d57a4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d57a6:	f7ff fcba 	bl	d511e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57aa:	a804      	add	r0, sp, #16
   d57ac:	f7ff fcb7 	bl	d511e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d57b0:	e7a2      	b.n	d56f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d57b2:	bf00      	nop
   d57b4:	000d587d 	.word	0x000d587d

000d57b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d57b8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d57ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57bc:	4605      	mov	r5, r0
	  switch (__op)
   d57be:	d007      	beq.n	d57d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d57c0:	2a03      	cmp	r2, #3
   d57c2:	d018      	beq.n	d57f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d57c4:	2a01      	cmp	r2, #1
   d57c6:	d101      	bne.n	d57cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d57c8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d57ca:	6003      	str	r3, [r0, #0]
	}
   d57cc:	2000      	movs	r0, #0
   d57ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d57d0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d57d2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d57d4:	f7fe fc5d 	bl	d4092 <_Znwj>
   d57d8:	4604      	mov	r4, r0
   d57da:	b150      	cbz	r0, d57f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d57dc:	4631      	mov	r1, r6
   d57de:	f7ff fecb 	bl	d5578 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d57e2:	6930      	ldr	r0, [r6, #16]
   d57e4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d57e8:	b108      	cbz	r0, d57ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d57ea:	f000 fd5b 	bl	d62a4 <strdup>
        type_(type) {
   d57ee:	6120      	str	r0, [r4, #16]
   d57f0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d57f2:	602c      	str	r4, [r5, #0]
	}
   d57f4:	e7ea      	b.n	d57cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d57f6:	6804      	ldr	r4, [r0, #0]
   d57f8:	2c00      	cmp	r4, #0
   d57fa:	d0e7      	beq.n	d57cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d57fc:	f104 0010 	add.w	r0, r4, #16
   d5800:	f7ff fe3d 	bl	d547e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5804:	4620      	mov	r0, r4
   d5806:	f7ff fd5e 	bl	d52c6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d580a:	2118      	movs	r1, #24
   d580c:	4620      	mov	r0, r4
   d580e:	f000 fcf2 	bl	d61f6 <_ZdlPvj>
   d5812:	e7db      	b.n	d57cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5814 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5814:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5816:	2300      	movs	r3, #0
   d5818:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d581a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d581c:	4604      	mov	r4, r0
   d581e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5820:	b12b      	cbz	r3, d582e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5822:	2202      	movs	r2, #2
   d5824:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5826:	68eb      	ldr	r3, [r5, #12]
   d5828:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d582a:	68ab      	ldr	r3, [r5, #8]
   d582c:	60a3      	str	r3, [r4, #8]
    }
   d582e:	4620      	mov	r0, r4
   d5830:	bd38      	pop	{r3, r4, r5, pc}

000d5832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5832:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5834:	b570      	push	{r4, r5, r6, lr}
   d5836:	4604      	mov	r4, r0
	  switch (__op)
   d5838:	d007      	beq.n	d584a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d583a:	2a03      	cmp	r2, #3
   d583c:	d012      	beq.n	d5864 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d583e:	2a01      	cmp	r2, #1
   d5840:	d101      	bne.n	d5846 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5842:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5844:	6003      	str	r3, [r0, #0]
	}
   d5846:	2000      	movs	r0, #0
   d5848:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d584a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d584c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d584e:	f7fe fc20 	bl	d4092 <_Znwj>
   d5852:	4605      	mov	r5, r0
   d5854:	b120      	cbz	r0, d5860 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5856:	4631      	mov	r1, r6
   d5858:	f7ff ffdc 	bl	d5814 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d585c:	7c33      	ldrb	r3, [r6, #16]
   d585e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5860:	6025      	str	r5, [r4, #0]
	}
   d5862:	e7f0      	b.n	d5846 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5864:	6804      	ldr	r4, [r0, #0]
   d5866:	2c00      	cmp	r4, #0
   d5868:	d0ed      	beq.n	d5846 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d586a:	4620      	mov	r0, r4
   d586c:	f7ff fd2b 	bl	d52c6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5870:	2114      	movs	r1, #20
   d5872:	4620      	mov	r0, r4
   d5874:	f000 fcbf 	bl	d61f6 <_ZdlPvj>
   d5878:	e7e5      	b.n	d5846 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d587c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d587c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d587e:	b089      	sub	sp, #36	; 0x24
   d5880:	4604      	mov	r4, r0
   d5882:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5884:	a801      	add	r0, sp, #4
   d5886:	4611      	mov	r1, r2
   d5888:	f7ff fe23 	bl	d54d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d588c:	b1a4      	cbz	r4, d58b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d588e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5890:	b11d      	cbz	r5, d589a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5892:	4628      	mov	r0, r5
   d5894:	f000 fd06 	bl	d62a4 <strdup>
   d5898:	4605      	mov	r5, r0
   d589a:	a801      	add	r0, sp, #4
   d589c:	a903      	add	r1, sp, #12
        type_(type) {
   d589e:	9503      	str	r5, [sp, #12]
   d58a0:	f8ad 4010 	strh.w	r4, [sp, #16]
   d58a4:	f7ff fe78 	bl	d5598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d58a8:	a803      	add	r0, sp, #12
   d58aa:	f7ff fde8 	bl	d547e <_ZN8particle5ErrorD1Ev>
   d58ae:	a802      	add	r0, sp, #8
   d58b0:	f7ff fc35 	bl	d511e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d58b4:	b009      	add	sp, #36	; 0x24
   d58b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d58b8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d58ba:	2301      	movs	r3, #1
   d58bc:	e8d5 2f4f 	ldrexb	r2, [r5]
   d58c0:	2a00      	cmp	r2, #0
   d58c2:	d103      	bne.n	d58cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d58c4:	e8c5 3f41 	strexb	r1, r3, [r5]
   d58c8:	2900      	cmp	r1, #0
   d58ca:	d1f7      	bne.n	d58bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d58cc:	d1ef      	bne.n	d58ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d58ce:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d58d0:	f3bf 8f5b 	dmb	ish
   d58d4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d58d6:	1d2b      	adds	r3, r5, #4
   d58d8:	f3bf 8f5b 	dmb	ish
   d58dc:	e853 6f00 	ldrex	r6, [r3]
   d58e0:	e843 4200 	strex	r2, r4, [r3]
   d58e4:	2a00      	cmp	r2, #0
   d58e6:	d1f9      	bne.n	d58dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d58e8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d58ec:	2e00      	cmp	r6, #0
   d58ee:	d0de      	beq.n	d58ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d58f0:	4620      	mov	r0, r4
   d58f2:	f7ff f981 	bl	d4bf8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d58f6:	4607      	mov	r7, r0
   d58f8:	b160      	cbz	r0, d5914 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d58fa:	f105 010c 	add.w	r1, r5, #12
   d58fe:	4630      	mov	r0, r6
   d5900:	f7ff fe16 	bl	d5530 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5904:	4630      	mov	r0, r6
   d5906:	f7ff fcde 	bl	d52c6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d590a:	2110      	movs	r1, #16
   d590c:	4630      	mov	r0, r6
   d590e:	f000 fc72 	bl	d61f6 <_ZdlPvj>
   d5912:	e7cc      	b.n	d58ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5914:	4631      	mov	r1, r6
   d5916:	a803      	add	r0, sp, #12
   d5918:	f7ff ff7c 	bl	d5814 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d591c:	7b2b      	ldrb	r3, [r5, #12]
   d591e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5922:	2010      	movs	r0, #16
   d5924:	f7fe fbb5 	bl	d4092 <_Znwj>
   d5928:	4605      	mov	r5, r0
   d592a:	b1d0      	cbz	r0, d5962 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d592c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d592e:	2014      	movs	r0, #20
   d5930:	f7fe fbaf 	bl	d4092 <_Znwj>
   d5934:	4604      	mov	r4, r0
   d5936:	b178      	cbz	r0, d5958 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5938:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d593a:	4601      	mov	r1, r0
   d593c:	a803      	add	r0, sp, #12
   d593e:	f7ff fcd1 	bl	d52e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5942:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5944:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5946:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5948:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d594a:	9205      	str	r2, [sp, #20]
   d594c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d594e:	60e3      	str	r3, [r4, #12]
   d5950:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5954:	9206      	str	r2, [sp, #24]
   d5956:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5958:	4b06      	ldr	r3, [pc, #24]	; (d5974 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d595a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d595c:	4b06      	ldr	r3, [pc, #24]	; (d5978 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d595e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5960:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5962:	a803      	add	r0, sp, #12
   d5964:	f7ff fcaf 	bl	d52c6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5968:	2200      	movs	r2, #0
   d596a:	4629      	mov	r1, r5
   d596c:	4803      	ldr	r0, [pc, #12]	; (d597c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d596e:	f7ff f94b 	bl	d4c08 <application_thread_invoke>
   d5972:	e7c7      	b.n	d5904 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5974:	000d5543 	.word	0x000d5543
   d5978:	000d5833 	.word	0x000d5833
   d597c:	000d5c6d 	.word	0x000d5c6d

000d5980 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5980:	4770      	bx	lr

000d5982 <_ZN9IPAddressD0Ev>:
   d5982:	b510      	push	{r4, lr}
   d5984:	2118      	movs	r1, #24
   d5986:	4604      	mov	r4, r0
   d5988:	f000 fc35 	bl	d61f6 <_ZdlPvj>
   d598c:	4620      	mov	r0, r4
   d598e:	bd10      	pop	{r4, pc}

000d5990 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5990:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5992:	7d03      	ldrb	r3, [r0, #20]
   d5994:	2b06      	cmp	r3, #6
{
   d5996:	b08d      	sub	sp, #52	; 0x34
   d5998:	460e      	mov	r6, r1
   d599a:	f100 0704 	add.w	r7, r0, #4
   d599e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d59a2:	d012      	beq.n	d59ca <_ZNK9IPAddress7printToER5Print+0x3a>
   d59a4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d59a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d59ac:	220a      	movs	r2, #10
   d59ae:	4630      	mov	r0, r6
   d59b0:	f7ff fc1b 	bl	d51ea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d59b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d59b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d59b8:	d019      	beq.n	d59ee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d59ba:	2c00      	cmp	r4, #0
   d59bc:	d0f4      	beq.n	d59a8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d59be:	212e      	movs	r1, #46	; 0x2e
   d59c0:	4630      	mov	r0, r6
   d59c2:	f7ff fbf9 	bl	d51b8 <_ZN5Print5printEc>
   d59c6:	4404      	add	r4, r0
   d59c8:	e7ee      	b.n	d59a8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59ca:	232f      	movs	r3, #47	; 0x2f
   d59cc:	466a      	mov	r2, sp
   d59ce:	4639      	mov	r1, r7
   d59d0:	200a      	movs	r0, #10
		buf[0] = 0;
   d59d2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59d6:	f7ff f82f 	bl	d4a38 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d59da:	4668      	mov	r0, sp
   d59dc:	f000 fc7f 	bl	d62de <strlen>
   d59e0:	6833      	ldr	r3, [r6, #0]
   d59e2:	4602      	mov	r2, r0
   d59e4:	68db      	ldr	r3, [r3, #12]
   d59e6:	4669      	mov	r1, sp
   d59e8:	4630      	mov	r0, r6
   d59ea:	4798      	blx	r3
   d59ec:	4604      	mov	r4, r0
    }
    return n;
}
   d59ee:	4620      	mov	r0, r4
   d59f0:	b00d      	add	sp, #52	; 0x34
   d59f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59f4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d59f4:	b510      	push	{r4, lr}
   d59f6:	4b05      	ldr	r3, [pc, #20]	; (d5a0c <_ZN9IPAddressC1Ev+0x18>)
   d59f8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d59fa:	2211      	movs	r2, #17
   d59fc:	f840 3b04 	str.w	r3, [r0], #4
   d5a00:	2100      	movs	r1, #0
   d5a02:	f000 fc1b 	bl	d623c <memset>
}
   d5a06:	4620      	mov	r0, r4
   d5a08:	bd10      	pop	{r4, pc}
   d5a0a:	bf00      	nop
   d5a0c:	000d6408 	.word	0x000d6408

000d5a10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5a10:	4603      	mov	r3, r0
   d5a12:	4a07      	ldr	r2, [pc, #28]	; (d5a30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5a14:	b510      	push	{r4, lr}
   d5a16:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5a1a:	f101 0210 	add.w	r2, r1, #16
   d5a1e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a22:	f843 4b04 	str.w	r4, [r3], #4
   d5a26:	4291      	cmp	r1, r2
   d5a28:	d1f9      	bne.n	d5a1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5a2a:	780a      	ldrb	r2, [r1, #0]
   d5a2c:	701a      	strb	r2, [r3, #0]
}
   d5a2e:	bd10      	pop	{r4, pc}
   d5a30:	000d6408 	.word	0x000d6408

000d5a34 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5a34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5a36:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5a3a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5a3e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5a42:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5a46:	2304      	movs	r3, #4
   d5a48:	6041      	str	r1, [r0, #4]
   d5a4a:	7503      	strb	r3, [r0, #20]
}
   d5a4c:	bd10      	pop	{r4, pc}

000d5a4e <_ZN9IPAddressaSEPKh>:
{
   d5a4e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5a50:	78cb      	ldrb	r3, [r1, #3]
   d5a52:	9300      	str	r3, [sp, #0]
   d5a54:	788b      	ldrb	r3, [r1, #2]
   d5a56:	784a      	ldrb	r2, [r1, #1]
   d5a58:	7809      	ldrb	r1, [r1, #0]
   d5a5a:	f7ff ffeb 	bl	d5a34 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5a5e:	b002      	add	sp, #8
   d5a60:	bd10      	pop	{r4, pc}

000d5a62 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a62:	7441      	strb	r1, [r0, #17]
}
   d5a64:	4770      	bx	lr

000d5a66 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5a66:	4770      	bx	lr

000d5a68 <_ZN9USBSerial4readEv>:
{
   d5a68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5a6a:	2100      	movs	r1, #0
   d5a6c:	7c00      	ldrb	r0, [r0, #16]
   d5a6e:	f7ff f893 	bl	d4b98 <HAL_USB_USART_Receive_Data>
}
   d5a72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a76:	bd08      	pop	{r3, pc}

000d5a78 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5a78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5a7a:	2101      	movs	r1, #1
   d5a7c:	7c00      	ldrb	r0, [r0, #16]
   d5a7e:	f7ff f88b 	bl	d4b98 <HAL_USB_USART_Receive_Data>
}
   d5a82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a86:	bd08      	pop	{r3, pc}

000d5a88 <_ZN9USBSerial17availableForWriteEv>:
{
   d5a88:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5a8a:	7c00      	ldrb	r0, [r0, #16]
   d5a8c:	f7ff f87c 	bl	d4b88 <HAL_USB_USART_Available_Data_For_Write>
}
   d5a90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a94:	bd08      	pop	{r3, pc}

000d5a96 <_ZN9USBSerial9availableEv>:
{
   d5a96:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5a98:	7c00      	ldrb	r0, [r0, #16]
   d5a9a:	f7ff f86d 	bl	d4b78 <HAL_USB_USART_Available_Data>
}
   d5a9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5aa2:	bd08      	pop	{r3, pc}

000d5aa4 <_ZN9USBSerial5writeEh>:
{
   d5aa4:	b513      	push	{r0, r1, r4, lr}
   d5aa6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5aa8:	7c00      	ldrb	r0, [r0, #16]
{
   d5aaa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5aac:	f7ff f86c 	bl	d4b88 <HAL_USB_USART_Available_Data_For_Write>
   d5ab0:	2800      	cmp	r0, #0
   d5ab2:	9901      	ldr	r1, [sp, #4]
   d5ab4:	dc01      	bgt.n	d5aba <_ZN9USBSerial5writeEh+0x16>
   d5ab6:	7c60      	ldrb	r0, [r4, #17]
   d5ab8:	b120      	cbz	r0, d5ac4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5aba:	7c20      	ldrb	r0, [r4, #16]
   d5abc:	f7ff f874 	bl	d4ba8 <HAL_USB_USART_Send_Data>
   d5ac0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5ac4:	b002      	add	sp, #8
   d5ac6:	bd10      	pop	{r4, pc}

000d5ac8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5ac8:	7c00      	ldrb	r0, [r0, #16]
   d5aca:	f7ff b875 	b.w	d4bb8 <HAL_USB_USART_Flush_Data>

000d5ace <_ZN9USBSerialD0Ev>:
   d5ace:	b510      	push	{r4, lr}
   d5ad0:	2114      	movs	r1, #20
   d5ad2:	4604      	mov	r4, r0
   d5ad4:	f000 fb8f 	bl	d61f6 <_ZdlPvj>
   d5ad8:	4620      	mov	r0, r4
   d5ada:	bd10      	pop	{r4, pc}

000d5adc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5adc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ae2:	4604      	mov	r4, r0
   d5ae4:	4608      	mov	r0, r1
   d5ae6:	2100      	movs	r1, #0
   d5ae8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5aec:	4b04      	ldr	r3, [pc, #16]	; (d5b00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5aee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5af0:	2301      	movs	r3, #1
  _serial = serial;
   d5af2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5af4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5af6:	4611      	mov	r1, r2
   d5af8:	f7ff f82e 	bl	d4b58 <HAL_USB_USART_Init>
}
   d5afc:	4620      	mov	r0, r4
   d5afe:	bd10      	pop	{r4, pc}
   d5b00:	000d641c 	.word	0x000d641c

000d5b04 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5b04:	7c00      	ldrb	r0, [r0, #16]
   d5b06:	2200      	movs	r2, #0
   d5b08:	f7ff b82e 	b.w	d4b68 <HAL_USB_USART_Begin>

000d5b0c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5b0c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5b0e:	2214      	movs	r2, #20
{
   d5b10:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5b12:	2100      	movs	r1, #0
   d5b14:	f000 fb92 	bl	d623c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5b18:	4620      	mov	r0, r4
   d5b1a:	bd10      	pop	{r4, pc}

000d5b1c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5b1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b1e:	4c10      	ldr	r4, [pc, #64]	; (d5b60 <_Z16_fetch_usbserialv+0x44>)
{
   d5b20:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5b22:	a803      	add	r0, sp, #12
   d5b24:	f7ff fff2 	bl	d5b0c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b28:	7821      	ldrb	r1, [r4, #0]
   d5b2a:	f3bf 8f5b 	dmb	ish
   d5b2e:	f011 0101 	ands.w	r1, r1, #1
   d5b32:	d111      	bne.n	d5b58 <_Z16_fetch_usbserialv+0x3c>
   d5b34:	4620      	mov	r0, r4
   d5b36:	9101      	str	r1, [sp, #4]
   d5b38:	f7fe fab1 	bl	d409e <__cxa_guard_acquire>
   d5b3c:	9901      	ldr	r1, [sp, #4]
   d5b3e:	b158      	cbz	r0, d5b58 <_Z16_fetch_usbserialv+0x3c>
   d5b40:	aa03      	add	r2, sp, #12
   d5b42:	4808      	ldr	r0, [pc, #32]	; (d5b64 <_Z16_fetch_usbserialv+0x48>)
   d5b44:	f7ff ffca 	bl	d5adc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5b48:	4620      	mov	r0, r4
   d5b4a:	f7fe faad 	bl	d40a8 <__cxa_guard_release>
   d5b4e:	4a06      	ldr	r2, [pc, #24]	; (d5b68 <_Z16_fetch_usbserialv+0x4c>)
   d5b50:	4906      	ldr	r1, [pc, #24]	; (d5b6c <_Z16_fetch_usbserialv+0x50>)
   d5b52:	4804      	ldr	r0, [pc, #16]	; (d5b64 <_Z16_fetch_usbserialv+0x48>)
   d5b54:	f000 fb4a 	bl	d61ec <__aeabi_atexit>
	return _usbserial;
}
   d5b58:	4802      	ldr	r0, [pc, #8]	; (d5b64 <_Z16_fetch_usbserialv+0x48>)
   d5b5a:	b008      	add	sp, #32
   d5b5c:	bd10      	pop	{r4, pc}
   d5b5e:	bf00      	nop
   d5b60:	2003e680 	.word	0x2003e680
   d5b64:	2003e684 	.word	0x2003e684
   d5b68:	2003e5dc 	.word	0x2003e5dc
   d5b6c:	000d5a67 	.word	0x000d5a67

000d5b70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5b70:	4770      	bx	lr

000d5b72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b72:	7441      	strb	r1, [r0, #17]
}
   d5b74:	4770      	bx	lr

000d5b76 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5b76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5b78:	7c00      	ldrb	r0, [r0, #16]
   d5b7a:	f7fe ff9d 	bl	d4ab8 <hal_usart_available_data_for_write>
}
   d5b7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b82:	bd08      	pop	{r3, pc}

000d5b84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5b84:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5b86:	7c00      	ldrb	r0, [r0, #16]
   d5b88:	f7fe ff6e 	bl	d4a68 <hal_usart_available>
}
   d5b8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b90:	bd08      	pop	{r3, pc}

000d5b92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5b92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5b94:	7c00      	ldrb	r0, [r0, #16]
   d5b96:	f7fe ff77 	bl	d4a88 <hal_usart_peek>
}
   d5b9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b9e:	bd08      	pop	{r3, pc}

000d5ba0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ba0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5ba2:	7c00      	ldrb	r0, [r0, #16]
   d5ba4:	f7fe ff68 	bl	d4a78 <hal_usart_read>
}
   d5ba8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5bac:	bd08      	pop	{r3, pc}

000d5bae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5bae:	7c00      	ldrb	r0, [r0, #16]
   d5bb0:	f7fe bf72 	b.w	d4a98 <hal_usart_flush>

000d5bb4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5bb6:	7c45      	ldrb	r5, [r0, #17]
{
   d5bb8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5bba:	b12d      	cbz	r5, d5bc8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5bbc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5bbe:	b003      	add	sp, #12
   d5bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5bc4:	f7fe bf48 	b.w	d4a58 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5bc8:	7c00      	ldrb	r0, [r0, #16]
   d5bca:	9101      	str	r1, [sp, #4]
   d5bcc:	f7fe ff74 	bl	d4ab8 <hal_usart_available_data_for_write>
   d5bd0:	2800      	cmp	r0, #0
   d5bd2:	9901      	ldr	r1, [sp, #4]
   d5bd4:	dcf2      	bgt.n	d5bbc <_ZN11USARTSerial5writeEh+0x8>
}
   d5bd6:	4628      	mov	r0, r5
   d5bd8:	b003      	add	sp, #12
   d5bda:	bd30      	pop	{r4, r5, pc}

000d5bdc <_ZN11USARTSerialD0Ev>:
   d5bdc:	b510      	push	{r4, lr}
   d5bde:	2114      	movs	r1, #20
   d5be0:	4604      	mov	r4, r0
   d5be2:	f000 fb08 	bl	d61f6 <_ZdlPvj>
   d5be6:	4620      	mov	r0, r4
   d5be8:	bd10      	pop	{r4, pc}
	...

000d5bec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5bec:	b510      	push	{r4, lr}
   d5bee:	f04f 0c00 	mov.w	ip, #0
   d5bf2:	4604      	mov	r4, r0
   d5bf4:	4608      	mov	r0, r1
   d5bf6:	4611      	mov	r1, r2
   d5bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5bfc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5c00:	4a04      	ldr	r2, [pc, #16]	; (d5c14 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5c02:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5c04:	2201      	movs	r2, #1
  _serial = serial;
   d5c06:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5c08:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5c0a:	461a      	mov	r2, r3
   d5c0c:	f7fe ff1c 	bl	d4a48 <hal_usart_init>
}
   d5c10:	4620      	mov	r0, r4
   d5c12:	bd10      	pop	{r4, pc}
   d5c14:	000d644c 	.word	0x000d644c

000d5c18 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5c18:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5c1a:	4c0e      	ldr	r4, [pc, #56]	; (d5c54 <_Z22__fetch_global_Serial1v+0x3c>)
   d5c1c:	7821      	ldrb	r1, [r4, #0]
   d5c1e:	f3bf 8f5b 	dmb	ish
   d5c22:	f011 0101 	ands.w	r1, r1, #1
   d5c26:	d112      	bne.n	d5c4e <_Z22__fetch_global_Serial1v+0x36>
   d5c28:	4620      	mov	r0, r4
   d5c2a:	9101      	str	r1, [sp, #4]
   d5c2c:	f7fe fa37 	bl	d409e <__cxa_guard_acquire>
   d5c30:	9901      	ldr	r1, [sp, #4]
   d5c32:	b160      	cbz	r0, d5c4e <_Z22__fetch_global_Serial1v+0x36>
   d5c34:	4a08      	ldr	r2, [pc, #32]	; (d5c58 <_Z22__fetch_global_Serial1v+0x40>)
   d5c36:	4b09      	ldr	r3, [pc, #36]	; (d5c5c <_Z22__fetch_global_Serial1v+0x44>)
   d5c38:	4809      	ldr	r0, [pc, #36]	; (d5c60 <_Z22__fetch_global_Serial1v+0x48>)
   d5c3a:	f7ff ffd7 	bl	d5bec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5c3e:	4620      	mov	r0, r4
   d5c40:	f7fe fa32 	bl	d40a8 <__cxa_guard_release>
   d5c44:	4a07      	ldr	r2, [pc, #28]	; (d5c64 <_Z22__fetch_global_Serial1v+0x4c>)
   d5c46:	4908      	ldr	r1, [pc, #32]	; (d5c68 <_Z22__fetch_global_Serial1v+0x50>)
   d5c48:	4805      	ldr	r0, [pc, #20]	; (d5c60 <_Z22__fetch_global_Serial1v+0x48>)
   d5c4a:	f000 facf 	bl	d61ec <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c4e:	4804      	ldr	r0, [pc, #16]	; (d5c60 <_Z22__fetch_global_Serial1v+0x48>)
   d5c50:	b002      	add	sp, #8
   d5c52:	bd10      	pop	{r4, pc}
   d5c54:	2003e698 	.word	0x2003e698
   d5c58:	2003e69c 	.word	0x2003e69c
   d5c5c:	2003e720 	.word	0x2003e720
   d5c60:	2003e7a4 	.word	0x2003e7a4
   d5c64:	2003e5dc 	.word	0x2003e5dc
   d5c68:	000d5b71 	.word	0x000d5b71

000d5c6c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5c6c:	b510      	push	{r4, lr}
      if (_M_empty())
   d5c6e:	6883      	ldr	r3, [r0, #8]
   d5c70:	4604      	mov	r4, r0
   d5c72:	b90b      	cbnz	r3, d5c78 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5c74:	f000 fac3 	bl	d61fe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5c78:	68c3      	ldr	r3, [r0, #12]
   d5c7a:	4798      	blx	r3
      if (_M_manager)
   d5c7c:	68a3      	ldr	r3, [r4, #8]
   d5c7e:	b11b      	cbz	r3, d5c88 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c80:	2203      	movs	r2, #3
   d5c82:	4621      	mov	r1, r4
   d5c84:	4620      	mov	r0, r4
   d5c86:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5c88:	4620      	mov	r0, r4
   d5c8a:	2110      	movs	r1, #16
}
   d5c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5c90:	f000 bab1 	b.w	d61f6 <_ZdlPvj>

000d5c94 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5c94:	4770      	bx	lr

000d5c96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c98:	4606      	mov	r6, r0
   d5c9a:	4615      	mov	r5, r2
   d5c9c:	460c      	mov	r4, r1
   d5c9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ca0:	42bc      	cmp	r4, r7
   d5ca2:	d006      	beq.n	d5cb2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5ca4:	6833      	ldr	r3, [r6, #0]
   d5ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5caa:	689b      	ldr	r3, [r3, #8]
   d5cac:	4630      	mov	r0, r6
   d5cae:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5cb0:	e7f6      	b.n	d5ca0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5cb2:	4628      	mov	r0, r5
   d5cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cb6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5cb6:	7c00      	ldrb	r0, [r0, #16]
   d5cb8:	2200      	movs	r2, #0
   d5cba:	f7fe bf05 	b.w	d4ac8 <hal_i2c_write>

000d5cbe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5cbe:	7c00      	ldrb	r0, [r0, #16]
   d5cc0:	2100      	movs	r1, #0
   d5cc2:	f7fe bf09 	b.w	d4ad8 <hal_i2c_available>

000d5cc6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5cc6:	7c00      	ldrb	r0, [r0, #16]
   d5cc8:	2100      	movs	r1, #0
   d5cca:	f7fe bf0d 	b.w	d4ae8 <hal_i2c_read>

000d5cce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5cce:	7c00      	ldrb	r0, [r0, #16]
   d5cd0:	2100      	movs	r1, #0
   d5cd2:	f7fe bf11 	b.w	d4af8 <hal_i2c_peek>

000d5cd6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5cd6:	7c00      	ldrb	r0, [r0, #16]
   d5cd8:	2100      	movs	r1, #0
   d5cda:	f7fe bf15 	b.w	d4b08 <hal_i2c_flush>

000d5cde <_ZN7TwoWireD0Ev>:
   d5cde:	b510      	push	{r4, lr}
   d5ce0:	2114      	movs	r1, #20
   d5ce2:	4604      	mov	r4, r0
   d5ce4:	f000 fa87 	bl	d61f6 <_ZdlPvj>
   d5ce8:	4620      	mov	r0, r4
   d5cea:	bd10      	pop	{r4, pc}

000d5cec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5cec:	b510      	push	{r4, lr}
   d5cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5cf2:	4604      	mov	r4, r0
   d5cf4:	4608      	mov	r0, r1
   d5cf6:	2100      	movs	r1, #0
   d5cf8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5cfc:	4b03      	ldr	r3, [pc, #12]	; (d5d0c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5cfe:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5d00:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5d02:	4611      	mov	r1, r2
   d5d04:	f7fe ff10 	bl	d4b28 <hal_i2c_init>
}
   d5d08:	4620      	mov	r0, r4
   d5d0a:	bd10      	pop	{r4, pc}
   d5d0c:	000d647c 	.word	0x000d647c

000d5d10 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5d10:	2200      	movs	r2, #0
   d5d12:	6840      	ldr	r0, [r0, #4]
   d5d14:	4611      	mov	r1, r2
   d5d16:	f7fe bfb3 	b.w	d4c80 <network_ready>

000d5d1a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d1a:	2200      	movs	r2, #0
   d5d1c:	6840      	ldr	r0, [r0, #4]
   d5d1e:	4611      	mov	r1, r2
   d5d20:	f7fe bfce 	b.w	d4cc0 <network_listening>

000d5d24 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5d24:	2200      	movs	r2, #0
   d5d26:	6840      	ldr	r0, [r0, #4]
   d5d28:	4611      	mov	r1, r2
   d5d2a:	f7fe bfd9 	b.w	d4ce0 <network_get_listen_timeout>

000d5d2e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5d2e:	6840      	ldr	r0, [r0, #4]
   d5d30:	2200      	movs	r2, #0
   d5d32:	f7fe bfcd 	b.w	d4cd0 <network_set_listen_timeout>

000d5d36 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d36:	6840      	ldr	r0, [r0, #4]
   d5d38:	2200      	movs	r2, #0
   d5d3a:	f081 0101 	eor.w	r1, r1, #1
   d5d3e:	f7fe bfb7 	b.w	d4cb0 <network_listen>

000d5d42 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d42:	2300      	movs	r3, #0
   d5d44:	6840      	ldr	r0, [r0, #4]
   d5d46:	461a      	mov	r2, r3
   d5d48:	4619      	mov	r1, r3
   d5d4a:	f7fe bfa9 	b.w	d4ca0 <network_off>

000d5d4e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5d4e:	2300      	movs	r3, #0
   d5d50:	6840      	ldr	r0, [r0, #4]
   d5d52:	461a      	mov	r2, r3
   d5d54:	4619      	mov	r1, r3
   d5d56:	f7fe bf9b 	b.w	d4c90 <network_on>

000d5d5a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d5a:	2200      	movs	r2, #0
   d5d5c:	6840      	ldr	r0, [r0, #4]
   d5d5e:	4611      	mov	r1, r2
   d5d60:	f7fe bf7e 	b.w	d4c60 <network_connecting>

000d5d64 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d64:	6840      	ldr	r0, [r0, #4]
   d5d66:	2200      	movs	r2, #0
   d5d68:	2102      	movs	r1, #2
   d5d6a:	f7fe bf81 	b.w	d4c70 <network_disconnect>

000d5d6e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d6e:	2300      	movs	r3, #0
   d5d70:	6840      	ldr	r0, [r0, #4]
   d5d72:	461a      	mov	r2, r3
   d5d74:	f7fe bf6c 	b.w	d4c50 <network_connect>

000d5d78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5d78:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5d7a:	2204      	movs	r2, #4
   d5d7c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5d7e:	4a02      	ldr	r2, [pc, #8]	; (d5d88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5d80:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5d82:	4770      	bx	lr
   d5d84:	2003e7b8 	.word	0x2003e7b8
   d5d88:	000d64a4 	.word	0x000d64a4

000d5d8c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d8c:	2300      	movs	r3, #0
   d5d8e:	6840      	ldr	r0, [r0, #4]
   d5d90:	461a      	mov	r2, r3
   d5d92:	f7fe bf5d 	b.w	d4c50 <network_connect>

000d5d96 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5d96:	6840      	ldr	r0, [r0, #4]
   d5d98:	2200      	movs	r2, #0
   d5d9a:	2102      	movs	r1, #2
   d5d9c:	f7fe bf68 	b.w	d4c70 <network_disconnect>

000d5da0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5da0:	2200      	movs	r2, #0
   d5da2:	6840      	ldr	r0, [r0, #4]
   d5da4:	4611      	mov	r1, r2
   d5da6:	f7fe bf5b 	b.w	d4c60 <network_connecting>

000d5daa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5daa:	2200      	movs	r2, #0
   d5dac:	6840      	ldr	r0, [r0, #4]
   d5dae:	4611      	mov	r1, r2
   d5db0:	f7fe bf66 	b.w	d4c80 <network_ready>

000d5db4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5db4:	2300      	movs	r3, #0
   d5db6:	6840      	ldr	r0, [r0, #4]
   d5db8:	461a      	mov	r2, r3
   d5dba:	4619      	mov	r1, r3
   d5dbc:	f7fe bf68 	b.w	d4c90 <network_on>

000d5dc0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5dc0:	2300      	movs	r3, #0
   d5dc2:	6840      	ldr	r0, [r0, #4]
   d5dc4:	461a      	mov	r2, r3
   d5dc6:	4619      	mov	r1, r3
   d5dc8:	f7fe bf6a 	b.w	d4ca0 <network_off>

000d5dcc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5dcc:	6840      	ldr	r0, [r0, #4]
   d5dce:	2200      	movs	r2, #0
   d5dd0:	f081 0101 	eor.w	r1, r1, #1
   d5dd4:	f7fe bf6c 	b.w	d4cb0 <network_listen>

000d5dd8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5dd8:	6840      	ldr	r0, [r0, #4]
   d5dda:	2200      	movs	r2, #0
   d5ddc:	f7fe bf78 	b.w	d4cd0 <network_set_listen_timeout>

000d5de0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5de0:	2200      	movs	r2, #0
   d5de2:	6840      	ldr	r0, [r0, #4]
   d5de4:	4611      	mov	r1, r2
   d5de6:	f7fe bf7b 	b.w	d4ce0 <network_get_listen_timeout>

000d5dea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5dea:	2200      	movs	r2, #0
   d5dec:	6840      	ldr	r0, [r0, #4]
   d5dee:	4611      	mov	r1, r2
   d5df0:	f7fe bf66 	b.w	d4cc0 <network_listening>

000d5df4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5df8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5dfa:	b095      	sub	sp, #84	; 0x54
   d5dfc:	4616      	mov	r6, r2
   d5dfe:	460d      	mov	r5, r1
   d5e00:	4607      	mov	r7, r0
    IPAddress addr;
   d5e02:	f7ff fdf7 	bl	d59f4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5e06:	4621      	mov	r1, r4
   d5e08:	2218      	movs	r2, #24
   d5e0a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5e0c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e0e:	f000 fa15 	bl	d623c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e12:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5e14:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e18:	4621      	mov	r1, r4
   d5e1a:	466b      	mov	r3, sp
   d5e1c:	aa0c      	add	r2, sp, #48	; 0x30
   d5e1e:	4630      	mov	r0, r6
   d5e20:	f7fe fd9a 	bl	d4958 <netdb_getaddrinfo>
    if (!r) {
   d5e24:	4604      	mov	r4, r0
   d5e26:	2800      	cmp	r0, #0
   d5e28:	d146      	bne.n	d5eb8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e2a:	4602      	mov	r2, r0
   d5e2c:	2101      	movs	r1, #1
   d5e2e:	6868      	ldr	r0, [r5, #4]
   d5e30:	f7fe ff26 	bl	d4c80 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e34:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e36:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e38:	4622      	mov	r2, r4
   d5e3a:	6868      	ldr	r0, [r5, #4]
   d5e3c:	f7fe ff20 	bl	d4c80 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e40:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e42:	4681      	mov	r9, r0
        bool ok = false;
   d5e44:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e46:	2e00      	cmp	r6, #0
   d5e48:	d036      	beq.n	d5eb8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5e4a:	2900      	cmp	r1, #0
   d5e4c:	d134      	bne.n	d5eb8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e4e:	6873      	ldr	r3, [r6, #4]
   d5e50:	2b02      	cmp	r3, #2
   d5e52:	d003      	beq.n	d5e5c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5e54:	2b0a      	cmp	r3, #10
   d5e56:	d00b      	beq.n	d5e70 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e58:	69f6      	ldr	r6, [r6, #28]
   d5e5a:	e7f4      	b.n	d5e46 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5e5c:	f1b8 0f00 	cmp.w	r8, #0
   d5e60:	d004      	beq.n	d5e6c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e62:	6971      	ldr	r1, [r6, #20]
   d5e64:	4638      	mov	r0, r7
   d5e66:	3104      	adds	r1, #4
   d5e68:	f7ff fdf1 	bl	d5a4e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5e6c:	4641      	mov	r1, r8
   d5e6e:	e7f3      	b.n	d5e58 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e70:	f1b9 0f00 	cmp.w	r9, #0
   d5e74:	d101      	bne.n	d5e7a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5e76:	4649      	mov	r1, r9
   d5e78:	e7ee      	b.n	d5e58 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e7a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e7c:	2210      	movs	r2, #16
   d5e7e:	a801      	add	r0, sp, #4
   d5e80:	f000 f9dc 	bl	d623c <memset>
                    a.v = 6;
   d5e84:	2306      	movs	r3, #6
   d5e86:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e8a:	ad01      	add	r5, sp, #4
   d5e8c:	f104 0308 	add.w	r3, r4, #8
   d5e90:	3418      	adds	r4, #24
   d5e92:	6818      	ldr	r0, [r3, #0]
   d5e94:	6859      	ldr	r1, [r3, #4]
   d5e96:	462a      	mov	r2, r5
   d5e98:	c203      	stmia	r2!, {r0, r1}
   d5e9a:	3308      	adds	r3, #8
   d5e9c:	42a3      	cmp	r3, r4
   d5e9e:	4615      	mov	r5, r2
   d5ea0:	d1f7      	bne.n	d5e92 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5ea2:	a901      	add	r1, sp, #4
   d5ea4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5ea6:	ad07      	add	r5, sp, #28
   d5ea8:	f7ff fdb2 	bl	d5a10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5eae:	1d3c      	adds	r4, r7, #4
   d5eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5eb2:	682b      	ldr	r3, [r5, #0]
   d5eb4:	7023      	strb	r3, [r4, #0]
   d5eb6:	e7de      	b.n	d5e76 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5eb8:	9800      	ldr	r0, [sp, #0]
   d5eba:	f7fe fd45 	bl	d4948 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ebe:	4638      	mov	r0, r7
   d5ec0:	b015      	add	sp, #84	; 0x54
   d5ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5ec8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ec8:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5eca:	4a03      	ldr	r2, [pc, #12]	; (d5ed8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ecc:	601a      	str	r2, [r3, #0]
   d5ece:	2200      	movs	r2, #0
   d5ed0:	605a      	str	r2, [r3, #4]

} // spark
   d5ed2:	4770      	bx	lr
   d5ed4:	2003e7c0 	.word	0x2003e7c0
   d5ed8:	000d64d8 	.word	0x000d64d8

000d5edc <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   d5edc:	4770      	bx	lr

000d5ede <_ZN5spark16JSONBufferWriterD0Ev>:
   d5ede:	b510      	push	{r4, lr}
   d5ee0:	2114      	movs	r1, #20
   d5ee2:	4604      	mov	r4, r0
   d5ee4:	f000 f987 	bl	d61f6 <_ZdlPvj>
   d5ee8:	4620      	mov	r0, r4
   d5eea:	bd10      	pop	{r4, pc}

000d5eec <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d5eec:	b538      	push	{r3, r4, r5, lr}
   d5eee:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   d5ef0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   d5ef4:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d5ef6:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   d5ef8:	d207      	bcs.n	d5f0a <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   d5efa:	1ad2      	subs	r2, r2, r3
   d5efc:	6880      	ldr	r0, [r0, #8]
   d5efe:	42aa      	cmp	r2, r5
   d5f00:	bf28      	it	cs
   d5f02:	462a      	movcs	r2, r5
   d5f04:	4418      	add	r0, r3
   d5f06:	f000 f98b 	bl	d6220 <memcpy>
    }
    n_ += size;
   d5f0a:	6922      	ldr	r2, [r4, #16]
   d5f0c:	442a      	add	r2, r5
   d5f0e:	6122      	str	r2, [r4, #16]
}
   d5f10:	bd38      	pop	{r3, r4, r5, pc}

000d5f12 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   d5f12:	b40e      	push	{r1, r2, r3}
   d5f14:	b517      	push	{r0, r1, r2, r4, lr}
   d5f16:	ab05      	add	r3, sp, #20
   d5f18:	4604      	mov	r4, r0
   d5f1a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d5f1e:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   d5f20:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d5f22:	6903      	ldr	r3, [r0, #16]
   d5f24:	6880      	ldr	r0, [r0, #8]
   d5f26:	428b      	cmp	r3, r1
   d5f28:	bf38      	it	cc
   d5f2a:	1ac9      	subcc	r1, r1, r3
   d5f2c:	4418      	add	r0, r3
   d5f2e:	bf28      	it	cs
   d5f30:	2100      	movcs	r1, #0
   d5f32:	9b01      	ldr	r3, [sp, #4]
   d5f34:	f7fe ff1c 	bl	d4d70 <vsnprintf>
    va_end(args);
    n_ += n;
   d5f38:	6923      	ldr	r3, [r4, #16]
   d5f3a:	4418      	add	r0, r3
   d5f3c:	6120      	str	r0, [r4, #16]
}
   d5f3e:	b003      	add	sp, #12
   d5f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5f44:	b003      	add	sp, #12
   d5f46:	4770      	bx	lr

000d5f48 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5f48:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d5f4a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d5f4c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d5f50:	689b      	ldr	r3, [r3, #8]
   d5f52:	2201      	movs	r2, #1
   d5f54:	f10d 0107 	add.w	r1, sp, #7
   d5f58:	4798      	blx	r3
}
   d5f5a:	b003      	add	sp, #12
   d5f5c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f60 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d5f60:	b510      	push	{r4, lr}
    write('}');
   d5f62:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d5f64:	4604      	mov	r4, r0
    write('}');
   d5f66:	f7ff ffef 	bl	d5f48 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d5f6a:	2301      	movs	r3, #1
   d5f6c:	7123      	strb	r3, [r4, #4]
}
   d5f6e:	4620      	mov	r0, r4
   d5f70:	bd10      	pop	{r4, pc}

000d5f72 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   d5f72:	b508      	push	{r3, lr}
    switch (state_) {
   d5f74:	7903      	ldrb	r3, [r0, #4]
   d5f76:	2b01      	cmp	r3, #1
   d5f78:	d002      	beq.n	d5f80 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d5f7a:	2b02      	cmp	r3, #2
   d5f7c:	d004      	beq.n	d5f88 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   d5f7e:	bd08      	pop	{r3, pc}
        write(',');
   d5f80:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d5f82:	f7ff ffe1 	bl	d5f48 <_ZN5spark10JSONWriter5writeEc>
}
   d5f86:	e7fa      	b.n	d5f7e <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d5f88:	213a      	movs	r1, #58	; 0x3a
   d5f8a:	e7fa      	b.n	d5f82 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d5f8c <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d5f8c:	b510      	push	{r4, lr}
   d5f8e:	4604      	mov	r4, r0
    writeSeparator();
   d5f90:	f7ff ffef 	bl	d5f72 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d5f94:	4620      	mov	r0, r4
   d5f96:	217b      	movs	r1, #123	; 0x7b
   d5f98:	f7ff ffd6 	bl	d5f48 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d5f9c:	2300      	movs	r3, #0
   d5f9e:	7123      	strb	r3, [r4, #4]
}
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	bd10      	pop	{r4, pc}

000d5fa4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d5fa4:	b513      	push	{r0, r1, r4, lr}
   d5fa6:	4604      	mov	r4, r0
   d5fa8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d5faa:	f7ff ffe2 	bl	d5f72 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d5fae:	6823      	ldr	r3, [r4, #0]
   d5fb0:	9a01      	ldr	r2, [sp, #4]
   d5fb2:	68db      	ldr	r3, [r3, #12]
   d5fb4:	4903      	ldr	r1, [pc, #12]	; (d5fc4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d5fb6:	4620      	mov	r0, r4
   d5fb8:	4798      	blx	r3
    state_ = NEXT;
   d5fba:	2301      	movs	r3, #1
}
   d5fbc:	4620      	mov	r0, r4
    state_ = NEXT;
   d5fbe:	7123      	strb	r3, [r4, #4]
}
   d5fc0:	b002      	add	sp, #8
   d5fc2:	bd10      	pop	{r4, pc}
   d5fc4:	000d6504 	.word	0x000d6504

000d5fc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5fcc:	460d      	mov	r5, r1
   d5fce:	4617      	mov	r7, r2
    write('"');
   d5fd0:	2122      	movs	r1, #34	; 0x22
                printf("u%04x", (unsigned)c);
   d5fd2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6074 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5fd6:	4604      	mov	r4, r0
    const char* const end = str + size;
   d5fd8:	442f      	add	r7, r5
    write('"');
   d5fda:	f7ff ffb5 	bl	d5f48 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d5fde:	4629      	mov	r1, r5
    while (s != end) {
   d5fe0:	42bd      	cmp	r5, r7
   d5fe2:	462a      	mov	r2, r5
   d5fe4:	d038      	beq.n	d6058 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d5fe6:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d5fea:	2e22      	cmp	r6, #34	; 0x22
   d5fec:	d003      	beq.n	d5ff6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d5fee:	2e5c      	cmp	r6, #92	; 0x5c
   d5ff0:	d001      	beq.n	d5ff6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d5ff2:	2e1f      	cmp	r6, #31
   d5ff4:	d8f4      	bhi.n	d5fe0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d5ff6:	6823      	ldr	r3, [r4, #0]
   d5ff8:	1a52      	subs	r2, r2, r1
   d5ffa:	689b      	ldr	r3, [r3, #8]
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	4798      	blx	r3
            write('\\');
   d6000:	215c      	movs	r1, #92	; 0x5c
   d6002:	4620      	mov	r0, r4
   d6004:	f7ff ffa0 	bl	d5f48 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6008:	2e0d      	cmp	r6, #13
   d600a:	d80a      	bhi.n	d6022 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d600c:	2e07      	cmp	r6, #7
   d600e:	d91c      	bls.n	d604a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6010:	f1a6 0308 	sub.w	r3, r6, #8
   d6014:	2b05      	cmp	r3, #5
   d6016:	d818      	bhi.n	d604a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6018:	e8df f003 	tbb	[pc, r3]
   d601c:	17110f0d 	.word	0x17110f0d
   d6020:	1513      	.short	0x1513
   d6022:	2e22      	cmp	r6, #34	; 0x22
   d6024:	d001      	beq.n	d602a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6026:	2e5c      	cmp	r6, #92	; 0x5c
   d6028:	d10f      	bne.n	d604a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d602a:	4631      	mov	r1, r6
                write('b');
   d602c:	4620      	mov	r0, r4
   d602e:	f7ff ff8b 	bl	d5f48 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   d6032:	4629      	mov	r1, r5
    while (s != end) {
   d6034:	e7d4      	b.n	d5fe0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6036:	2162      	movs	r1, #98	; 0x62
   d6038:	e7f8      	b.n	d602c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d603a:	2174      	movs	r1, #116	; 0x74
   d603c:	e7f6      	b.n	d602c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d603e:	216e      	movs	r1, #110	; 0x6e
   d6040:	e7f4      	b.n	d602c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6042:	2166      	movs	r1, #102	; 0x66
   d6044:	e7f2      	b.n	d602c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6046:	2172      	movs	r1, #114	; 0x72
   d6048:	e7f0      	b.n	d602c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d604a:	6823      	ldr	r3, [r4, #0]
   d604c:	4632      	mov	r2, r6
   d604e:	68db      	ldr	r3, [r3, #12]
   d6050:	4641      	mov	r1, r8
   d6052:	4620      	mov	r0, r4
   d6054:	4798      	blx	r3
                break;
   d6056:	e7ec      	b.n	d6032 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
   d6058:	428d      	cmp	r5, r1
   d605a:	d004      	beq.n	d6066 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d605c:	6823      	ldr	r3, [r4, #0]
   d605e:	1a6a      	subs	r2, r5, r1
   d6060:	689b      	ldr	r3, [r3, #8]
   d6062:	4620      	mov	r0, r4
   d6064:	4798      	blx	r3
    write('"');
   d6066:	2122      	movs	r1, #34	; 0x22
   d6068:	4620      	mov	r0, r4
   d606a:	f7ff ff6d 	bl	d5f48 <_ZN5spark10JSONWriter5writeEc>
}
   d606e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6072:	bf00      	nop
   d6074:	000d6507 	.word	0x000d6507

000d6078 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6078:	b513      	push	{r0, r1, r4, lr}
   d607a:	4604      	mov	r4, r0
   d607c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6080:	f7ff ff77 	bl	d5f72 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6084:	4620      	mov	r0, r4
   d6086:	e9dd 2100 	ldrd	r2, r1, [sp]
   d608a:	f7ff ff9d 	bl	d5fc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d608e:	2302      	movs	r3, #2
}
   d6090:	4620      	mov	r0, r4
    state_ = VALUE;
   d6092:	7123      	strb	r3, [r4, #4]
}
   d6094:	b002      	add	sp, #8
   d6096:	bd10      	pop	{r4, pc}

000d6098 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6098:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d609a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d609c:	d902      	bls.n	d60a4 <pinAvailable+0xc>
    return false;
   d609e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d60a0:	b002      	add	sp, #8
   d60a2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d60a4:	f1a0 030b 	sub.w	r3, r0, #11
   d60a8:	2b02      	cmp	r3, #2
   d60aa:	d81a      	bhi.n	d60e2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d60ac:	4c17      	ldr	r4, [pc, #92]	; (d610c <pinAvailable+0x74>)
   d60ae:	7821      	ldrb	r1, [r4, #0]
   d60b0:	f3bf 8f5b 	dmb	ish
   d60b4:	f011 0101 	ands.w	r1, r1, #1
   d60b8:	d10b      	bne.n	d60d2 <pinAvailable+0x3a>
   d60ba:	4620      	mov	r0, r4
   d60bc:	9101      	str	r1, [sp, #4]
   d60be:	f7fd ffee 	bl	d409e <__cxa_guard_acquire>
   d60c2:	9901      	ldr	r1, [sp, #4]
   d60c4:	b128      	cbz	r0, d60d2 <pinAvailable+0x3a>
   d60c6:	4812      	ldr	r0, [pc, #72]	; (d6110 <pinAvailable+0x78>)
   d60c8:	f7fe feb0 	bl	d4e2c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d60cc:	4620      	mov	r0, r4
   d60ce:	f7fd ffeb 	bl	d40a8 <__cxa_guard_release>
   d60d2:	4b0f      	ldr	r3, [pc, #60]	; (d6110 <pinAvailable+0x78>)
   d60d4:	7818      	ldrb	r0, [r3, #0]
   d60d6:	f7fe fd37 	bl	d4b48 <hal_spi_is_enabled>
   d60da:	2800      	cmp	r0, #0
   d60dc:	d1df      	bne.n	d609e <pinAvailable+0x6>
  return true; // 'pin' is available
   d60de:	2001      	movs	r0, #1
   d60e0:	e7de      	b.n	d60a0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d60e2:	2801      	cmp	r0, #1
   d60e4:	d809      	bhi.n	d60fa <pinAvailable+0x62>
   d60e6:	f000 f859 	bl	d619c <_Z19__fetch_global_Wirev>
   d60ea:	2100      	movs	r1, #0
   d60ec:	7c00      	ldrb	r0, [r0, #16]
   d60ee:	f7fe fd13 	bl	d4b18 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d60f2:	f080 0001 	eor.w	r0, r0, #1
   d60f6:	b2c0      	uxtb	r0, r0
   d60f8:	e7d2      	b.n	d60a0 <pinAvailable+0x8>
   d60fa:	3809      	subs	r0, #9
   d60fc:	2801      	cmp	r0, #1
   d60fe:	d8ee      	bhi.n	d60de <pinAvailable+0x46>
   d6100:	f7ff fd8a 	bl	d5c18 <_Z22__fetch_global_Serial1v>
   d6104:	7c00      	ldrb	r0, [r0, #16]
   d6106:	f7fe fccf 	bl	d4aa8 <hal_usart_is_enabled>
   d610a:	e7f2      	b.n	d60f2 <pinAvailable+0x5a>
   d610c:	2003e7c8 	.word	0x2003e7c8
   d6110:	2003e7cc 	.word	0x2003e7cc

000d6114 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6114:	2823      	cmp	r0, #35	; 0x23
{
   d6116:	b538      	push	{r3, r4, r5, lr}
   d6118:	4604      	mov	r4, r0
   d611a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d611c:	d80a      	bhi.n	d6134 <pinMode+0x20>
   d611e:	29ff      	cmp	r1, #255	; 0xff
   d6120:	d008      	beq.n	d6134 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6122:	f7ff ffb9 	bl	d6098 <pinAvailable>
   d6126:	b128      	cbz	r0, d6134 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6128:	4629      	mov	r1, r5
   d612a:	4620      	mov	r0, r4
}
   d612c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6130:	f7fe bc22 	b.w	d4978 <HAL_Pin_Mode>
}
   d6134:	bd38      	pop	{r3, r4, r5, pc}

000d6136 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6136:	b538      	push	{r3, r4, r5, lr}
   d6138:	4604      	mov	r4, r0
   d613a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d613c:	f7fe fc24 	bl	d4988 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6140:	28ff      	cmp	r0, #255	; 0xff
   d6142:	d010      	beq.n	d6166 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6144:	2806      	cmp	r0, #6
   d6146:	d804      	bhi.n	d6152 <digitalWrite+0x1c>
   d6148:	234d      	movs	r3, #77	; 0x4d
   d614a:	fa23 f000 	lsr.w	r0, r3, r0
   d614e:	07c3      	lsls	r3, r0, #31
   d6150:	d409      	bmi.n	d6166 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6152:	4620      	mov	r0, r4
   d6154:	f7ff ffa0 	bl	d6098 <pinAvailable>
   d6158:	b128      	cbz	r0, d6166 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d615a:	4629      	mov	r1, r5
   d615c:	4620      	mov	r0, r4
}
   d615e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6162:	f7fe bc19 	b.w	d4998 <HAL_GPIO_Write>
}
   d6166:	bd38      	pop	{r3, r4, r5, pc}

000d6168 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d6168:	f7fe bc1e 	b.w	d49a8 <HAL_Pulse_In>

000d616c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d616c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d616e:	2300      	movs	r3, #0
   d6170:	2520      	movs	r5, #32
   d6172:	8043      	strh	r3, [r0, #2]
   d6174:	2314      	movs	r3, #20
{
   d6176:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6178:	8003      	strh	r3, [r0, #0]
   d617a:	6085      	str	r5, [r0, #8]
   d617c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d617e:	4906      	ldr	r1, [pc, #24]	; (d6198 <_Z17acquireWireBufferv+0x2c>)
   d6180:	4628      	mov	r0, r5
   d6182:	f000 f83a 	bl	d61fa <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6186:	4904      	ldr	r1, [pc, #16]	; (d6198 <_Z17acquireWireBufferv+0x2c>)
	};
   d6188:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d618a:	4628      	mov	r0, r5
   d618c:	f000 f835 	bl	d61fa <_ZnajRKSt9nothrow_t>
	};
   d6190:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6192:	4620      	mov	r0, r4
   d6194:	bd38      	pop	{r3, r4, r5, pc}
   d6196:	bf00      	nop
   d6198:	000d6528 	.word	0x000d6528

000d619c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d619c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d619e:	4d0f      	ldr	r5, [pc, #60]	; (d61dc <_Z19__fetch_global_Wirev+0x40>)
   d61a0:	7829      	ldrb	r1, [r5, #0]
   d61a2:	f3bf 8f5b 	dmb	ish
   d61a6:	f011 0401 	ands.w	r4, r1, #1
{
   d61aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d61ac:	d113      	bne.n	d61d6 <_Z19__fetch_global_Wirev+0x3a>
   d61ae:	4628      	mov	r0, r5
   d61b0:	f7fd ff75 	bl	d409e <__cxa_guard_acquire>
   d61b4:	b178      	cbz	r0, d61d6 <_Z19__fetch_global_Wirev+0x3a>
   d61b6:	a801      	add	r0, sp, #4
   d61b8:	f7ff ffd8 	bl	d616c <_Z17acquireWireBufferv>
   d61bc:	aa01      	add	r2, sp, #4
   d61be:	4621      	mov	r1, r4
   d61c0:	4807      	ldr	r0, [pc, #28]	; (d61e0 <_Z19__fetch_global_Wirev+0x44>)
   d61c2:	f7ff fd93 	bl	d5cec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d61c6:	4628      	mov	r0, r5
   d61c8:	f7fd ff6e 	bl	d40a8 <__cxa_guard_release>
   d61cc:	4a05      	ldr	r2, [pc, #20]	; (d61e4 <_Z19__fetch_global_Wirev+0x48>)
   d61ce:	4906      	ldr	r1, [pc, #24]	; (d61e8 <_Z19__fetch_global_Wirev+0x4c>)
   d61d0:	4803      	ldr	r0, [pc, #12]	; (d61e0 <_Z19__fetch_global_Wirev+0x44>)
   d61d2:	f000 f80b 	bl	d61ec <__aeabi_atexit>
	return wire;
}
   d61d6:	4802      	ldr	r0, [pc, #8]	; (d61e0 <_Z19__fetch_global_Wirev+0x44>)
   d61d8:	b007      	add	sp, #28
   d61da:	bd30      	pop	{r4, r5, pc}
   d61dc:	2003e7d8 	.word	0x2003e7d8
   d61e0:	2003e7dc 	.word	0x2003e7dc
   d61e4:	2003e5dc 	.word	0x2003e5dc
   d61e8:	000d5c95 	.word	0x000d5c95

000d61ec <__aeabi_atexit>:
   d61ec:	460b      	mov	r3, r1
   d61ee:	4601      	mov	r1, r0
   d61f0:	4618      	mov	r0, r3
   d61f2:	f000 b807 	b.w	d6204 <__cxa_atexit>

000d61f6 <_ZdlPvj>:
   d61f6:	f7fd bf50 	b.w	d409a <_ZdlPv>

000d61fa <_ZnajRKSt9nothrow_t>:
   d61fa:	f7fd bf4c 	b.w	d4096 <_Znaj>

000d61fe <_ZSt25__throw_bad_function_callv>:
   d61fe:	b508      	push	{r3, lr}
   d6200:	f7fe fdbe 	bl	d4d80 <abort>

000d6204 <__cxa_atexit>:
   d6204:	b510      	push	{r4, lr}
   d6206:	4c05      	ldr	r4, [pc, #20]	; (d621c <__cxa_atexit+0x18>)
   d6208:	4613      	mov	r3, r2
   d620a:	b12c      	cbz	r4, d6218 <__cxa_atexit+0x14>
   d620c:	460a      	mov	r2, r1
   d620e:	4601      	mov	r1, r0
   d6210:	2002      	movs	r0, #2
   d6212:	f3af 8000 	nop.w
   d6216:	bd10      	pop	{r4, pc}
   d6218:	4620      	mov	r0, r4
   d621a:	e7fc      	b.n	d6216 <__cxa_atexit+0x12>
   d621c:	00000000 	.word	0x00000000

000d6220 <memcpy>:
   d6220:	440a      	add	r2, r1
   d6222:	4291      	cmp	r1, r2
   d6224:	f100 33ff 	add.w	r3, r0, #4294967295
   d6228:	d100      	bne.n	d622c <memcpy+0xc>
   d622a:	4770      	bx	lr
   d622c:	b510      	push	{r4, lr}
   d622e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6232:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6236:	4291      	cmp	r1, r2
   d6238:	d1f9      	bne.n	d622e <memcpy+0xe>
   d623a:	bd10      	pop	{r4, pc}

000d623c <memset>:
   d623c:	4402      	add	r2, r0
   d623e:	4603      	mov	r3, r0
   d6240:	4293      	cmp	r3, r2
   d6242:	d100      	bne.n	d6246 <memset+0xa>
   d6244:	4770      	bx	lr
   d6246:	f803 1b01 	strb.w	r1, [r3], #1
   d624a:	e7f9      	b.n	d6240 <memset+0x4>

000d624c <srand>:
   d624c:	b538      	push	{r3, r4, r5, lr}
   d624e:	4b0d      	ldr	r3, [pc, #52]	; (d6284 <srand+0x38>)
   d6250:	681d      	ldr	r5, [r3, #0]
   d6252:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6254:	4604      	mov	r4, r0
   d6256:	b97b      	cbnz	r3, d6278 <srand+0x2c>
   d6258:	2018      	movs	r0, #24
   d625a:	f7fe fd71 	bl	d4d40 <malloc>
   d625e:	4a0a      	ldr	r2, [pc, #40]	; (d6288 <srand+0x3c>)
   d6260:	4b0a      	ldr	r3, [pc, #40]	; (d628c <srand+0x40>)
   d6262:	63a8      	str	r0, [r5, #56]	; 0x38
   d6264:	e9c0 2300 	strd	r2, r3, [r0]
   d6268:	4b09      	ldr	r3, [pc, #36]	; (d6290 <srand+0x44>)
   d626a:	6083      	str	r3, [r0, #8]
   d626c:	230b      	movs	r3, #11
   d626e:	8183      	strh	r3, [r0, #12]
   d6270:	2201      	movs	r2, #1
   d6272:	2300      	movs	r3, #0
   d6274:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6278:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d627a:	2200      	movs	r2, #0
   d627c:	611c      	str	r4, [r3, #16]
   d627e:	615a      	str	r2, [r3, #20]
   d6280:	bd38      	pop	{r3, r4, r5, pc}
   d6282:	bf00      	nop
   d6284:	2003e578 	.word	0x2003e578
   d6288:	abcd330e 	.word	0xabcd330e
   d628c:	e66d1234 	.word	0xe66d1234
   d6290:	0005deec 	.word	0x0005deec

000d6294 <strcpy>:
   d6294:	4603      	mov	r3, r0
   d6296:	f811 2b01 	ldrb.w	r2, [r1], #1
   d629a:	f803 2b01 	strb.w	r2, [r3], #1
   d629e:	2a00      	cmp	r2, #0
   d62a0:	d1f9      	bne.n	d6296 <strcpy+0x2>
   d62a2:	4770      	bx	lr

000d62a4 <strdup>:
   d62a4:	4b02      	ldr	r3, [pc, #8]	; (d62b0 <strdup+0xc>)
   d62a6:	4601      	mov	r1, r0
   d62a8:	6818      	ldr	r0, [r3, #0]
   d62aa:	f000 b803 	b.w	d62b4 <_strdup_r>
   d62ae:	bf00      	nop
   d62b0:	2003e578 	.word	0x2003e578

000d62b4 <_strdup_r>:
   d62b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d62b6:	4604      	mov	r4, r0
   d62b8:	4608      	mov	r0, r1
   d62ba:	460d      	mov	r5, r1
   d62bc:	f000 f80f 	bl	d62de <strlen>
   d62c0:	1c42      	adds	r2, r0, #1
   d62c2:	4611      	mov	r1, r2
   d62c4:	4620      	mov	r0, r4
   d62c6:	9201      	str	r2, [sp, #4]
   d62c8:	f7fe fd62 	bl	d4d90 <_malloc_r>
   d62cc:	4604      	mov	r4, r0
   d62ce:	b118      	cbz	r0, d62d8 <_strdup_r+0x24>
   d62d0:	9a01      	ldr	r2, [sp, #4]
   d62d2:	4629      	mov	r1, r5
   d62d4:	f7ff ffa4 	bl	d6220 <memcpy>
   d62d8:	4620      	mov	r0, r4
   d62da:	b003      	add	sp, #12
   d62dc:	bd30      	pop	{r4, r5, pc}

000d62de <strlen>:
   d62de:	4603      	mov	r3, r0
   d62e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d62e4:	2a00      	cmp	r2, #0
   d62e6:	d1fb      	bne.n	d62e0 <strlen+0x2>
   d62e8:	1a18      	subs	r0, r3, r0
   d62ea:	3801      	subs	r0, #1
   d62ec:	4770      	bx	lr

000d62ee <link_code_end>:
	...

000d62f0 <dynalib_user>:
   d62f0:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6300:	0000 0000 6176 756c 0065 6974 656d 7473     ....value.timest
   d6310:	6d61 0070 6f63 5f32 6f63 636e 6e65 7274     amp.co2_concentr
   d6320:	7461 6f69 006e 203b 6300 726f 6572 7463     ation.; .correct
   d6330:	6465 4320 324f 7020 6d70 203a 4400 5255     ed CO2 ppm: .DUR
   d6340:	5441 4f49 5f4e 3a31 0020 5544 4152 4954     ATION_1: .DURATI
   d6350:	4e4f 325f 203a 4800 4749 3a48 0020 4948     ON_2: .HIGH: .HI
   d6360:	4847 325f 203a 4c00 574f 203a 0000 0000     GH_2: .LOW: ....
   d6370:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000d637c <CSWTCH.60>:
   d637c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d638c:	0050 0000                                   P...

000d6390 <_ZTVN5spark13EthernetClassE>:
	...
   d6398:	4e0f 000d 4e05 000d 4dfb 000d 4df1 000d     .N...N...M...M..
   d63a8:	4de5 000d 4dd9 000d 4dcd 000d 4dc5 000d     .M...M...M...M..
   d63b8:	4dbb 000d 4db1 000d 5df5 000d 7061 0070     .M...M...]..app.
   d63c8:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   d63d8:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000d63e4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d63ec:	5449 000d 544f 000d 548d 000d 545d 000d     IT..OT...T..]T..
   d63fc:	544b 000d                                   KT..

000d6400 <_ZTV9IPAddress>:
	...
   d6408:	5991 000d 5981 000d 5983 000d               .Y...Y...Y..

000d6414 <_ZTV9USBSerial>:
	...
   d641c:	5a67 000d 5acf 000d 5aa5 000d 5161 000d     gZ...Z...Z..aQ..
   d642c:	5a97 000d 5a69 000d 5a79 000d 5ac9 000d     .Z..iZ..yZ...Z..
   d643c:	5a89 000d 5a63 000d                         .Z..cZ..

000d6444 <_ZTV11USARTSerial>:
	...
   d644c:	5b71 000d 5bdd 000d 5bb5 000d 5161 000d     q[...[...[..aQ..
   d645c:	5b85 000d 5ba1 000d 5b93 000d 5baf 000d     .[...[...[...[..
   d646c:	5b73 000d 5b77 000d                         s[..w[..

000d6474 <_ZTV7TwoWire>:
	...
   d647c:	5c95 000d 5cdf 000d 5cb7 000d 5c97 000d     .\...\...\...\..
   d648c:	5cbf 000d 5cc7 000d 5ccf 000d 5cd7 000d     .\...\...\...\..

000d649c <_ZTVN5spark9WiFiClassE>:
	...
   d64a4:	5d6f 000d 5d65 000d 5d5b 000d 5d11 000d     o]..e]..[]...]..
   d64b4:	5d4f 000d 5d43 000d 5d37 000d 5d2f 000d     O]..C]..7]../]..
   d64c4:	5d25 000d 5d1b 000d 5df5 000d               %]...]...]..

000d64d0 <_ZTVN5spark12NetworkClassE>:
	...
   d64d8:	5d8d 000d 5d97 000d 5da1 000d 5dab 000d     .]...]...]...]..
   d64e8:	5db5 000d 5dc1 000d 5dcd 000d 5dd9 000d     .]...]...]...]..
   d64f8:	5de1 000d 5deb 000d 5df5 000d 6425 7500     .]...]...]..%d.u
   d6508:	3025 7834 0000 0000                         %04x....

000d6510 <_ZTVN5spark16JSONBufferWriterE>:
	...
   d6518:	5edd 000d 5edf 000d 5eed 000d 5f13 000d     .^...^...^..._..

000d6528 <_ZSt7nothrow>:
	...

000d6529 <link_const_variable_data_end>:
   d6529:	00          	.byte	0x00
	...

000d652c <link_constructors_location>:
   d652c:	000d4459 	.word	0x000d4459
   d6530:	000d4939 	.word	0x000d4939
   d6534:	000d4e19 	.word	0x000d4e19
   d6538:	000d4e61 	.word	0x000d4e61
   d653c:	000d5139 	.word	0x000d5139
   d6540:	000d5229 	.word	0x000d5229
   d6544:	000d52ad 	.word	0x000d52ad
   d6548:	000d5309 	.word	0x000d5309
   d654c:	000d5d79 	.word	0x000d5d79
   d6550:	000d5ec9 	.word	0x000d5ec9

000d6554 <link_constructors_end>:
	...
