
c:/Users/Juri/iot-co2-traffic-lamp/target/2.0.1/argon/iot-co2-traffic-lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5d80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e58c  000d5d84  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001fc  2003e5f4  2003e5f4  0002e5f4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5dec  000d5dec  00025dec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5e14  000d5e14  00025e14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00135cbc  00000000  00000000  00025e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015801  00000000  00000000  0015bad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002bb19  00000000  00000000  001712d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000026b8  00000000  00000000  0019cdee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000074d0  00000000  00000000  0019f4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000362e8  00000000  00000000  001a6976  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000352a6  00000000  00000000  001dcc5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00109c13  00000000  00000000  00211f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006970  00000000  00000000  0031bb18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd31 	bl	d5a94 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd39 	bl	d5ab0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e58c 	.word	0x2003e58c
   d4048:	000d5d84 	.word	0x000d5d84
   d404c:	2003e5f4 	.word	0x2003e5f4
   d4050:	2003e5f4 	.word	0x2003e5f4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fe13 	bl	d4c88 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5d50 	.word	0x000d5d50
   d407c:	000d5d74 	.word	0x000d5d74

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b815 	b.w	d40ae <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f86f 	bl	d4168 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bdbd 	b.w	d4c0c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 babb 	b.w	d460c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bab9 	b.w	d460c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 babf 	b.w	d461c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <setup>:
unsigned long duration_1, duration_2;

char eventData[64];

// setup() runs once, when the device is first turned on.
void setup() {
   d40ae:	b508      	push	{r3, lr}
    // transmission rate to serial monitor 
  Serial.begin(SERIAL_TRANSMISSION_RATE);
   d40b0:	f001 f986 	bl	d53c0 <_Z16_fetch_usbserialv>
   d40b4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d40b8:	f001 f976 	bl	d53a8 <_ZN9USBSerial5beginEl>
  // Put initialization like pinMode and begin functions here.
  pinMode(SENSOR_PIN, INPUT);
}
   d40bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(SENSOR_PIN, INPUT);
   d40c0:	2100      	movs	r1, #0
   d40c2:	2006      	movs	r0, #6
   d40c4:	f001 bc78 	b.w	d59b8 <pinMode>

000d40c8 <_Z18publishMesaruementi>:

  }
  delay(5000);
}

void publishMesaruement(const int co2_ppm) {
   d40c8:	b570      	push	{r4, r5, r6, lr}
   d40ca:	b08a      	sub	sp, #40	; 0x28
   d40cc:	4605      	mov	r5, r0

  int timestamp = Time.now();
   d40ce:	f000 fd2f 	bl	d4b30 <_ZN9TimeClass3nowEv>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d40d2:	4a1f      	ldr	r2, [pc, #124]	; (d4150 <_Z18publishMesaruementi+0x88>)
   d40d4:	4e1f      	ldr	r6, [pc, #124]	; (d4154 <_Z18publishMesaruementi+0x8c>)
   d40d6:	9205      	str	r2, [sp, #20]
        state_(BEGIN) {
   d40d8:	2300      	movs	r3, #0
   d40da:	4604      	mov	r4, r0
        n_(0) {
   d40dc:	2240      	movs	r2, #64	; 0x40

  JSONBufferWriter writer(eventData, sizeof(eventData));
  writer.beginObject();
   d40de:	a805      	add	r0, sp, #20
   d40e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
        state_(BEGIN) {
   d40e4:	f88d 3018 	strb.w	r3, [sp, #24]
        n_(0) {
   d40e8:	9607      	str	r6, [sp, #28]
   d40ea:	f001 fba1 	bl	d5830 <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name, strlen(name));
   d40ee:	2205      	movs	r2, #5
   d40f0:	4919      	ldr	r1, [pc, #100]	; (d4158 <_Z18publishMesaruementi+0x90>)
   d40f2:	a805      	add	r0, sp, #20
   d40f4:	f001 fc12 	bl	d591c <_ZN5spark10JSONWriter4nameEPKcj>
      writer.name("value").value(co2_ppm);
   d40f8:	4629      	mov	r1, r5
   d40fa:	f001 fba5 	bl	d5848 <_ZN5spark10JSONWriter5valueEi>
   d40fe:	2209      	movs	r2, #9
   d4100:	4916      	ldr	r1, [pc, #88]	; (d415c <_Z18publishMesaruementi+0x94>)
   d4102:	a805      	add	r0, sp, #20
   d4104:	f001 fc0a 	bl	d591c <_ZN5spark10JSONWriter4nameEPKcj>
      writer.name("timestamp").value(timestamp);
   d4108:	4621      	mov	r1, r4
   d410a:	f001 fb9d 	bl	d5848 <_ZN5spark10JSONWriter5valueEi>
  writer.endObject();
   d410e:	a805      	add	r0, sp, #20
   d4110:	f001 fb78 	bl	d5804 <_ZN5spark10JSONWriter9endObjectEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4114:	4b12      	ldr	r3, [pc, #72]	; (d4160 <_Z18publishMesaruementi+0x98>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4116:	4913      	ldr	r1, [pc, #76]	; (d4164 <_Z18publishMesaruementi+0x9c>)
   d4118:	781b      	ldrb	r3, [r3, #0]
   d411a:	f88d 3000 	strb.w	r3, [sp]
   d411e:	4632      	mov	r2, r6
   d4120:	233c      	movs	r3, #60	; 0x3c
   d4122:	a803      	add	r0, sp, #12
   d4124:	f000 ff08 	bl	d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4128:	9c04      	ldr	r4, [sp, #16]
   d412a:	b17c      	cbz	r4, d414c <_Z18publishMesaruementi+0x84>
      if (--_M_use_count == 0)
   d412c:	6863      	ldr	r3, [r4, #4]
   d412e:	3b01      	subs	r3, #1
   d4130:	6063      	str	r3, [r4, #4]
   d4132:	b95b      	cbnz	r3, d414c <_Z18publishMesaruementi+0x84>
          _M_dispose();
   d4134:	6823      	ldr	r3, [r4, #0]
   d4136:	4620      	mov	r0, r4
   d4138:	689b      	ldr	r3, [r3, #8]
   d413a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d413c:	68a3      	ldr	r3, [r4, #8]
   d413e:	3b01      	subs	r3, #1
   d4140:	60a3      	str	r3, [r4, #8]
   d4142:	b91b      	cbnz	r3, d414c <_Z18publishMesaruementi+0x84>
            _M_destroy();
   d4144:	6823      	ldr	r3, [r4, #0]
   d4146:	4620      	mov	r0, r4
   d4148:	68db      	ldr	r3, [r3, #12]
   d414a:	4798      	blx	r3

  Particle.publish("co2_concentration", eventData, PRIVATE);
   d414c:	b00a      	add	sp, #40	; 0x28
   d414e:	bd70      	pop	{r4, r5, r6, pc}
   d4150:	000d5d3c 	.word	0x000d5d3c
   d4154:	2003e604 	.word	0x2003e604
   d4158:	000d5b78 	.word	0x000d5b78
   d415c:	000d5b7e 	.word	0x000d5b7e
   d4160:	2003e5f8 	.word	0x2003e5f8
   d4164:	000d5b88 	.word	0x000d5b88

000d4168 <loop>:
void loop() {
   d4168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  duration_1 = pulseIn(SENSOR_PIN, HIGH);
   d416c:	2101      	movs	r1, #1
void loop() {
   d416e:	b088      	sub	sp, #32
  duration_1 = pulseIn(SENSOR_PIN, HIGH);
   d4170:	2006      	movs	r0, #6
   d4172:	f001 fc32 	bl	d59da <pulseIn>
   d4176:	4d33      	ldr	r5, [pc, #204]	; (d4244 <loop+0xdc>)
   d4178:	6028      	str	r0, [r5, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d417a:	f000 f89b 	bl	d42b4 <HAL_Timer_Get_Milli_Seconds>
  duration_2 = pulseIn(SENSOR_PIN, HIGH);
   d417e:	2101      	movs	r1, #1
   d4180:	4607      	mov	r7, r0
   d4182:	2006      	movs	r0, #6
  pulse_high = duration_1 / 1000;
   d4184:	682e      	ldr	r6, [r5, #0]
  duration_2 = pulseIn(SENSOR_PIN, HIGH);
   d4186:	f001 fc28 	bl	d59da <pulseIn>
   d418a:	4b2f      	ldr	r3, [pc, #188]	; (d4248 <loop+0xe0>)
   d418c:	6018      	str	r0, [r3, #0]
  if (duration_1 != 0) {
   d418e:	682b      	ldr	r3, [r5, #0]
  duration_2 = pulseIn(SENSOR_PIN, HIGH);
   d4190:	4604      	mov	r4, r0
  if (duration_1 != 0) {
   d4192:	2b00      	cmp	r3, #0
   d4194:	d04f      	beq.n	d4236 <loop+0xce>
   d4196:	f000 f88d 	bl	d42b4 <HAL_Timer_Get_Milli_Seconds>
  pulse_high = duration_1 / 1000;
   d419a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    pulse_high_2 = (duration_2 / 1000);
   d419e:	fbb4 f2f8 	udiv	r2, r4, r8
    pulse_low = (time_end - (time_start + pulse_high_2));
   d41a2:	19d4      	adds	r4, r2, r7
   d41a4:	1b00      	subs	r0, r0, r4
  pulse_high = duration_1 / 1000;
   d41a6:	fbb6 f6f8 	udiv	r6, r6, r8
    co2_corrected = (((pulse_high - 2) * RANGE) / (pulse_high + pulse_low - 4));
   d41aa:	f241 3388 	movw	r3, #5000	; 0x1388
    co2_ppm = (((pulse_high - 2) * RANGE) / 1000);
   d41ae:	1eb5      	subs	r5, r6, #2
    co2_corrected = (((pulse_high - 2) * RANGE) / (pulse_high + pulse_low - 4));
   d41b0:	4430      	add	r0, r6
   d41b2:	436b      	muls	r3, r5
   d41b4:	3804      	subs	r0, #4
   d41b6:	fb93 f4f0 	sdiv	r4, r3, r0
    Serial.print("CO2 ppm: " + String(co2_ppm) + "; ");
   d41ba:	f001 f901 	bl	d53c0 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d41be:	4923      	ldr	r1, [pc, #140]	; (d424c <loop+0xe4>)
   d41c0:	4606      	mov	r6, r0
   d41c2:	a804      	add	r0, sp, #16
   d41c4:	f000 fb6d 	bl	d48a2 <_ZN6StringC1EPKc>
   d41c8:	220a      	movs	r2, #10
   d41ca:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   d41ce:	4668      	mov	r0, sp
   d41d0:	f000 fb8d 	bl	d48ee <_ZN6StringC1Eih>
   d41d4:	4669      	mov	r1, sp
   d41d6:	a804      	add	r0, sp, #16
   d41d8:	f000 fbb3 	bl	d4942 <_ZplRK15StringSumHelperRK6String>
   d41dc:	491c      	ldr	r1, [pc, #112]	; (d4250 <loop+0xe8>)
   d41de:	f000 fbbc 	bl	d495a <_ZplRK15StringSumHelperPKc>
   d41e2:	6801      	ldr	r1, [r0, #0]
   d41e4:	4630      	mov	r0, r6
   d41e6:	f000 fc35 	bl	d4a54 <_ZN5Print5printEPKc>
   d41ea:	4668      	mov	r0, sp
   d41ec:	f000 fb0e 	bl	d480c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d41f0:	a804      	add	r0, sp, #16
   d41f2:	f000 fb0b 	bl	d480c <_ZN6StringD1Ev>
    Serial.println("corrected CO2 ppm: " + String(co2_corrected) + "; ");
   d41f6:	f001 f8e3 	bl	d53c0 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d41fa:	4916      	ldr	r1, [pc, #88]	; (d4254 <loop+0xec>)
   d41fc:	4605      	mov	r5, r0
   d41fe:	a804      	add	r0, sp, #16
   d4200:	f000 fb4f 	bl	d48a2 <_ZN6StringC1EPKc>
   d4204:	220a      	movs	r2, #10
   d4206:	4621      	mov	r1, r4
   d4208:	4668      	mov	r0, sp
   d420a:	f000 fb70 	bl	d48ee <_ZN6StringC1Eih>
   d420e:	4669      	mov	r1, sp
   d4210:	a804      	add	r0, sp, #16
   d4212:	f000 fb96 	bl	d4942 <_ZplRK15StringSumHelperRK6String>
   d4216:	490e      	ldr	r1, [pc, #56]	; (d4250 <loop+0xe8>)
   d4218:	f000 fb9f 	bl	d495a <_ZplRK15StringSumHelperPKc>
   d421c:	6801      	ldr	r1, [r0, #0]
   d421e:	4628      	mov	r0, r5
   d4220:	f000 fc2b 	bl	d4a7a <_ZN5Print7printlnEPKc>
   d4224:	4668      	mov	r0, sp
   d4226:	f000 faf1 	bl	d480c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d422a:	a804      	add	r0, sp, #16
   d422c:	f000 faee 	bl	d480c <_ZN6StringD1Ev>
    publishMesaruement(co2_corrected);
   d4230:	4620      	mov	r0, r4
   d4232:	f7ff ff49 	bl	d40c8 <_Z18publishMesaruementi>
  delay(5000);
   d4236:	f241 3088 	movw	r0, #5000	; 0x1388
   d423a:	f000 fc93 	bl	d4b64 <delay>
}
   d423e:	b008      	add	sp, #32
   d4240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4244:	2003e5fc 	.word	0x2003e5fc
   d4248:	2003e600 	.word	0x2003e600
   d424c:	000d5ba7 	.word	0x000d5ba7
   d4250:	000d5b9a 	.word	0x000d5b9a
   d4254:	000d5b9d 	.word	0x000d5b9d

000d4258 <_GLOBAL__sub_I_duration_1>:
        val_(val) {
   d4258:	4b01      	ldr	r3, [pc, #4]	; (d4260 <_GLOBAL__sub_I_duration_1+0x8>)
   d425a:	2201      	movs	r2, #1
   d425c:	701a      	strb	r2, [r3, #0]
   d425e:	4770      	bx	lr
   d4260:	2003e5f8 	.word	0x2003e5f8

000d4264 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4264:	b508      	push	{r3, lr}
   d4266:	4b02      	ldr	r3, [pc, #8]	; (d4270 <netdb_freeaddrinfo+0xc>)
   d4268:	681b      	ldr	r3, [r3, #0]
   d426a:	689b      	ldr	r3, [r3, #8]
   d426c:	9301      	str	r3, [sp, #4]
   d426e:	bd08      	pop	{r3, pc}
   d4270:	00030268 	.word	0x00030268

000d4274 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4274:	b508      	push	{r3, lr}
   d4276:	4b02      	ldr	r3, [pc, #8]	; (d4280 <netdb_getaddrinfo+0xc>)
   d4278:	681b      	ldr	r3, [r3, #0]
   d427a:	68db      	ldr	r3, [r3, #12]
   d427c:	9301      	str	r3, [sp, #4]
   d427e:	bd08      	pop	{r3, pc}
   d4280:	00030268 	.word	0x00030268

000d4284 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <HAL_Pin_Mode+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	689b      	ldr	r3, [r3, #8]
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	0003022c 	.word	0x0003022c

000d4294 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <HAL_Pulse_In+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	0003022c 	.word	0x0003022c

000d42a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <HAL_RNG_GetRandomNumber+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	685b      	ldr	r3, [r3, #4]
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	00030218 	.word	0x00030218

000d42b4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	695b      	ldr	r3, [r3, #20]
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	00030218 	.word	0x00030218

000d42c4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <hal_rtc_time_is_valid+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030218 	.word	0x00030218

000d42d4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <hal_rtc_get_time+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030218 	.word	0x00030218

000d42e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <os_mutex_recursive_create+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	00030248 	.word	0x00030248

000d42f4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <os_mutex_recursive_destroy+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	00030248 	.word	0x00030248

000d4304 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <inet_inet_ntop+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	695b      	ldr	r3, [r3, #20]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030264 	.word	0x00030264

000d4314 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <hal_usart_init+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	681b      	ldr	r3, [r3, #0]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	0003023c 	.word	0x0003023c

000d4324 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <hal_usart_write+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	68db      	ldr	r3, [r3, #12]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	0003023c 	.word	0x0003023c

000d4334 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <hal_usart_available+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	691b      	ldr	r3, [r3, #16]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	0003023c 	.word	0x0003023c

000d4344 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <hal_usart_read+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	695b      	ldr	r3, [r3, #20]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	0003023c 	.word	0x0003023c

000d4354 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <hal_usart_peek+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	699b      	ldr	r3, [r3, #24]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	0003023c 	.word	0x0003023c

000d4364 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <hal_usart_flush+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	69db      	ldr	r3, [r3, #28]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	0003023c 	.word	0x0003023c

000d4374 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <hal_usart_is_enabled+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	6a1b      	ldr	r3, [r3, #32]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	0003023c 	.word	0x0003023c

000d4384 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <hal_usart_available_data_for_write+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	0003023c 	.word	0x0003023c

000d4394 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <hal_i2c_write+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	6a1b      	ldr	r3, [r3, #32]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030228 	.word	0x00030228

000d43a4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <hal_i2c_available+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030228 	.word	0x00030228

000d43b4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <hal_i2c_read+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030228 	.word	0x00030228

000d43c4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <hal_i2c_peek+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030228 	.word	0x00030228

000d43d4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <hal_i2c_flush+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030228 	.word	0x00030228

000d43e4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <hal_i2c_is_enabled+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030228 	.word	0x00030228

000d43f4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <hal_i2c_init+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030228 	.word	0x00030228

000d4404 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <hal_spi_init+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	69db      	ldr	r3, [r3, #28]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030230 	.word	0x00030230

000d4414 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <hal_spi_is_enabled+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	6a1b      	ldr	r3, [r3, #32]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030230 	.word	0x00030230

000d4424 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_USB_USART_Init+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	681b      	ldr	r3, [r3, #0]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003024c 	.word	0x0003024c

000d4434 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_USB_USART_Begin+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	685b      	ldr	r3, [r3, #4]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003024c 	.word	0x0003024c

000d4444 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_USB_USART_Available_Data+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	691b      	ldr	r3, [r3, #16]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003024c 	.word	0x0003024c

000d4454 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	695b      	ldr	r3, [r3, #20]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003024c 	.word	0x0003024c

000d4464 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_USB_USART_Receive_Data+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	699b      	ldr	r3, [r3, #24]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003024c 	.word	0x0003024c

000d4474 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_USB_USART_Send_Data+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	69db      	ldr	r3, [r3, #28]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	0003024c 	.word	0x0003024c

000d4484 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_USB_USART_Flush_Data+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	6a1b      	ldr	r3, [r3, #32]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	0003024c 	.word	0x0003024c

000d4494 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <system_mode+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	681b      	ldr	r3, [r3, #0]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030220 	.word	0x00030220

000d44a4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <set_system_mode+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	685b      	ldr	r3, [r3, #4]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030220 	.word	0x00030220

000d44b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <system_delay_ms+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	695b      	ldr	r3, [r3, #20]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030220 	.word	0x00030220

000d44c4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <application_thread_current+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030220 	.word	0x00030220

000d44d4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <application_thread_invoke+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030220 	.word	0x00030220

000d44e4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <system_thread_get_state+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030220 	.word	0x00030220

000d44f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b03      	ldr	r3, [pc, #12]	; (d4504 <system_ctrl_set_app_request_handler+0x10>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44fe:	9301      	str	r3, [sp, #4]
   d4500:	bd08      	pop	{r3, pc}
   d4502:	0000      	.short	0x0000
   d4504:	00030220 	.word	0x00030220

000d4508 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b03      	ldr	r3, [pc, #12]	; (d4518 <system_ctrl_set_result+0x10>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4512:	9301      	str	r3, [sp, #4]
   d4514:	bd08      	pop	{r3, pc}
   d4516:	0000      	.short	0x0000
   d4518:	00030220 	.word	0x00030220

000d451c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <network_connect+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	685b      	ldr	r3, [r3, #4]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030240 	.word	0x00030240

000d452c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <network_connecting+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	689b      	ldr	r3, [r3, #8]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030240 	.word	0x00030240

000d453c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <network_disconnect+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	68db      	ldr	r3, [r3, #12]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030240 	.word	0x00030240

000d454c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <network_ready+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	691b      	ldr	r3, [r3, #16]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030240 	.word	0x00030240

000d455c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <network_on+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	695b      	ldr	r3, [r3, #20]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030240 	.word	0x00030240

000d456c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <network_off+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	699b      	ldr	r3, [r3, #24]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030240 	.word	0x00030240

000d457c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <network_listen+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	69db      	ldr	r3, [r3, #28]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030240 	.word	0x00030240

000d458c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <network_listening+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	6a1b      	ldr	r3, [r3, #32]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030240 	.word	0x00030240

000d459c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <network_set_listen_timeout+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030240 	.word	0x00030240

000d45ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <network_get_listen_timeout+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030240 	.word	0x00030240

000d45bc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <spark_process+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	689b      	ldr	r3, [r3, #8]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030244 	.word	0x00030244

000d45cc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <spark_cloud_flag_connected+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	695b      	ldr	r3, [r3, #20]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030244 	.word	0x00030244

000d45dc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <spark_send_event+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	6a1b      	ldr	r3, [r3, #32]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030244 	.word	0x00030244

000d45ec <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <spark_sync_time_pending+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030244 	.word	0x00030244

000d45fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030244 	.word	0x00030244

000d460c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <malloc+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	681b      	ldr	r3, [r3, #0]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003021c 	.word	0x0003021c

000d461c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <free+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	685b      	ldr	r3, [r3, #4]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	0003021c 	.word	0x0003021c

000d462c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <realloc+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	689b      	ldr	r3, [r3, #8]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	0003021c 	.word	0x0003021c

000d463c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <vsnprintf+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	0003021c 	.word	0x0003021c

000d464c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <abort+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	0003021c 	.word	0x0003021c

000d465c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <_malloc_r+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	0003021c 	.word	0x0003021c

000d466c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <newlib_impure_ptr_callback+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	0003021c 	.word	0x0003021c

000d467c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d467c:	2200      	movs	r2, #0
   d467e:	6840      	ldr	r0, [r0, #4]
   d4680:	4611      	mov	r1, r2
   d4682:	f7ff bf83 	b.w	d458c <network_listening>

000d4686 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4686:	2200      	movs	r2, #0
   d4688:	6840      	ldr	r0, [r0, #4]
   d468a:	4611      	mov	r1, r2
   d468c:	f7ff bf8e 	b.w	d45ac <network_get_listen_timeout>

000d4690 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4690:	6840      	ldr	r0, [r0, #4]
   d4692:	2200      	movs	r2, #0
   d4694:	f7ff bf82 	b.w	d459c <network_set_listen_timeout>

000d4698 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4698:	6840      	ldr	r0, [r0, #4]
   d469a:	2200      	movs	r2, #0
   d469c:	f081 0101 	eor.w	r1, r1, #1
   d46a0:	f7ff bf6c 	b.w	d457c <network_listen>

000d46a4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d46a4:	2300      	movs	r3, #0
   d46a6:	6840      	ldr	r0, [r0, #4]
   d46a8:	461a      	mov	r2, r3
   d46aa:	4619      	mov	r1, r3
   d46ac:	f7ff bf5e 	b.w	d456c <network_off>

000d46b0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d46b0:	2300      	movs	r3, #0
   d46b2:	6840      	ldr	r0, [r0, #4]
   d46b4:	461a      	mov	r2, r3
   d46b6:	4619      	mov	r1, r3
   d46b8:	f7ff bf50 	b.w	d455c <network_on>

000d46bc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46bc:	2200      	movs	r2, #0
   d46be:	6840      	ldr	r0, [r0, #4]
   d46c0:	4611      	mov	r1, r2
   d46c2:	f7ff bf43 	b.w	d454c <network_ready>

000d46c6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d46c6:	2200      	movs	r2, #0
   d46c8:	6840      	ldr	r0, [r0, #4]
   d46ca:	4611      	mov	r1, r2
   d46cc:	f7ff bf2e 	b.w	d452c <network_connecting>

000d46d0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46d0:	6840      	ldr	r0, [r0, #4]
   d46d2:	2200      	movs	r2, #0
   d46d4:	2102      	movs	r1, #2
   d46d6:	f7ff bf31 	b.w	d453c <network_disconnect>

000d46da <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d46da:	2300      	movs	r3, #0
   d46dc:	6840      	ldr	r0, [r0, #4]
   d46de:	461a      	mov	r2, r3
   d46e0:	f7ff bf1c 	b.w	d451c <network_connect>

000d46e4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46e4:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46e6:	2203      	movs	r2, #3
   d46e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46ea:	4a02      	ldr	r2, [pc, #8]	; (d46f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46ec:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d46ee:	4770      	bx	lr
   d46f0:	2003e644 	.word	0x2003e644
   d46f4:	000d5bbc 	.word	0x000d5bbc

000d46f8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d46f8:	b510      	push	{r4, lr}
   d46fa:	4604      	mov	r4, r0
   d46fc:	4608      	mov	r0, r1
{
    _spi = spi;
   d46fe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4700:	f7ff fe80 	bl	d4404 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4704:	2300      	movs	r3, #0
   d4706:	6063      	str	r3, [r4, #4]
}
   d4708:	4620      	mov	r0, r4
   d470a:	bd10      	pop	{r4, pc}

000d470c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d470c:	b510      	push	{r4, lr}
   d470e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4710:	6800      	ldr	r0, [r0, #0]
   d4712:	b118      	cbz	r0, d471c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4714:	f7ff ff82 	bl	d461c <free>
            wakeupSource_ = nullptr;
   d4718:	2300      	movs	r3, #0
   d471a:	6023      	str	r3, [r4, #0]
        }
    }
   d471c:	bd10      	pop	{r4, pc}

000d471e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d471e:	b510      	push	{r4, lr}
   d4720:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4722:	f7ff fff3 	bl	d470c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4726:	4620      	mov	r0, r4
   d4728:	bd10      	pop	{r4, pc}
	...

000d472c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d472c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d472e:	4b09      	ldr	r3, [pc, #36]	; (d4754 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4730:	4c09      	ldr	r4, [pc, #36]	; (d4758 <_GLOBAL__sub_I_System+0x2c>)
   d4732:	2202      	movs	r2, #2
   d4734:	2000      	movs	r0, #0
   d4736:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4738:	4b08      	ldr	r3, [pc, #32]	; (d475c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d473a:	6020      	str	r0, [r4, #0]
   d473c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d473e:	71a0      	strb	r0, [r4, #6]
   d4740:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4742:	f7ff feaf 	bl	d44a4 <set_system_mode>
SystemClass System;
   d4746:	4620      	mov	r0, r4
   d4748:	4a05      	ldr	r2, [pc, #20]	; (d4760 <_GLOBAL__sub_I_System+0x34>)
   d474a:	4906      	ldr	r1, [pc, #24]	; (d4764 <_GLOBAL__sub_I_System+0x38>)
   d474c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4750:	f001 b986 	b.w	d5a60 <__aeabi_atexit>
   d4754:	2003e658 	.word	0x2003e658
   d4758:	2003e64c 	.word	0x2003e64c
   d475c:	ffff0000 	.word	0xffff0000
   d4760:	2003e5f4 	.word	0x2003e5f4
   d4764:	000d471f 	.word	0x000d471f

000d4768 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4768:	b510      	push	{r4, lr}
   d476a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d476c:	f001 f9f1 	bl	d5b52 <strlen>
   d4770:	3801      	subs	r0, #1
   d4772:	1823      	adds	r3, r4, r0
   d4774:	4620      	mov	r0, r4
	while(i<j){
   d4776:	4283      	cmp	r3, r0
   d4778:	d906      	bls.n	d4788 <_Z11str_reversePc+0x20>
		c = *i;
   d477a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d477c:	7819      	ldrb	r1, [r3, #0]
   d477e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4782:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d4786:	e7f6      	b.n	d4776 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4788:	bd10      	pop	{r4, pc}

000d478a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d478a:	b570      	push	{r4, r5, r6, lr}
   d478c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d478e:	1e91      	subs	r1, r2, #2
   d4790:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4792:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4794:	d822      	bhi.n	d47dc <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d4796:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4798:	b16d      	cbz	r5, d47b6 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d479a:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d479e:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d47a2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d47a4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d47a6:	bf94      	ite	ls
   d47a8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d47aa:	3157      	addhi	r1, #87	; 0x57
   d47ac:	b2c9      	uxtb	r1, r1
   d47ae:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d47b2:	4635      	mov	r5, r6
	while(a){
   d47b4:	e7f0      	b.n	d4798 <ultoa+0xe>
   d47b6:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d47b8:	4423      	add	r3, r4
            *ptr++ = '0';
   d47ba:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d47bc:	4293      	cmp	r3, r2
   d47be:	d902      	bls.n	d47c6 <ultoa+0x3c>
            *ptr++ = '0';
   d47c0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d47c4:	e7fa      	b.n	d47bc <ultoa+0x32>
   d47c6:	1a1a      	subs	r2, r3, r0
   d47c8:	4283      	cmp	r3, r0
   d47ca:	bf38      	it	cc
   d47cc:	2200      	movcc	r2, #0

	*ptr = '\0';
   d47ce:	2300      	movs	r3, #0
   d47d0:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d47d2:	4620      	mov	r0, r4
   d47d4:	f7ff ffc8 	bl	d4768 <_Z11str_reversePc>
	return buffer;
   d47d8:	4620      	mov	r0, r4
}
   d47da:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d47dc:	2000      	movs	r0, #0
   d47de:	e7fc      	b.n	d47da <ultoa+0x50>

000d47e0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d47e0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d47e2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d47e4:	460c      	mov	r4, r1
   d47e6:	4615      	mov	r5, r2
	if(a<0){
   d47e8:	da0e      	bge.n	d4808 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d47ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d47ee:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d47f2:	bf14      	ite	ne
   d47f4:	4258      	negne	r0, r3
   d47f6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d47f8:	2301      	movs	r3, #1
		*buffer = '-';
   d47fa:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d47fc:	462a      	mov	r2, r5
   d47fe:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d4800:	f7ff ffc3 	bl	d478a <ultoa>
	}
	return buffer;
}
   d4804:	4620      	mov	r0, r4
   d4806:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d4808:	2301      	movs	r3, #1
   d480a:	e7f9      	b.n	d4800 <itoa+0x20>

000d480c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d480c:	b510      	push	{r4, lr}
   d480e:	4604      	mov	r4, r0
{
	free(buffer);
   d4810:	6800      	ldr	r0, [r0, #0]
   d4812:	f7ff ff03 	bl	d461c <free>
}
   d4816:	4620      	mov	r0, r4
   d4818:	bd10      	pop	{r4, pc}

000d481a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d481a:	b510      	push	{r4, lr}
   d481c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d481e:	6800      	ldr	r0, [r0, #0]
   d4820:	b108      	cbz	r0, d4826 <_ZN6String10invalidateEv+0xc>
   d4822:	f7ff fefb 	bl	d461c <free>
	buffer = NULL;
   d4826:	2300      	movs	r3, #0
	capacity = len = 0;
   d4828:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d482c:	6023      	str	r3, [r4, #0]
}
   d482e:	bd10      	pop	{r4, pc}

000d4830 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4830:	b538      	push	{r3, r4, r5, lr}
   d4832:	4604      	mov	r4, r0
   d4834:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4836:	6800      	ldr	r0, [r0, #0]
   d4838:	3101      	adds	r1, #1
   d483a:	f7ff fef7 	bl	d462c <realloc>
	if (newbuffer) {
   d483e:	b110      	cbz	r0, d4846 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4840:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4844:	2001      	movs	r0, #1
	}
	return 0;
}
   d4846:	bd38      	pop	{r3, r4, r5, pc}

000d4848 <_ZN6String7reserveEj>:
{
   d4848:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d484a:	6803      	ldr	r3, [r0, #0]
{
   d484c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d484e:	b123      	cbz	r3, d485a <_ZN6String7reserveEj+0x12>
   d4850:	6843      	ldr	r3, [r0, #4]
   d4852:	428b      	cmp	r3, r1
   d4854:	d301      	bcc.n	d485a <_ZN6String7reserveEj+0x12>
   d4856:	2001      	movs	r0, #1
}
   d4858:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d485a:	4620      	mov	r0, r4
   d485c:	f7ff ffe8 	bl	d4830 <_ZN6String12changeBufferEj>
   d4860:	2800      	cmp	r0, #0
   d4862:	d0f9      	beq.n	d4858 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4864:	68a3      	ldr	r3, [r4, #8]
   d4866:	2b00      	cmp	r3, #0
   d4868:	d1f5      	bne.n	d4856 <_ZN6String7reserveEj+0xe>
   d486a:	6822      	ldr	r2, [r4, #0]
   d486c:	7013      	strb	r3, [r2, #0]
   d486e:	e7f2      	b.n	d4856 <_ZN6String7reserveEj+0xe>

000d4870 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4870:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4872:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4874:	4611      	mov	r1, r2
   d4876:	9201      	str	r2, [sp, #4]
{
   d4878:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d487a:	f7ff ffe5 	bl	d4848 <_ZN6String7reserveEj>
   d487e:	9a01      	ldr	r2, [sp, #4]
   d4880:	b928      	cbnz	r0, d488e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4882:	4620      	mov	r0, r4
   d4884:	f7ff ffc9 	bl	d481a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4888:	4620      	mov	r0, r4
   d488a:	b003      	add	sp, #12
   d488c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d488e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4890:	4629      	mov	r1, r5
   d4892:	6820      	ldr	r0, [r4, #0]
   d4894:	f001 f8fe 	bl	d5a94 <memcpy>
	buffer[len] = 0;
   d4898:	6822      	ldr	r2, [r4, #0]
   d489a:	68a3      	ldr	r3, [r4, #8]
   d489c:	2100      	movs	r1, #0
   d489e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d48a0:	e7f2      	b.n	d4888 <_ZN6String4copyEPKcj+0x18>

000d48a2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d48a2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d48a4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d48a6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d48aa:	4604      	mov	r4, r0
	len = 0;
   d48ac:	6083      	str	r3, [r0, #8]
	flags = 0;
   d48ae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d48b0:	b141      	cbz	r1, d48c4 <_ZN6StringC1EPKc+0x22>
   d48b2:	4608      	mov	r0, r1
   d48b4:	9101      	str	r1, [sp, #4]
   d48b6:	f001 f94c 	bl	d5b52 <strlen>
   d48ba:	9901      	ldr	r1, [sp, #4]
   d48bc:	4602      	mov	r2, r0
   d48be:	4620      	mov	r0, r4
   d48c0:	f7ff ffd6 	bl	d4870 <_ZN6String4copyEPKcj>
}
   d48c4:	4620      	mov	r0, r4
   d48c6:	b002      	add	sp, #8
   d48c8:	bd10      	pop	{r4, pc}

000d48ca <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d48ca:	b513      	push	{r0, r1, r4, lr}
   d48cc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d48ce:	b159      	cbz	r1, d48e8 <_ZN6StringaSEPKc+0x1e>
   d48d0:	4608      	mov	r0, r1
   d48d2:	9101      	str	r1, [sp, #4]
   d48d4:	f001 f93d 	bl	d5b52 <strlen>
   d48d8:	9901      	ldr	r1, [sp, #4]
   d48da:	4602      	mov	r2, r0
   d48dc:	4620      	mov	r0, r4
   d48de:	f7ff ffc7 	bl	d4870 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d48e2:	4620      	mov	r0, r4
   d48e4:	b002      	add	sp, #8
   d48e6:	bd10      	pop	{r4, pc}
	else invalidate();
   d48e8:	f7ff ff97 	bl	d481a <_ZN6String10invalidateEv>
   d48ec:	e7f9      	b.n	d48e2 <_ZN6StringaSEPKc+0x18>

000d48ee <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d48ee:	b510      	push	{r4, lr}
   d48f0:	4604      	mov	r4, r0
   d48f2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d48f4:	2300      	movs	r3, #0
	capacity = 0;
   d48f6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d48fa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d48fc:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d48fe:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d4900:	a901      	add	r1, sp, #4
   d4902:	f7ff ff6d 	bl	d47e0 <itoa>
	*this = buf;
   d4906:	a901      	add	r1, sp, #4
   d4908:	4620      	mov	r0, r4
   d490a:	f7ff ffde 	bl	d48ca <_ZN6StringaSEPKc>
}
   d490e:	4620      	mov	r0, r4
   d4910:	b00a      	add	sp, #40	; 0x28
   d4912:	bd10      	pop	{r4, pc}

000d4914 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4914:	b570      	push	{r4, r5, r6, lr}
   d4916:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4918:	460e      	mov	r6, r1
   d491a:	b909      	cbnz	r1, d4920 <_ZN6String6concatEPKcj+0xc>
   d491c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d491e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4920:	b16a      	cbz	r2, d493e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d4922:	6884      	ldr	r4, [r0, #8]
   d4924:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d4926:	4621      	mov	r1, r4
   d4928:	f7ff ff8e 	bl	d4848 <_ZN6String7reserveEj>
   d492c:	2800      	cmp	r0, #0
   d492e:	d0f5      	beq.n	d491c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4930:	6828      	ldr	r0, [r5, #0]
   d4932:	68ab      	ldr	r3, [r5, #8]
   d4934:	4631      	mov	r1, r6
   d4936:	4418      	add	r0, r3
   d4938:	f001 f8e6 	bl	d5b08 <strcpy>
	len = newlen;
   d493c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d493e:	2001      	movs	r0, #1
   d4940:	e7ed      	b.n	d491e <_ZN6String6concatEPKcj+0xa>

000d4942 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4942:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4944:	688a      	ldr	r2, [r1, #8]
   d4946:	6809      	ldr	r1, [r1, #0]
{
   d4948:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d494a:	f7ff ffe3 	bl	d4914 <_ZN6String6concatEPKcj>
   d494e:	b910      	cbnz	r0, d4956 <_ZplRK15StringSumHelperRK6String+0x14>
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff ff62 	bl	d481a <_ZN6String10invalidateEv>
	return a;
}
   d4956:	4620      	mov	r0, r4
   d4958:	bd10      	pop	{r4, pc}

000d495a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d495a:	b513      	push	{r0, r1, r4, lr}
   d495c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d495e:	b929      	cbnz	r1, d496c <_ZplRK15StringSumHelperPKc+0x12>
   d4960:	4620      	mov	r0, r4
   d4962:	f7ff ff5a 	bl	d481a <_ZN6String10invalidateEv>
	return a;
}
   d4966:	4620      	mov	r0, r4
   d4968:	b002      	add	sp, #8
   d496a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d496c:	4608      	mov	r0, r1
   d496e:	9101      	str	r1, [sp, #4]
   d4970:	f001 f8ef 	bl	d5b52 <strlen>
   d4974:	9901      	ldr	r1, [sp, #4]
   d4976:	4602      	mov	r2, r0
   d4978:	4620      	mov	r0, r4
   d497a:	f7ff ffcb 	bl	d4914 <_ZN6String6concatEPKcj>
   d497e:	2800      	cmp	r0, #0
   d4980:	d0ee      	beq.n	d4960 <_ZplRK15StringSumHelperPKc+0x6>
   d4982:	e7f0      	b.n	d4966 <_ZplRK15StringSumHelperPKc+0xc>

000d4984 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4984:	b510      	push	{r4, lr}
          _M_dispose();
   d4986:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4988:	4604      	mov	r4, r0
          _M_dispose();
   d498a:	689b      	ldr	r3, [r3, #8]
   d498c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d498e:	68a3      	ldr	r3, [r4, #8]
   d4990:	3b01      	subs	r3, #1
   d4992:	60a3      	str	r3, [r4, #8]
   d4994:	b92b      	cbnz	r3, d49a2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4996:	6823      	ldr	r3, [r4, #0]
   d4998:	4620      	mov	r0, r4
   d499a:	68db      	ldr	r3, [r3, #12]
    }
   d499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d49a0:	4718      	bx	r3
    }
   d49a2:	bd10      	pop	{r4, pc}

000d49a4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d49a4:	b510      	push	{r4, lr}
   d49a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d49a8:	6800      	ldr	r0, [r0, #0]
   d49aa:	b108      	cbz	r0, d49b0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d49ac:	f7ff fca2 	bl	d42f4 <os_mutex_recursive_destroy>
    }
   d49b0:	4620      	mov	r0, r4
   d49b2:	bd10      	pop	{r4, pc}

000d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d49b4:	680b      	ldr	r3, [r1, #0]
   d49b6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d49b8:	b113      	cbz	r3, d49c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d49ba:	685a      	ldr	r2, [r3, #4]
   d49bc:	3201      	adds	r2, #1
   d49be:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d49c0:	4770      	bx	lr

000d49c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d49c2:	b510      	push	{r4, lr}
   d49c4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d49c6:	6800      	ldr	r0, [r0, #0]
   d49c8:	b128      	cbz	r0, d49d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d49ca:	6843      	ldr	r3, [r0, #4]
   d49cc:	3b01      	subs	r3, #1
   d49ce:	6043      	str	r3, [r0, #4]
   d49d0:	b90b      	cbnz	r3, d49d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d49d2:	f7ff ffd7 	bl	d4984 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d49d6:	4620      	mov	r0, r4
   d49d8:	bd10      	pop	{r4, pc}
	...

000d49dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d49dc:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d49de:	4c06      	ldr	r4, [pc, #24]	; (d49f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d49e0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d49e2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d49e4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d49e6:	f7ff fc7d 	bl	d42e4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d49ea:	4620      	mov	r0, r4
   d49ec:	4a03      	ldr	r2, [pc, #12]	; (d49fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d49ee:	4904      	ldr	r1, [pc, #16]	; (d4a00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d49f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d49f4:	f001 b834 	b.w	d5a60 <__aeabi_atexit>
   d49f8:	2003e65c 	.word	0x2003e65c
   d49fc:	2003e5f4 	.word	0x2003e5f4
   d4a00:	000d49a5 	.word	0x000d49a5

000d4a04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a06:	4606      	mov	r6, r0
   d4a08:	460d      	mov	r5, r1
  size_t n = 0;
   d4a0a:	188f      	adds	r7, r1, r2
   d4a0c:	2400      	movs	r4, #0
  while (size--) {
   d4a0e:	42bd      	cmp	r5, r7
   d4a10:	d00c      	beq.n	d4a2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4a12:	6833      	ldr	r3, [r6, #0]
   d4a14:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4a18:	689b      	ldr	r3, [r3, #8]
   d4a1a:	4630      	mov	r0, r6
   d4a1c:	4798      	blx	r3
     if (chunk>=0)
   d4a1e:	1e03      	subs	r3, r0, #0
   d4a20:	db01      	blt.n	d4a26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4a22:	441c      	add	r4, r3
  while (size--) {
   d4a24:	e7f3      	b.n	d4a0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4a26:	2c00      	cmp	r4, #0
   d4a28:	bf08      	it	eq
   d4a2a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4a2c:	4620      	mov	r0, r4
   d4a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4a30:	b513      	push	{r0, r1, r4, lr}
   d4a32:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4a34:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4a36:	b159      	cbz	r1, d4a50 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4a38:	9101      	str	r1, [sp, #4]
   d4a3a:	f001 f88a 	bl	d5b52 <strlen>
   d4a3e:	6823      	ldr	r3, [r4, #0]
   d4a40:	9901      	ldr	r1, [sp, #4]
   d4a42:	68db      	ldr	r3, [r3, #12]
   d4a44:	4602      	mov	r2, r0
   d4a46:	4620      	mov	r0, r4
    }
   d4a48:	b002      	add	sp, #8
   d4a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4a4e:	4718      	bx	r3
    }
   d4a50:	b002      	add	sp, #8
   d4a52:	bd10      	pop	{r4, pc}

000d4a54 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4a54:	b508      	push	{r3, lr}
  return write(str);
   d4a56:	f7ff ffeb 	bl	d4a30 <_ZN5Print5writeEPKc>
}
   d4a5a:	bd08      	pop	{r3, pc}

000d4a5c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4a5c:	6803      	ldr	r3, [r0, #0]
   d4a5e:	689b      	ldr	r3, [r3, #8]
   d4a60:	4718      	bx	r3

000d4a62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4a62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4a64:	210d      	movs	r1, #13
{
   d4a66:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4a68:	f7ff fff8 	bl	d4a5c <_ZN5Print5printEc>
  n += print('\n');
   d4a6c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4a6e:	4604      	mov	r4, r0
  n += print('\n');
   d4a70:	4628      	mov	r0, r5
   d4a72:	f7ff fff3 	bl	d4a5c <_ZN5Print5printEc>
  return n;
}
   d4a76:	4420      	add	r0, r4
   d4a78:	bd38      	pop	{r3, r4, r5, pc}

000d4a7a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4a7a:	b538      	push	{r3, r4, r5, lr}
   d4a7c:	4605      	mov	r5, r0
  return write(str);
   d4a7e:	f7ff ffd7 	bl	d4a30 <_ZN5Print5writeEPKc>
   d4a82:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4a84:	4628      	mov	r0, r5
   d4a86:	f7ff ffec 	bl	d4a62 <_ZN5Print7printlnEv>
  return n;
}
   d4a8a:	4420      	add	r0, r4
   d4a8c:	bd38      	pop	{r3, r4, r5, pc}

000d4a8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4a8e:	b530      	push	{r4, r5, lr}
   d4a90:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4a92:	2300      	movs	r3, #0
   d4a94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4a98:	2a01      	cmp	r2, #1
   d4a9a:	bf98      	it	ls
   d4a9c:	220a      	movls	r2, #10
   d4a9e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4aa0:	460d      	mov	r5, r1
   d4aa2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4aa6:	fb01 5312 	mls	r3, r1, r2, r5
   d4aaa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4aae:	2b09      	cmp	r3, #9
   d4ab0:	bf94      	ite	ls
   d4ab2:	3330      	addls	r3, #48	; 0x30
   d4ab4:	3337      	addhi	r3, #55	; 0x37
   d4ab6:	b2db      	uxtb	r3, r3
  } while(n);
   d4ab8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4aba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4abe:	d9ef      	bls.n	d4aa0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4ac0:	4621      	mov	r1, r4
   d4ac2:	f7ff ffb5 	bl	d4a30 <_ZN5Print5writeEPKc>
}
   d4ac6:	b00b      	add	sp, #44	; 0x2c
   d4ac8:	bd30      	pop	{r4, r5, pc}
	...

000d4acc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4acc:	4b01      	ldr	r3, [pc, #4]	; (d4ad4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4ace:	4a02      	ldr	r2, [pc, #8]	; (d4ad8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4ad0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4ad2:	4770      	bx	lr
   d4ad4:	2003e660 	.word	0x2003e660
   d4ad8:	000d5be8 	.word	0x000d5be8

000d4adc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4adc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4ade:	2000      	movs	r0, #0
   d4ae0:	f7ff fd84 	bl	d45ec <spark_sync_time_pending>
   d4ae4:	b128      	cbz	r0, d4af2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ae6:	f7ff fd71 	bl	d45cc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4aea:	f080 0001 	eor.w	r0, r0, #1
   d4aee:	b2c0      	uxtb	r0, r0
    }
   d4af0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4af2:	2001      	movs	r0, #1
   d4af4:	e7fc      	b.n	d4af0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d4af6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d4af6:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d4af8:	2000      	movs	r0, #0
   d4afa:	f7ff fbe3 	bl	d42c4 <hal_rtc_time_is_valid>
    if (rtcstate)
   d4afe:	4604      	mov	r4, r0
   d4b00:	b9a0      	cbnz	r0, d4b2c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d4b02:	f7ff fcc7 	bl	d4494 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d4b06:	2801      	cmp	r0, #1
   d4b08:	d110      	bne.n	d4b2c <_ZN9TimeClass7isValidEv+0x36>
   d4b0a:	4620      	mov	r0, r4
   d4b0c:	f7ff fcea 	bl	d44e4 <system_thread_get_state>
   d4b10:	b960      	cbnz	r0, d4b2c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d4b12:	f7ff ffe3 	bl	d4adc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4b16:	b910      	cbnz	r0, d4b1e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d4b18:	f7ff fd50 	bl	d45bc <spark_process>
        while (_while() && !_condition()) {
   d4b1c:	e7f9      	b.n	d4b12 <_ZN9TimeClass7isValidEv+0x1c>
   d4b1e:	f7ff ffdd 	bl	d4adc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d4b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d4b26:	2000      	movs	r0, #0
   d4b28:	f7ff bbcc 	b.w	d42c4 <hal_rtc_time_is_valid>
}
   d4b2c:	4620      	mov	r0, r4
   d4b2e:	bd10      	pop	{r4, pc}

000d4b30 <_ZN9TimeClass3nowEv>:
{
   d4b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d4b32:	f7ff ffe0 	bl	d4af6 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d4b36:	2210      	movs	r2, #16
   d4b38:	2100      	movs	r1, #0
   d4b3a:	4668      	mov	r0, sp
   d4b3c:	f000 ffb8 	bl	d5ab0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d4b40:	2100      	movs	r1, #0
   d4b42:	4668      	mov	r0, sp
   d4b44:	f7ff fbc6 	bl	d42d4 <hal_rtc_get_time>
}
   d4b48:	9800      	ldr	r0, [sp, #0]
   d4b4a:	b005      	add	sp, #20
   d4b4c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4b50:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4b52:	681a      	ldr	r2, [r3, #0]
   d4b54:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4b56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4b58:	4770      	bx	lr
   d4b5a:	bf00      	nop
   d4b5c:	2003e58c 	.word	0x2003e58c
   d4b60:	2003e664 	.word	0x2003e664

000d4b64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b64:	2100      	movs	r1, #0
   d4b66:	f7ff bca5 	b.w	d44b4 <system_delay_ms>

000d4b6a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b6a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b6c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4b6e:	4604      	mov	r4, r0
      if (_M_manager)
   d4b70:	b113      	cbz	r3, d4b78 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b72:	2203      	movs	r2, #3
   d4b74:	4601      	mov	r1, r0
   d4b76:	4798      	blx	r3
    }
   d4b78:	4620      	mov	r0, r4
   d4b7a:	bd10      	pop	{r4, pc}

000d4b7c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4b7c:	b510      	push	{r4, lr}
   d4b7e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b80:	f7ff fff3 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
   d4b84:	4620      	mov	r0, r4
   d4b86:	bd10      	pop	{r4, pc}

000d4b88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4b88:	b513      	push	{r0, r1, r4, lr}
   d4b8a:	460b      	mov	r3, r1
   d4b8c:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b8e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4b92:	466c      	mov	r4, sp
   d4b94:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4b98:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4b9c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ba0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4ba4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4ba8:	b002      	add	sp, #8
   d4baa:	bd10      	pop	{r4, pc}

000d4bac <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4bac:	4803      	ldr	r0, [pc, #12]	; (d4bbc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4bae:	4a04      	ldr	r2, [pc, #16]	; (d4bc0 <_GLOBAL__sub_I_RGB+0x14>)
   d4bb0:	4904      	ldr	r1, [pc, #16]	; (d4bc4 <_GLOBAL__sub_I_RGB+0x18>)
   d4bb2:	2300      	movs	r3, #0
   d4bb4:	6083      	str	r3, [r0, #8]
   d4bb6:	f000 bf53 	b.w	d5a60 <__aeabi_atexit>
   d4bba:	bf00      	nop
   d4bbc:	2003e668 	.word	0x2003e668
   d4bc0:	2003e5f4 	.word	0x2003e5f4
   d4bc4:	000d4b7d 	.word	0x000d4b7d

000d4bc8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4bc8:	4b01      	ldr	r3, [pc, #4]	; (d4bd0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4bca:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4bcc:	4770      	bx	lr
   d4bce:	bf00      	nop
   d4bd0:	2003e590 	.word	0x2003e590

000d4bd4 <serialEventRun>:
{
   d4bd4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4bd6:	4b0b      	ldr	r3, [pc, #44]	; (d4c04 <serialEventRun+0x30>)
   d4bd8:	b143      	cbz	r3, d4bec <serialEventRun+0x18>
   d4bda:	f000 fbf1 	bl	d53c0 <_Z16_fetch_usbserialv>
   d4bde:	6803      	ldr	r3, [r0, #0]
   d4be0:	691b      	ldr	r3, [r3, #16]
   d4be2:	4798      	blx	r3
   d4be4:	2800      	cmp	r0, #0
   d4be6:	dd01      	ble.n	d4bec <serialEventRun+0x18>
        serialEvent();
   d4be8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4bec:	4b06      	ldr	r3, [pc, #24]	; (d4c08 <serialEventRun+0x34>)
   d4bee:	b143      	cbz	r3, d4c02 <serialEventRun+0x2e>
   d4bf0:	f000 fc64 	bl	d54bc <_Z22__fetch_global_Serial1v>
   d4bf4:	6803      	ldr	r3, [r0, #0]
   d4bf6:	691b      	ldr	r3, [r3, #16]
   d4bf8:	4798      	blx	r3
   d4bfa:	2800      	cmp	r0, #0
   d4bfc:	dd01      	ble.n	d4c02 <serialEventRun+0x2e>
        serialEvent1();
   d4bfe:	f3af 8000 	nop.w
}
   d4c02:	bd08      	pop	{r3, pc}
	...

000d4c0c <_post_loop>:
{
   d4c0c:	b508      	push	{r3, lr}
	serialEventRun();
   d4c0e:	f7ff ffe1 	bl	d4bd4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4c12:	f7ff fb4f 	bl	d42b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4c16:	4b01      	ldr	r3, [pc, #4]	; (d4c1c <_post_loop+0x10>)
   d4c18:	6018      	str	r0, [r3, #0]
}
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	2003e7d4 	.word	0x2003e7d4

000d4c20 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4c20:	4802      	ldr	r0, [pc, #8]	; (d4c2c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4c22:	4a03      	ldr	r2, [pc, #12]	; (d4c30 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4c24:	4903      	ldr	r1, [pc, #12]	; (d4c34 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4c26:	1a12      	subs	r2, r2, r0
   d4c28:	f000 bf34 	b.w	d5a94 <memcpy>
   d4c2c:	2003f400 	.word	0x2003f400
   d4c30:	2003f404 	.word	0x2003f404
   d4c34:	000d5d80 	.word	0x000d5d80

000d4c38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4c38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4c3a:	2300      	movs	r3, #0
   d4c3c:	9300      	str	r3, [sp, #0]
   d4c3e:	461a      	mov	r2, r3
   d4c40:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c44:	f7ff fc60 	bl	d4508 <system_ctrl_set_result>
}
   d4c48:	b003      	add	sp, #12
   d4c4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4c50 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4c50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4c52:	8843      	ldrh	r3, [r0, #2]
   d4c54:	2b0a      	cmp	r3, #10
   d4c56:	d008      	beq.n	d4c6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4c58:	2b50      	cmp	r3, #80	; 0x50
   d4c5a:	d10b      	bne.n	d4c74 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4c5c:	4b09      	ldr	r3, [pc, #36]	; (d4c84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4c5e:	681b      	ldr	r3, [r3, #0]
   d4c60:	b14b      	cbz	r3, d4c76 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4c62:	b003      	add	sp, #12
   d4c64:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4c68:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4c6a:	f7ff ffe5 	bl	d4c38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4c6e:	b003      	add	sp, #12
   d4c70:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4c74:	2300      	movs	r3, #0
   d4c76:	9300      	str	r3, [sp, #0]
   d4c78:	461a      	mov	r2, r3
   d4c7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c7e:	f7ff fc43 	bl	d4508 <system_ctrl_set_result>
}
   d4c82:	e7f4      	b.n	d4c6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4c84:	2003e67c 	.word	0x2003e67c

000d4c88 <module_user_init_hook>:
{
   d4c88:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c8a:	4c12      	ldr	r4, [pc, #72]	; (d4cd4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4c8c:	4812      	ldr	r0, [pc, #72]	; (d4cd8 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c8e:	4d13      	ldr	r5, [pc, #76]	; (d4cdc <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4c90:	2100      	movs	r1, #0
   d4c92:	f7ff fceb 	bl	d466c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c96:	6823      	ldr	r3, [r4, #0]
   d4c98:	42ab      	cmp	r3, r5
   d4c9a:	4b11      	ldr	r3, [pc, #68]	; (d4ce0 <module_user_init_hook+0x58>)
   d4c9c:	bf0c      	ite	eq
   d4c9e:	2201      	moveq	r2, #1
   d4ca0:	2200      	movne	r2, #0
   d4ca2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4ca4:	d002      	beq.n	d4cac <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4ca6:	f7ff ffbb 	bl	d4c20 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4caa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4cac:	f7ff fafa 	bl	d42a4 <HAL_RNG_GetRandomNumber>
   d4cb0:	4604      	mov	r4, r0
    srand(seed);
   d4cb2:	f000 ff05 	bl	d5ac0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4cb6:	4b0b      	ldr	r3, [pc, #44]	; (d4ce4 <module_user_init_hook+0x5c>)
   d4cb8:	b113      	cbz	r3, d4cc0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4cba:	4620      	mov	r0, r4
   d4cbc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4cc0:	2100      	movs	r1, #0
   d4cc2:	4808      	ldr	r0, [pc, #32]	; (d4ce4 <module_user_init_hook+0x5c>)
   d4cc4:	f7ff fc9a 	bl	d45fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ccc:	4806      	ldr	r0, [pc, #24]	; (d4ce8 <module_user_init_hook+0x60>)
   d4cce:	2100      	movs	r1, #0
   d4cd0:	f7ff bc10 	b.w	d44f4 <system_ctrl_set_app_request_handler>
   d4cd4:	2003f400 	.word	0x2003f400
   d4cd8:	000d4bc9 	.word	0x000d4bc9
   d4cdc:	9a271c1e 	.word	0x9a271c1e
   d4ce0:	2003e678 	.word	0x2003e678
   d4ce4:	00000000 	.word	0x00000000
   d4ce8:	000d4c51 	.word	0x000d4c51

000d4cec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4cec:	4770      	bx	lr

000d4cee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4cee:	2000      	movs	r0, #0
   d4cf0:	4770      	bx	lr

000d4cf2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4cf2:	b510      	push	{r4, lr}
   d4cf4:	2110      	movs	r1, #16
   d4cf6:	4604      	mov	r4, r0
   d4cf8:	f000 feb7 	bl	d5a6a <_ZdlPvj>
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	bd10      	pop	{r4, pc}

000d4d00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4d00:	b508      	push	{r3, lr}
      { delete this; }
   d4d02:	f7ff fff6 	bl	d4cf2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4d06:	bd08      	pop	{r3, pc}

000d4d08 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4d08:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4d0a:	2200      	movs	r2, #0
   d4d0c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4d10:	6002      	str	r2, [r0, #0]
   d4d12:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4d14:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d16:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4d18:	680c      	ldr	r4, [r1, #0]
   d4d1a:	8085      	strh	r5, [r0, #4]
   d4d1c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d1e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4d20:	bd30      	pop	{r4, r5, pc}

000d4d22 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4d22:	b510      	push	{r4, lr}
   d4d24:	4604      	mov	r4, r0
    free((void*)msg_);
   d4d26:	6800      	ldr	r0, [r0, #0]
   d4d28:	f7ff fc78 	bl	d461c <free>
}
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	bd10      	pop	{r4, pc}

000d4d30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4d30:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4d32:	68c4      	ldr	r4, [r0, #12]
   d4d34:	b1f4      	cbz	r4, d4d74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4d36:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4d38:	2b02      	cmp	r3, #2
   d4d3a:	d103      	bne.n	d4d44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4d3c:	f104 000c 	add.w	r0, r4, #12
   d4d40:	f7ff ffef 	bl	d4d22 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4d44:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4d46:	b135      	cbz	r5, d4d56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4d48:	4628      	mov	r0, r5
   d4d4a:	f7ff ff0e 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
   d4d4e:	2110      	movs	r1, #16
   d4d50:	4628      	mov	r0, r5
   d4d52:	f000 fe8a 	bl	d5a6a <_ZdlPvj>
   d4d56:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4d58:	b135      	cbz	r5, d4d68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4d5a:	4628      	mov	r0, r5
   d4d5c:	f7ff ff05 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
   d4d60:	2110      	movs	r1, #16
   d4d62:	4628      	mov	r0, r5
   d4d64:	f000 fe81 	bl	d5a6a <_ZdlPvj>
   d4d68:	4620      	mov	r0, r4
   d4d6a:	2114      	movs	r1, #20
   d4d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4d70:	f000 be7b 	b.w	d5a6a <_ZdlPvj>
   d4d74:	bd38      	pop	{r3, r4, r5, pc}

000d4d76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d78:	460e      	mov	r6, r1
   d4d7a:	4604      	mov	r4, r0
   d4d7c:	f856 3b04 	ldr.w	r3, [r6], #4
   d4d80:	9300      	str	r3, [sp, #0]
   d4d82:	460d      	mov	r5, r1
   d4d84:	a801      	add	r0, sp, #4
   d4d86:	4631      	mov	r1, r6
   d4d88:	f7ff fe14 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4d8c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4d8e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4d90:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4d92:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4d94:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4d96:	2300      	movs	r3, #0
   d4d98:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d9a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4d9c:	f7ff fe11 	bl	d49c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4da0:	4630      	mov	r0, r6
   d4da2:	f7ff fe0e 	bl	d49c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4da6:	4628      	mov	r0, r5
   d4da8:	2108      	movs	r1, #8
   d4daa:	f000 fe5e 	bl	d5a6a <_ZdlPvj>
        return p;
    }
   d4dae:	4620      	mov	r0, r4
   d4db0:	b002      	add	sp, #8
   d4db2:	bd70      	pop	{r4, r5, r6, pc}

000d4db4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4db4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4db6:	b510      	push	{r4, lr}
      if (_M_empty())
   d4db8:	b90a      	cbnz	r2, d4dbe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4dba:	f000 fe5a 	bl	d5a72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d4dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4dc2:	68c3      	ldr	r3, [r0, #12]
   d4dc4:	4718      	bx	r3

000d4dc6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4dc6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4dc8:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4dca:	f100 0110 	add.w	r1, r0, #16
   d4dce:	f7ff fff1 	bl	d4db4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4dd2:	bd08      	pop	{r3, pc}

000d4dd4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4dd4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4dd6:	b510      	push	{r4, lr}
      if (_M_empty())
   d4dd8:	b90a      	cbnz	r2, d4dde <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4dda:	f000 fe4a 	bl	d5a72 <_ZSt25__throw_bad_function_callv>
    }
   d4dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4de2:	68c3      	ldr	r3, [r0, #12]
   d4de4:	4718      	bx	r3

000d4de6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4de6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4de8:	6800      	ldr	r0, [r0, #0]
   d4dea:	f100 0110 	add.w	r1, r0, #16
   d4dee:	f7ff fff1 	bl	d4dd4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4df2:	bd08      	pop	{r3, pc}

000d4df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4df4:	b538      	push	{r3, r4, r5, lr}
   d4df6:	2300      	movs	r3, #0
   d4df8:	4604      	mov	r4, r0
   d4dfa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4dfc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4dfe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4e00:	f7ff f947 	bl	d4092 <_Znwj>
   d4e04:	b128      	cbz	r0, d4e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4e06:	2301      	movs	r3, #1
   d4e08:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4e0c:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4e0e:	6003      	str	r3, [r0, #0]
   d4e10:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4e12:	6020      	str	r0, [r4, #0]
	}
   d4e14:	4620      	mov	r0, r4
   d4e16:	bd38      	pop	{r3, r4, r5, pc}
   d4e18:	000d5c10 	.word	0x000d5c10

000d4e1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4e1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4e1e:	2300      	movs	r3, #0
   d4e20:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4e22:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4e24:	4604      	mov	r4, r0
   d4e26:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4e28:	b12b      	cbz	r3, d4e36 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4e2a:	2202      	movs	r2, #2
   d4e2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4e2e:	68eb      	ldr	r3, [r5, #12]
   d4e30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4e32:	68ab      	ldr	r3, [r5, #8]
   d4e34:	60a3      	str	r3, [r4, #8]
    }
   d4e36:	4620      	mov	r0, r4
   d4e38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e3e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4e40:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4e42:	4668      	mov	r0, sp
   d4e44:	f7ff ff60 	bl	d4d08 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4e48:	f04f 0302 	mov.w	r3, #2
   d4e4c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4e50:	2a00      	cmp	r2, #0
   d4e52:	d103      	bne.n	d4e5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4e54:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4e58:	2900      	cmp	r1, #0
   d4e5a:	d1f7      	bne.n	d4e4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4e5c:	d125      	bne.n	d4eaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4e5e:	f104 050c 	add.w	r5, r4, #12
   d4e62:	4669      	mov	r1, sp
   d4e64:	4628      	mov	r0, r5
   d4e66:	f7ff ff4f 	bl	d4d08 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4e6a:	f3bf 8f5b 	dmb	ish
   d4e6e:	2301      	movs	r3, #1
   d4e70:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4e72:	2000      	movs	r0, #0
   d4e74:	f104 0308 	add.w	r3, r4, #8
   d4e78:	f3bf 8f5b 	dmb	ish
   d4e7c:	e853 6f00 	ldrex	r6, [r3]
   d4e80:	e843 0200 	strex	r2, r0, [r3]
   d4e84:	2a00      	cmp	r2, #0
   d4e86:	d1f9      	bne.n	d4e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4e88:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4e8c:	b16e      	cbz	r6, d4eaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4e8e:	f7ff fb19 	bl	d44c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4e92:	b178      	cbz	r0, d4eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e94:	4629      	mov	r1, r5
   d4e96:	4630      	mov	r0, r6
   d4e98:	f7ff ff8c 	bl	d4db4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4e9c:	4630      	mov	r0, r6
   d4e9e:	f7ff fe64 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4ea2:	2110      	movs	r1, #16
   d4ea4:	4630      	mov	r0, r6
   d4ea6:	f000 fde0 	bl	d5a6a <_ZdlPvj>
        p_->setError(std::move(error));
   d4eaa:	4668      	mov	r0, sp
   d4eac:	f7ff ff39 	bl	d4d22 <_ZN8particle5ErrorD1Ev>
    }
   d4eb0:	b009      	add	sp, #36	; 0x24
   d4eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4eb4:	4631      	mov	r1, r6
   d4eb6:	a802      	add	r0, sp, #8
   d4eb8:	f7ff ffb0 	bl	d4e1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4ebc:	68e0      	ldr	r0, [r4, #12]
   d4ebe:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4ec2:	b108      	cbz	r0, d4ec8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4ec4:	f000 fe28 	bl	d5b18 <strdup>
        type_(type) {
   d4ec8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4eca:	2010      	movs	r0, #16
   d4ecc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4ed0:	f7ff f8df 	bl	d4092 <_Znwj>
   d4ed4:	4605      	mov	r5, r0
   d4ed6:	b1e8      	cbz	r0, d4f14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4ed8:	2700      	movs	r7, #0
   d4eda:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4edc:	2018      	movs	r0, #24
   d4ede:	f7ff f8d8 	bl	d4092 <_Znwj>
   d4ee2:	4604      	mov	r4, r0
   d4ee4:	b188      	cbz	r0, d4f0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4ee6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4ee8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4eea:	a802      	add	r0, sp, #8
   d4eec:	f7ff fe4c 	bl	d4b88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ef0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4ef2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ef4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ef6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4ef8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4efa:	a906      	add	r1, sp, #24
   d4efc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4efe:	60e3      	str	r3, [r4, #12]
   d4f00:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4f04:	9205      	str	r2, [sp, #20]
   d4f06:	f7ff feff 	bl	d4d08 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4f0a:	4b08      	ldr	r3, [pc, #32]	; (d4f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4f0c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4f0e:	4b08      	ldr	r3, [pc, #32]	; (d4f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f10:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4f12:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4f14:	a806      	add	r0, sp, #24
   d4f16:	f7ff ff04 	bl	d4d22 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4f1a:	a802      	add	r0, sp, #8
   d4f1c:	f7ff fe25 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4f20:	2200      	movs	r2, #0
   d4f22:	4629      	mov	r1, r5
   d4f24:	4803      	ldr	r0, [pc, #12]	; (d4f34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4f26:	f7ff fad5 	bl	d44d4 <application_thread_invoke>
   d4f2a:	e7b7      	b.n	d4e9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4f2c:	000d4dc7 	.word	0x000d4dc7
   d4f30:	000d505d 	.word	0x000d505d
   d4f34:	000d5511 	.word	0x000d5511

000d4f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f3c:	b08a      	sub	sp, #40	; 0x28
   d4f3e:	4605      	mov	r5, r0
   d4f40:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4f44:	460c      	mov	r4, r1
   d4f46:	4617      	mov	r7, r2
   d4f48:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f4a:	f7ff fb3f 	bl	d45cc <spark_cloud_flag_connected>
   d4f4e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4f50:	4682      	mov	sl, r0
   d4f52:	bb38      	cbnz	r0, d4fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4f54:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4f58:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f5a:	a905      	add	r1, sp, #20
   d4f5c:	4630      	mov	r0, r6
   d4f5e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4f62:	f7ff fed1 	bl	d4d08 <_ZN8particle5ErrorC1EOS0_>
   d4f66:	2014      	movs	r0, #20
   d4f68:	f7ff f893 	bl	d4092 <_Znwj>
   d4f6c:	4604      	mov	r4, r0
   d4f6e:	b148      	cbz	r0, d4f84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4f70:	2302      	movs	r3, #2
   d4f72:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f74:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f76:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f7a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4f7c:	4631      	mov	r1, r6
   d4f7e:	300c      	adds	r0, #12
   d4f80:	f7ff fec2 	bl	d4d08 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4f84:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4f86:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4f88:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4f8c:	f7ff ff32 	bl	d4df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4f90:	4630      	mov	r0, r6
   d4f92:	f7ff fec6 	bl	d4d22 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4f96:	a805      	add	r0, sp, #20
   d4f98:	f7ff fec3 	bl	d4d22 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4f9c:	4628      	mov	r0, r5
   d4f9e:	b00a      	add	sp, #40	; 0x28
   d4fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4fa4:	230c      	movs	r3, #12
   d4fa6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4faa:	2014      	movs	r0, #20
   d4fac:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4fb0:	9307      	str	r3, [sp, #28]
   d4fb2:	f7ff f86e 	bl	d4092 <_Znwj>
   d4fb6:	4601      	mov	r1, r0
   d4fb8:	b128      	cbz	r0, d4fc6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4fba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4fbe:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4fc2:	f880 a001 	strb.w	sl, [r0, #1]
   d4fc6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4fc8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4fca:	f7ff ff13 	bl	d4df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4fce:	4b22      	ldr	r3, [pc, #136]	; (d5058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4fd0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4fd2:	2008      	movs	r0, #8
   d4fd4:	f7ff f85d 	bl	d4092 <_Znwj>
   d4fd8:	4682      	mov	sl, r0
   d4fda:	b128      	cbz	r0, d4fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fdc:	9b03      	ldr	r3, [sp, #12]
   d4fde:	f840 3b04 	str.w	r3, [r0], #4
   d4fe2:	a904      	add	r1, sp, #16
   d4fe4:	f7ff fce6 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4fe8:	9600      	str	r6, [sp, #0]
   d4fea:	fa5f f389 	uxtb.w	r3, r9
   d4fee:	4642      	mov	r2, r8
   d4ff0:	4639      	mov	r1, r7
   d4ff2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4ff4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4ff8:	f7ff faf0 	bl	d45dc <spark_send_event>
   d4ffc:	b9b8      	cbnz	r0, d502e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4ffe:	9b03      	ldr	r3, [sp, #12]
   d5000:	785b      	ldrb	r3, [r3, #1]
   d5002:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5006:	b993      	cbnz	r3, d502e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5008:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d500c:	a905      	add	r1, sp, #20
   d500e:	a803      	add	r0, sp, #12
   d5010:	9205      	str	r2, [sp, #20]
   d5012:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5016:	f7ff ff11 	bl	d4e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d501a:	a805      	add	r0, sp, #20
   d501c:	f7ff fe81 	bl	d4d22 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5020:	a805      	add	r0, sp, #20
   d5022:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5024:	f7ff fea7 	bl	d4d76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5028:	a806      	add	r0, sp, #24
   d502a:	f7ff fcca 	bl	d49c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d502e:	9b03      	ldr	r3, [sp, #12]
   d5030:	9305      	str	r3, [sp, #20]
   d5032:	a904      	add	r1, sp, #16
   d5034:	a806      	add	r0, sp, #24
   d5036:	f7ff fcbd 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d503a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d503c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d503e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5040:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5042:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5044:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5046:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5048:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d504a:	f7ff fcba 	bl	d49c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d504e:	a804      	add	r0, sp, #16
   d5050:	f7ff fcb7 	bl	d49c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5054:	e7a2      	b.n	d4f9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5056:	bf00      	nop
   d5058:	000d5121 	.word	0x000d5121

000d505c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d505c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d505e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5060:	4605      	mov	r5, r0
	  switch (__op)
   d5062:	d007      	beq.n	d5074 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5064:	2a03      	cmp	r2, #3
   d5066:	d018      	beq.n	d509a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5068:	2a01      	cmp	r2, #1
   d506a:	d101      	bne.n	d5070 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d506c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d506e:	6003      	str	r3, [r0, #0]
	}
   d5070:	2000      	movs	r0, #0
   d5072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5074:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5076:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5078:	f7ff f80b 	bl	d4092 <_Znwj>
   d507c:	4604      	mov	r4, r0
   d507e:	b150      	cbz	r0, d5096 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5080:	4631      	mov	r1, r6
   d5082:	f7ff fecb 	bl	d4e1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5086:	6930      	ldr	r0, [r6, #16]
   d5088:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d508c:	b108      	cbz	r0, d5092 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d508e:	f000 fd43 	bl	d5b18 <strdup>
        type_(type) {
   d5092:	6120      	str	r0, [r4, #16]
   d5094:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5096:	602c      	str	r4, [r5, #0]
	}
   d5098:	e7ea      	b.n	d5070 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d509a:	6804      	ldr	r4, [r0, #0]
   d509c:	2c00      	cmp	r4, #0
   d509e:	d0e7      	beq.n	d5070 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d50a0:	f104 0010 	add.w	r0, r4, #16
   d50a4:	f7ff fe3d 	bl	d4d22 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d50a8:	4620      	mov	r0, r4
   d50aa:	f7ff fd5e 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d50ae:	2118      	movs	r1, #24
   d50b0:	4620      	mov	r0, r4
   d50b2:	f000 fcda 	bl	d5a6a <_ZdlPvj>
   d50b6:	e7db      	b.n	d5070 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d50b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d50b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d50ba:	2300      	movs	r3, #0
   d50bc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d50be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d50c0:	4604      	mov	r4, r0
   d50c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d50c4:	b12b      	cbz	r3, d50d2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d50c6:	2202      	movs	r2, #2
   d50c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d50ca:	68eb      	ldr	r3, [r5, #12]
   d50cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d50ce:	68ab      	ldr	r3, [r5, #8]
   d50d0:	60a3      	str	r3, [r4, #8]
    }
   d50d2:	4620      	mov	r0, r4
   d50d4:	bd38      	pop	{r3, r4, r5, pc}

000d50d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d50d6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d50d8:	b570      	push	{r4, r5, r6, lr}
   d50da:	4604      	mov	r4, r0
	  switch (__op)
   d50dc:	d007      	beq.n	d50ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d50de:	2a03      	cmp	r2, #3
   d50e0:	d012      	beq.n	d5108 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d50e2:	2a01      	cmp	r2, #1
   d50e4:	d101      	bne.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d50e6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50e8:	6003      	str	r3, [r0, #0]
	}
   d50ea:	2000      	movs	r0, #0
   d50ec:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d50ee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d50f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d50f2:	f7fe ffce 	bl	d4092 <_Znwj>
   d50f6:	4605      	mov	r5, r0
   d50f8:	b120      	cbz	r0, d5104 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d50fa:	4631      	mov	r1, r6
   d50fc:	f7ff ffdc 	bl	d50b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5100:	7c33      	ldrb	r3, [r6, #16]
   d5102:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5104:	6025      	str	r5, [r4, #0]
	}
   d5106:	e7f0      	b.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5108:	6804      	ldr	r4, [r0, #0]
   d510a:	2c00      	cmp	r4, #0
   d510c:	d0ed      	beq.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d510e:	4620      	mov	r0, r4
   d5110:	f7ff fd2b 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5114:	2114      	movs	r1, #20
   d5116:	4620      	mov	r0, r4
   d5118:	f000 fca7 	bl	d5a6a <_ZdlPvj>
   d511c:	e7e5      	b.n	d50ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5120 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5120:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5122:	b089      	sub	sp, #36	; 0x24
   d5124:	4604      	mov	r4, r0
   d5126:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5128:	a801      	add	r0, sp, #4
   d512a:	4611      	mov	r1, r2
   d512c:	f7ff fe23 	bl	d4d76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5130:	b1a4      	cbz	r4, d515c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5132:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5134:	b11d      	cbz	r5, d513e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5136:	4628      	mov	r0, r5
   d5138:	f000 fcee 	bl	d5b18 <strdup>
   d513c:	4605      	mov	r5, r0
   d513e:	a801      	add	r0, sp, #4
   d5140:	a903      	add	r1, sp, #12
        type_(type) {
   d5142:	9503      	str	r5, [sp, #12]
   d5144:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5148:	f7ff fe78 	bl	d4e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d514c:	a803      	add	r0, sp, #12
   d514e:	f7ff fde8 	bl	d4d22 <_ZN8particle5ErrorD1Ev>
   d5152:	a802      	add	r0, sp, #8
   d5154:	f7ff fc35 	bl	d49c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5158:	b009      	add	sp, #36	; 0x24
   d515a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d515c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d515e:	2301      	movs	r3, #1
   d5160:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5164:	2a00      	cmp	r2, #0
   d5166:	d103      	bne.n	d5170 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5168:	e8c5 3f41 	strexb	r1, r3, [r5]
   d516c:	2900      	cmp	r1, #0
   d516e:	d1f7      	bne.n	d5160 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5170:	d1ef      	bne.n	d5152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5172:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5174:	f3bf 8f5b 	dmb	ish
   d5178:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d517a:	1d2b      	adds	r3, r5, #4
   d517c:	f3bf 8f5b 	dmb	ish
   d5180:	e853 6f00 	ldrex	r6, [r3]
   d5184:	e843 4200 	strex	r2, r4, [r3]
   d5188:	2a00      	cmp	r2, #0
   d518a:	d1f9      	bne.n	d5180 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d518c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5190:	2e00      	cmp	r6, #0
   d5192:	d0de      	beq.n	d5152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5194:	4620      	mov	r0, r4
   d5196:	f7ff f995 	bl	d44c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d519a:	4607      	mov	r7, r0
   d519c:	b160      	cbz	r0, d51b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d519e:	f105 010c 	add.w	r1, r5, #12
   d51a2:	4630      	mov	r0, r6
   d51a4:	f7ff fe16 	bl	d4dd4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d51a8:	4630      	mov	r0, r6
   d51aa:	f7ff fcde 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d51ae:	2110      	movs	r1, #16
   d51b0:	4630      	mov	r0, r6
   d51b2:	f000 fc5a 	bl	d5a6a <_ZdlPvj>
   d51b6:	e7cc      	b.n	d5152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d51b8:	4631      	mov	r1, r6
   d51ba:	a803      	add	r0, sp, #12
   d51bc:	f7ff ff7c 	bl	d50b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d51c0:	7b2b      	ldrb	r3, [r5, #12]
   d51c2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d51c6:	2010      	movs	r0, #16
   d51c8:	f7fe ff63 	bl	d4092 <_Znwj>
   d51cc:	4605      	mov	r5, r0
   d51ce:	b1d0      	cbz	r0, d5206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d51d0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51d2:	2014      	movs	r0, #20
   d51d4:	f7fe ff5d 	bl	d4092 <_Znwj>
   d51d8:	4604      	mov	r4, r0
   d51da:	b178      	cbz	r0, d51fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d51dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d51de:	4601      	mov	r1, r0
   d51e0:	a803      	add	r0, sp, #12
   d51e2:	f7ff fcd1 	bl	d4b88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d51e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d51ea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51ec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d51ee:	9205      	str	r2, [sp, #20]
   d51f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d51f2:	60e3      	str	r3, [r4, #12]
   d51f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d51f8:	9206      	str	r2, [sp, #24]
   d51fa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d51fc:	4b06      	ldr	r3, [pc, #24]	; (d5218 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d51fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5200:	4b06      	ldr	r3, [pc, #24]	; (d521c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5202:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5204:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5206:	a803      	add	r0, sp, #12
   d5208:	f7ff fcaf 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d520c:	2200      	movs	r2, #0
   d520e:	4629      	mov	r1, r5
   d5210:	4803      	ldr	r0, [pc, #12]	; (d5220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5212:	f7ff f95f 	bl	d44d4 <application_thread_invoke>
   d5216:	e7c7      	b.n	d51a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5218:	000d4de7 	.word	0x000d4de7
   d521c:	000d50d7 	.word	0x000d50d7
   d5220:	000d5511 	.word	0x000d5511

000d5224 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5224:	4770      	bx	lr

000d5226 <_ZN9IPAddressD0Ev>:
   d5226:	b510      	push	{r4, lr}
   d5228:	2118      	movs	r1, #24
   d522a:	4604      	mov	r4, r0
   d522c:	f000 fc1d 	bl	d5a6a <_ZdlPvj>
   d5230:	4620      	mov	r0, r4
   d5232:	bd10      	pop	{r4, pc}

000d5234 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5234:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5236:	7d03      	ldrb	r3, [r0, #20]
   d5238:	2b06      	cmp	r3, #6
{
   d523a:	b08d      	sub	sp, #52	; 0x34
   d523c:	460e      	mov	r6, r1
   d523e:	f100 0704 	add.w	r7, r0, #4
   d5242:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5246:	d012      	beq.n	d526e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5248:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d524c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5250:	220a      	movs	r2, #10
   d5252:	4630      	mov	r0, r6
   d5254:	f7ff fc1b 	bl	d4a8e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5258:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d525a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d525c:	d019      	beq.n	d5292 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d525e:	2c00      	cmp	r4, #0
   d5260:	d0f4      	beq.n	d524c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5262:	212e      	movs	r1, #46	; 0x2e
   d5264:	4630      	mov	r0, r6
   d5266:	f7ff fbf9 	bl	d4a5c <_ZN5Print5printEc>
   d526a:	4404      	add	r4, r0
   d526c:	e7ee      	b.n	d524c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d526e:	232f      	movs	r3, #47	; 0x2f
   d5270:	466a      	mov	r2, sp
   d5272:	4639      	mov	r1, r7
   d5274:	200a      	movs	r0, #10
		buf[0] = 0;
   d5276:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d527a:	f7ff f843 	bl	d4304 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d527e:	4668      	mov	r0, sp
   d5280:	f000 fc67 	bl	d5b52 <strlen>
   d5284:	6833      	ldr	r3, [r6, #0]
   d5286:	4602      	mov	r2, r0
   d5288:	68db      	ldr	r3, [r3, #12]
   d528a:	4669      	mov	r1, sp
   d528c:	4630      	mov	r0, r6
   d528e:	4798      	blx	r3
   d5290:	4604      	mov	r4, r0
    }
    return n;
}
   d5292:	4620      	mov	r0, r4
   d5294:	b00d      	add	sp, #52	; 0x34
   d5296:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5298 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5298:	b510      	push	{r4, lr}
   d529a:	4b05      	ldr	r3, [pc, #20]	; (d52b0 <_ZN9IPAddressC1Ev+0x18>)
   d529c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d529e:	2211      	movs	r2, #17
   d52a0:	f840 3b04 	str.w	r3, [r0], #4
   d52a4:	2100      	movs	r1, #0
   d52a6:	f000 fc03 	bl	d5ab0 <memset>
}
   d52aa:	4620      	mov	r0, r4
   d52ac:	bd10      	pop	{r4, pc}
   d52ae:	bf00      	nop
   d52b0:	000d5c2c 	.word	0x000d5c2c

000d52b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d52b4:	4603      	mov	r3, r0
   d52b6:	4a07      	ldr	r2, [pc, #28]	; (d52d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d52b8:	b510      	push	{r4, lr}
   d52ba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d52be:	f101 0210 	add.w	r2, r1, #16
   d52c2:	f851 4b04 	ldr.w	r4, [r1], #4
   d52c6:	f843 4b04 	str.w	r4, [r3], #4
   d52ca:	4291      	cmp	r1, r2
   d52cc:	d1f9      	bne.n	d52c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d52ce:	780a      	ldrb	r2, [r1, #0]
   d52d0:	701a      	strb	r2, [r3, #0]
}
   d52d2:	bd10      	pop	{r4, pc}
   d52d4:	000d5c2c 	.word	0x000d5c2c

000d52d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d52d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52da:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d52e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d52ea:	2304      	movs	r3, #4
   d52ec:	6041      	str	r1, [r0, #4]
   d52ee:	7503      	strb	r3, [r0, #20]
}
   d52f0:	bd10      	pop	{r4, pc}

000d52f2 <_ZN9IPAddressaSEPKh>:
{
   d52f2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d52f4:	78cb      	ldrb	r3, [r1, #3]
   d52f6:	9300      	str	r3, [sp, #0]
   d52f8:	788b      	ldrb	r3, [r1, #2]
   d52fa:	784a      	ldrb	r2, [r1, #1]
   d52fc:	7809      	ldrb	r1, [r1, #0]
   d52fe:	f7ff ffeb 	bl	d52d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5302:	b002      	add	sp, #8
   d5304:	bd10      	pop	{r4, pc}

000d5306 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5306:	7441      	strb	r1, [r0, #17]
}
   d5308:	4770      	bx	lr

000d530a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d530a:	4770      	bx	lr

000d530c <_ZN9USBSerial4readEv>:
{
   d530c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d530e:	2100      	movs	r1, #0
   d5310:	7c00      	ldrb	r0, [r0, #16]
   d5312:	f7ff f8a7 	bl	d4464 <HAL_USB_USART_Receive_Data>
}
   d5316:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d531a:	bd08      	pop	{r3, pc}

000d531c <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d531c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d531e:	2101      	movs	r1, #1
   d5320:	7c00      	ldrb	r0, [r0, #16]
   d5322:	f7ff f89f 	bl	d4464 <HAL_USB_USART_Receive_Data>
}
   d5326:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d532a:	bd08      	pop	{r3, pc}

000d532c <_ZN9USBSerial17availableForWriteEv>:
{
   d532c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d532e:	7c00      	ldrb	r0, [r0, #16]
   d5330:	f7ff f890 	bl	d4454 <HAL_USB_USART_Available_Data_For_Write>
}
   d5334:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5338:	bd08      	pop	{r3, pc}

000d533a <_ZN9USBSerial9availableEv>:
{
   d533a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d533c:	7c00      	ldrb	r0, [r0, #16]
   d533e:	f7ff f881 	bl	d4444 <HAL_USB_USART_Available_Data>
}
   d5342:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5346:	bd08      	pop	{r3, pc}

000d5348 <_ZN9USBSerial5writeEh>:
{
   d5348:	b513      	push	{r0, r1, r4, lr}
   d534a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d534c:	7c00      	ldrb	r0, [r0, #16]
{
   d534e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5350:	f7ff f880 	bl	d4454 <HAL_USB_USART_Available_Data_For_Write>
   d5354:	2800      	cmp	r0, #0
   d5356:	9901      	ldr	r1, [sp, #4]
   d5358:	dc01      	bgt.n	d535e <_ZN9USBSerial5writeEh+0x16>
   d535a:	7c60      	ldrb	r0, [r4, #17]
   d535c:	b120      	cbz	r0, d5368 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d535e:	7c20      	ldrb	r0, [r4, #16]
   d5360:	f7ff f888 	bl	d4474 <HAL_USB_USART_Send_Data>
   d5364:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5368:	b002      	add	sp, #8
   d536a:	bd10      	pop	{r4, pc}

000d536c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d536c:	7c00      	ldrb	r0, [r0, #16]
   d536e:	f7ff b889 	b.w	d4484 <HAL_USB_USART_Flush_Data>

000d5372 <_ZN9USBSerialD0Ev>:
   d5372:	b510      	push	{r4, lr}
   d5374:	2114      	movs	r1, #20
   d5376:	4604      	mov	r4, r0
   d5378:	f000 fb77 	bl	d5a6a <_ZdlPvj>
   d537c:	4620      	mov	r0, r4
   d537e:	bd10      	pop	{r4, pc}

000d5380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5380:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5386:	4604      	mov	r4, r0
   d5388:	4608      	mov	r0, r1
   d538a:	2100      	movs	r1, #0
   d538c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5390:	4b04      	ldr	r3, [pc, #16]	; (d53a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5392:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5394:	2301      	movs	r3, #1
  _serial = serial;
   d5396:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5398:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d539a:	4611      	mov	r1, r2
   d539c:	f7ff f842 	bl	d4424 <HAL_USB_USART_Init>
}
   d53a0:	4620      	mov	r0, r4
   d53a2:	bd10      	pop	{r4, pc}
   d53a4:	000d5c40 	.word	0x000d5c40

000d53a8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d53a8:	7c00      	ldrb	r0, [r0, #16]
   d53aa:	2200      	movs	r2, #0
   d53ac:	f7ff b842 	b.w	d4434 <HAL_USB_USART_Begin>

000d53b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d53b2:	2214      	movs	r2, #20
{
   d53b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d53b6:	2100      	movs	r1, #0
   d53b8:	f000 fb7a 	bl	d5ab0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d53bc:	4620      	mov	r0, r4
   d53be:	bd10      	pop	{r4, pc}

000d53c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d53c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53c2:	4c10      	ldr	r4, [pc, #64]	; (d5404 <_Z16_fetch_usbserialv+0x44>)
{
   d53c4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d53c6:	a803      	add	r0, sp, #12
   d53c8:	f7ff fff2 	bl	d53b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53cc:	7821      	ldrb	r1, [r4, #0]
   d53ce:	f3bf 8f5b 	dmb	ish
   d53d2:	f011 0101 	ands.w	r1, r1, #1
   d53d6:	d111      	bne.n	d53fc <_Z16_fetch_usbserialv+0x3c>
   d53d8:	4620      	mov	r0, r4
   d53da:	9101      	str	r1, [sp, #4]
   d53dc:	f7fe fe5f 	bl	d409e <__cxa_guard_acquire>
   d53e0:	9901      	ldr	r1, [sp, #4]
   d53e2:	b158      	cbz	r0, d53fc <_Z16_fetch_usbserialv+0x3c>
   d53e4:	aa03      	add	r2, sp, #12
   d53e6:	4808      	ldr	r0, [pc, #32]	; (d5408 <_Z16_fetch_usbserialv+0x48>)
   d53e8:	f7ff ffca 	bl	d5380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d53ec:	4620      	mov	r0, r4
   d53ee:	f7fe fe5b 	bl	d40a8 <__cxa_guard_release>
   d53f2:	4a06      	ldr	r2, [pc, #24]	; (d540c <_Z16_fetch_usbserialv+0x4c>)
   d53f4:	4906      	ldr	r1, [pc, #24]	; (d5410 <_Z16_fetch_usbserialv+0x50>)
   d53f6:	4804      	ldr	r0, [pc, #16]	; (d5408 <_Z16_fetch_usbserialv+0x48>)
   d53f8:	f000 fb32 	bl	d5a60 <__aeabi_atexit>
	return _usbserial;
}
   d53fc:	4802      	ldr	r0, [pc, #8]	; (d5408 <_Z16_fetch_usbserialv+0x48>)
   d53fe:	b008      	add	sp, #32
   d5400:	bd10      	pop	{r4, pc}
   d5402:	bf00      	nop
   d5404:	2003e680 	.word	0x2003e680
   d5408:	2003e684 	.word	0x2003e684
   d540c:	2003e5f4 	.word	0x2003e5f4
   d5410:	000d530b 	.word	0x000d530b

000d5414 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5414:	4770      	bx	lr

000d5416 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5416:	7441      	strb	r1, [r0, #17]
}
   d5418:	4770      	bx	lr

000d541a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d541a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d541c:	7c00      	ldrb	r0, [r0, #16]
   d541e:	f7fe ffb1 	bl	d4384 <hal_usart_available_data_for_write>
}
   d5422:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5426:	bd08      	pop	{r3, pc}

000d5428 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5428:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d542a:	7c00      	ldrb	r0, [r0, #16]
   d542c:	f7fe ff82 	bl	d4334 <hal_usart_available>
}
   d5430:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5434:	bd08      	pop	{r3, pc}

000d5436 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5436:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5438:	7c00      	ldrb	r0, [r0, #16]
   d543a:	f7fe ff8b 	bl	d4354 <hal_usart_peek>
}
   d543e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5442:	bd08      	pop	{r3, pc}

000d5444 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5444:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5446:	7c00      	ldrb	r0, [r0, #16]
   d5448:	f7fe ff7c 	bl	d4344 <hal_usart_read>
}
   d544c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5450:	bd08      	pop	{r3, pc}

000d5452 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5452:	7c00      	ldrb	r0, [r0, #16]
   d5454:	f7fe bf86 	b.w	d4364 <hal_usart_flush>

000d5458 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5458:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d545a:	7c45      	ldrb	r5, [r0, #17]
{
   d545c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d545e:	b12d      	cbz	r5, d546c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5460:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5462:	b003      	add	sp, #12
   d5464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5468:	f7fe bf5c 	b.w	d4324 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d546c:	7c00      	ldrb	r0, [r0, #16]
   d546e:	9101      	str	r1, [sp, #4]
   d5470:	f7fe ff88 	bl	d4384 <hal_usart_available_data_for_write>
   d5474:	2800      	cmp	r0, #0
   d5476:	9901      	ldr	r1, [sp, #4]
   d5478:	dcf2      	bgt.n	d5460 <_ZN11USARTSerial5writeEh+0x8>
}
   d547a:	4628      	mov	r0, r5
   d547c:	b003      	add	sp, #12
   d547e:	bd30      	pop	{r4, r5, pc}

000d5480 <_ZN11USARTSerialD0Ev>:
   d5480:	b510      	push	{r4, lr}
   d5482:	2114      	movs	r1, #20
   d5484:	4604      	mov	r4, r0
   d5486:	f000 faf0 	bl	d5a6a <_ZdlPvj>
   d548a:	4620      	mov	r0, r4
   d548c:	bd10      	pop	{r4, pc}
	...

000d5490 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5490:	b510      	push	{r4, lr}
   d5492:	f04f 0c00 	mov.w	ip, #0
   d5496:	4604      	mov	r4, r0
   d5498:	4608      	mov	r0, r1
   d549a:	4611      	mov	r1, r2
   d549c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d54a0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d54a4:	4a04      	ldr	r2, [pc, #16]	; (d54b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d54a6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d54a8:	2201      	movs	r2, #1
  _serial = serial;
   d54aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d54ac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d54ae:	461a      	mov	r2, r3
   d54b0:	f7fe ff30 	bl	d4314 <hal_usart_init>
}
   d54b4:	4620      	mov	r0, r4
   d54b6:	bd10      	pop	{r4, pc}
   d54b8:	000d5c70 	.word	0x000d5c70

000d54bc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54bc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54be:	4c0e      	ldr	r4, [pc, #56]	; (d54f8 <_Z22__fetch_global_Serial1v+0x3c>)
   d54c0:	7821      	ldrb	r1, [r4, #0]
   d54c2:	f3bf 8f5b 	dmb	ish
   d54c6:	f011 0101 	ands.w	r1, r1, #1
   d54ca:	d112      	bne.n	d54f2 <_Z22__fetch_global_Serial1v+0x36>
   d54cc:	4620      	mov	r0, r4
   d54ce:	9101      	str	r1, [sp, #4]
   d54d0:	f7fe fde5 	bl	d409e <__cxa_guard_acquire>
   d54d4:	9901      	ldr	r1, [sp, #4]
   d54d6:	b160      	cbz	r0, d54f2 <_Z22__fetch_global_Serial1v+0x36>
   d54d8:	4a08      	ldr	r2, [pc, #32]	; (d54fc <_Z22__fetch_global_Serial1v+0x40>)
   d54da:	4b09      	ldr	r3, [pc, #36]	; (d5500 <_Z22__fetch_global_Serial1v+0x44>)
   d54dc:	4809      	ldr	r0, [pc, #36]	; (d5504 <_Z22__fetch_global_Serial1v+0x48>)
   d54de:	f7ff ffd7 	bl	d5490 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d54e2:	4620      	mov	r0, r4
   d54e4:	f7fe fde0 	bl	d40a8 <__cxa_guard_release>
   d54e8:	4a07      	ldr	r2, [pc, #28]	; (d5508 <_Z22__fetch_global_Serial1v+0x4c>)
   d54ea:	4908      	ldr	r1, [pc, #32]	; (d550c <_Z22__fetch_global_Serial1v+0x50>)
   d54ec:	4805      	ldr	r0, [pc, #20]	; (d5504 <_Z22__fetch_global_Serial1v+0x48>)
   d54ee:	f000 fab7 	bl	d5a60 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d54f2:	4804      	ldr	r0, [pc, #16]	; (d5504 <_Z22__fetch_global_Serial1v+0x48>)
   d54f4:	b002      	add	sp, #8
   d54f6:	bd10      	pop	{r4, pc}
   d54f8:	2003e698 	.word	0x2003e698
   d54fc:	2003e69c 	.word	0x2003e69c
   d5500:	2003e720 	.word	0x2003e720
   d5504:	2003e7a4 	.word	0x2003e7a4
   d5508:	2003e5f4 	.word	0x2003e5f4
   d550c:	000d5415 	.word	0x000d5415

000d5510 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5510:	b510      	push	{r4, lr}
      if (_M_empty())
   d5512:	6883      	ldr	r3, [r0, #8]
   d5514:	4604      	mov	r4, r0
   d5516:	b90b      	cbnz	r3, d551c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5518:	f000 faab 	bl	d5a72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d551c:	68c3      	ldr	r3, [r0, #12]
   d551e:	4798      	blx	r3
      if (_M_manager)
   d5520:	68a3      	ldr	r3, [r4, #8]
   d5522:	b11b      	cbz	r3, d552c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5524:	2203      	movs	r2, #3
   d5526:	4621      	mov	r1, r4
   d5528:	4620      	mov	r0, r4
   d552a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d552c:	4620      	mov	r0, r4
   d552e:	2110      	movs	r1, #16
}
   d5530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5534:	f000 ba99 	b.w	d5a6a <_ZdlPvj>

000d5538 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5538:	4770      	bx	lr

000d553a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d553a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d553c:	4606      	mov	r6, r0
   d553e:	4615      	mov	r5, r2
   d5540:	460c      	mov	r4, r1
   d5542:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5544:	42bc      	cmp	r4, r7
   d5546:	d006      	beq.n	d5556 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5548:	6833      	ldr	r3, [r6, #0]
   d554a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d554e:	689b      	ldr	r3, [r3, #8]
   d5550:	4630      	mov	r0, r6
   d5552:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5554:	e7f6      	b.n	d5544 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5556:	4628      	mov	r0, r5
   d5558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d555a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d555a:	7c00      	ldrb	r0, [r0, #16]
   d555c:	2200      	movs	r2, #0
   d555e:	f7fe bf19 	b.w	d4394 <hal_i2c_write>

000d5562 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5562:	7c00      	ldrb	r0, [r0, #16]
   d5564:	2100      	movs	r1, #0
   d5566:	f7fe bf1d 	b.w	d43a4 <hal_i2c_available>

000d556a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d556a:	7c00      	ldrb	r0, [r0, #16]
   d556c:	2100      	movs	r1, #0
   d556e:	f7fe bf21 	b.w	d43b4 <hal_i2c_read>

000d5572 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5572:	7c00      	ldrb	r0, [r0, #16]
   d5574:	2100      	movs	r1, #0
   d5576:	f7fe bf25 	b.w	d43c4 <hal_i2c_peek>

000d557a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d557a:	7c00      	ldrb	r0, [r0, #16]
   d557c:	2100      	movs	r1, #0
   d557e:	f7fe bf29 	b.w	d43d4 <hal_i2c_flush>

000d5582 <_ZN7TwoWireD0Ev>:
   d5582:	b510      	push	{r4, lr}
   d5584:	2114      	movs	r1, #20
   d5586:	4604      	mov	r4, r0
   d5588:	f000 fa6f 	bl	d5a6a <_ZdlPvj>
   d558c:	4620      	mov	r0, r4
   d558e:	bd10      	pop	{r4, pc}

000d5590 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5590:	b510      	push	{r4, lr}
   d5592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5596:	4604      	mov	r4, r0
   d5598:	4608      	mov	r0, r1
   d559a:	2100      	movs	r1, #0
   d559c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d55a0:	4b03      	ldr	r3, [pc, #12]	; (d55b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d55a2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d55a4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d55a6:	4611      	mov	r1, r2
   d55a8:	f7fe ff24 	bl	d43f4 <hal_i2c_init>
}
   d55ac:	4620      	mov	r0, r4
   d55ae:	bd10      	pop	{r4, pc}
   d55b0:	000d5ca0 	.word	0x000d5ca0

000d55b4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d55b4:	2200      	movs	r2, #0
   d55b6:	6840      	ldr	r0, [r0, #4]
   d55b8:	4611      	mov	r1, r2
   d55ba:	f7fe bfc7 	b.w	d454c <network_ready>

000d55be <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55be:	2200      	movs	r2, #0
   d55c0:	6840      	ldr	r0, [r0, #4]
   d55c2:	4611      	mov	r1, r2
   d55c4:	f7fe bfe2 	b.w	d458c <network_listening>

000d55c8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d55c8:	2200      	movs	r2, #0
   d55ca:	6840      	ldr	r0, [r0, #4]
   d55cc:	4611      	mov	r1, r2
   d55ce:	f7fe bfed 	b.w	d45ac <network_get_listen_timeout>

000d55d2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d55d2:	6840      	ldr	r0, [r0, #4]
   d55d4:	2200      	movs	r2, #0
   d55d6:	f7fe bfe1 	b.w	d459c <network_set_listen_timeout>

000d55da <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d55da:	6840      	ldr	r0, [r0, #4]
   d55dc:	2200      	movs	r2, #0
   d55de:	f081 0101 	eor.w	r1, r1, #1
   d55e2:	f7fe bfcb 	b.w	d457c <network_listen>

000d55e6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d55e6:	2300      	movs	r3, #0
   d55e8:	6840      	ldr	r0, [r0, #4]
   d55ea:	461a      	mov	r2, r3
   d55ec:	4619      	mov	r1, r3
   d55ee:	f7fe bfbd 	b.w	d456c <network_off>

000d55f2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d55f2:	2300      	movs	r3, #0
   d55f4:	6840      	ldr	r0, [r0, #4]
   d55f6:	461a      	mov	r2, r3
   d55f8:	4619      	mov	r1, r3
   d55fa:	f7fe bfaf 	b.w	d455c <network_on>

000d55fe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d55fe:	2200      	movs	r2, #0
   d5600:	6840      	ldr	r0, [r0, #4]
   d5602:	4611      	mov	r1, r2
   d5604:	f7fe bf92 	b.w	d452c <network_connecting>

000d5608 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5608:	6840      	ldr	r0, [r0, #4]
   d560a:	2200      	movs	r2, #0
   d560c:	2102      	movs	r1, #2
   d560e:	f7fe bf95 	b.w	d453c <network_disconnect>

000d5612 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5612:	2300      	movs	r3, #0
   d5614:	6840      	ldr	r0, [r0, #4]
   d5616:	461a      	mov	r2, r3
   d5618:	f7fe bf80 	b.w	d451c <network_connect>

000d561c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d561c:	4b02      	ldr	r3, [pc, #8]	; (d5628 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d561e:	2204      	movs	r2, #4
   d5620:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5622:	4a02      	ldr	r2, [pc, #8]	; (d562c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5624:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5626:	4770      	bx	lr
   d5628:	2003e7b8 	.word	0x2003e7b8
   d562c:	000d5cc8 	.word	0x000d5cc8

000d5630 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5630:	2300      	movs	r3, #0
   d5632:	6840      	ldr	r0, [r0, #4]
   d5634:	461a      	mov	r2, r3
   d5636:	f7fe bf71 	b.w	d451c <network_connect>

000d563a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d563a:	6840      	ldr	r0, [r0, #4]
   d563c:	2200      	movs	r2, #0
   d563e:	2102      	movs	r1, #2
   d5640:	f7fe bf7c 	b.w	d453c <network_disconnect>

000d5644 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5644:	2200      	movs	r2, #0
   d5646:	6840      	ldr	r0, [r0, #4]
   d5648:	4611      	mov	r1, r2
   d564a:	f7fe bf6f 	b.w	d452c <network_connecting>

000d564e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d564e:	2200      	movs	r2, #0
   d5650:	6840      	ldr	r0, [r0, #4]
   d5652:	4611      	mov	r1, r2
   d5654:	f7fe bf7a 	b.w	d454c <network_ready>

000d5658 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5658:	2300      	movs	r3, #0
   d565a:	6840      	ldr	r0, [r0, #4]
   d565c:	461a      	mov	r2, r3
   d565e:	4619      	mov	r1, r3
   d5660:	f7fe bf7c 	b.w	d455c <network_on>

000d5664 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5664:	2300      	movs	r3, #0
   d5666:	6840      	ldr	r0, [r0, #4]
   d5668:	461a      	mov	r2, r3
   d566a:	4619      	mov	r1, r3
   d566c:	f7fe bf7e 	b.w	d456c <network_off>

000d5670 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5670:	6840      	ldr	r0, [r0, #4]
   d5672:	2200      	movs	r2, #0
   d5674:	f081 0101 	eor.w	r1, r1, #1
   d5678:	f7fe bf80 	b.w	d457c <network_listen>

000d567c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d567c:	6840      	ldr	r0, [r0, #4]
   d567e:	2200      	movs	r2, #0
   d5680:	f7fe bf8c 	b.w	d459c <network_set_listen_timeout>

000d5684 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5684:	2200      	movs	r2, #0
   d5686:	6840      	ldr	r0, [r0, #4]
   d5688:	4611      	mov	r1, r2
   d568a:	f7fe bf8f 	b.w	d45ac <network_get_listen_timeout>

000d568e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d568e:	2200      	movs	r2, #0
   d5690:	6840      	ldr	r0, [r0, #4]
   d5692:	4611      	mov	r1, r2
   d5694:	f7fe bf7a 	b.w	d458c <network_listening>

000d5698 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d569c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d569e:	b095      	sub	sp, #84	; 0x54
   d56a0:	4616      	mov	r6, r2
   d56a2:	460d      	mov	r5, r1
   d56a4:	4607      	mov	r7, r0
    IPAddress addr;
   d56a6:	f7ff fdf7 	bl	d5298 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d56aa:	4621      	mov	r1, r4
   d56ac:	2218      	movs	r2, #24
   d56ae:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d56b0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d56b2:	f000 f9fd 	bl	d5ab0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d56b6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d56b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d56bc:	4621      	mov	r1, r4
   d56be:	466b      	mov	r3, sp
   d56c0:	aa0c      	add	r2, sp, #48	; 0x30
   d56c2:	4630      	mov	r0, r6
   d56c4:	f7fe fdd6 	bl	d4274 <netdb_getaddrinfo>
    if (!r) {
   d56c8:	4604      	mov	r4, r0
   d56ca:	2800      	cmp	r0, #0
   d56cc:	d146      	bne.n	d575c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d56ce:	4602      	mov	r2, r0
   d56d0:	2101      	movs	r1, #1
   d56d2:	6868      	ldr	r0, [r5, #4]
   d56d4:	f7fe ff3a 	bl	d454c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56d8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d56da:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56dc:	4622      	mov	r2, r4
   d56de:	6868      	ldr	r0, [r5, #4]
   d56e0:	f7fe ff34 	bl	d454c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56e4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56e6:	4681      	mov	r9, r0
        bool ok = false;
   d56e8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56ea:	2e00      	cmp	r6, #0
   d56ec:	d036      	beq.n	d575c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d56ee:	2900      	cmp	r1, #0
   d56f0:	d134      	bne.n	d575c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d56f2:	6873      	ldr	r3, [r6, #4]
   d56f4:	2b02      	cmp	r3, #2
   d56f6:	d003      	beq.n	d5700 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d56f8:	2b0a      	cmp	r3, #10
   d56fa:	d00b      	beq.n	d5714 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56fc:	69f6      	ldr	r6, [r6, #28]
   d56fe:	e7f4      	b.n	d56ea <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5700:	f1b8 0f00 	cmp.w	r8, #0
   d5704:	d004      	beq.n	d5710 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5706:	6971      	ldr	r1, [r6, #20]
   d5708:	4638      	mov	r0, r7
   d570a:	3104      	adds	r1, #4
   d570c:	f7ff fdf1 	bl	d52f2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5710:	4641      	mov	r1, r8
   d5712:	e7f3      	b.n	d56fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5714:	f1b9 0f00 	cmp.w	r9, #0
   d5718:	d101      	bne.n	d571e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d571a:	4649      	mov	r1, r9
   d571c:	e7ee      	b.n	d56fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d571e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5720:	2210      	movs	r2, #16
   d5722:	a801      	add	r0, sp, #4
   d5724:	f000 f9c4 	bl	d5ab0 <memset>
                    a.v = 6;
   d5728:	2306      	movs	r3, #6
   d572a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d572e:	ad01      	add	r5, sp, #4
   d5730:	f104 0308 	add.w	r3, r4, #8
   d5734:	3418      	adds	r4, #24
   d5736:	6818      	ldr	r0, [r3, #0]
   d5738:	6859      	ldr	r1, [r3, #4]
   d573a:	462a      	mov	r2, r5
   d573c:	c203      	stmia	r2!, {r0, r1}
   d573e:	3308      	adds	r3, #8
   d5740:	42a3      	cmp	r3, r4
   d5742:	4615      	mov	r5, r2
   d5744:	d1f7      	bne.n	d5736 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5746:	a901      	add	r1, sp, #4
   d5748:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d574a:	ad07      	add	r5, sp, #28
   d574c:	f7ff fdb2 	bl	d52b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5752:	1d3c      	adds	r4, r7, #4
   d5754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5756:	682b      	ldr	r3, [r5, #0]
   d5758:	7023      	strb	r3, [r4, #0]
   d575a:	e7de      	b.n	d571a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d575c:	9800      	ldr	r0, [sp, #0]
   d575e:	f7fe fd81 	bl	d4264 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5762:	4638      	mov	r0, r7
   d5764:	b015      	add	sp, #84	; 0x54
   d5766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d576c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d576c:	4b02      	ldr	r3, [pc, #8]	; (d5778 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d576e:	4a03      	ldr	r2, [pc, #12]	; (d577c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5770:	601a      	str	r2, [r3, #0]
   d5772:	2200      	movs	r2, #0
   d5774:	605a      	str	r2, [r3, #4]

} // spark
   d5776:	4770      	bx	lr
   d5778:	2003e7c0 	.word	0x2003e7c0
   d577c:	000d5cfc 	.word	0x000d5cfc

000d5780 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   d5780:	4770      	bx	lr

000d5782 <_ZN5spark16JSONBufferWriterD0Ev>:
   d5782:	b510      	push	{r4, lr}
   d5784:	2114      	movs	r1, #20
   d5786:	4604      	mov	r4, r0
   d5788:	f000 f96f 	bl	d5a6a <_ZdlPvj>
   d578c:	4620      	mov	r0, r4
   d578e:	bd10      	pop	{r4, pc}

000d5790 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d5790:	b538      	push	{r3, r4, r5, lr}
   d5792:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   d5794:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   d5798:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d579a:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   d579c:	d207      	bcs.n	d57ae <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   d579e:	1ad2      	subs	r2, r2, r3
   d57a0:	6880      	ldr	r0, [r0, #8]
   d57a2:	42aa      	cmp	r2, r5
   d57a4:	bf28      	it	cs
   d57a6:	462a      	movcs	r2, r5
   d57a8:	4418      	add	r0, r3
   d57aa:	f000 f973 	bl	d5a94 <memcpy>
    }
    n_ += size;
   d57ae:	6922      	ldr	r2, [r4, #16]
   d57b0:	442a      	add	r2, r5
   d57b2:	6122      	str	r2, [r4, #16]
}
   d57b4:	bd38      	pop	{r3, r4, r5, pc}

000d57b6 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   d57b6:	b40e      	push	{r1, r2, r3}
   d57b8:	b517      	push	{r0, r1, r2, r4, lr}
   d57ba:	ab05      	add	r3, sp, #20
   d57bc:	4604      	mov	r4, r0
   d57be:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d57c2:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   d57c4:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d57c6:	6903      	ldr	r3, [r0, #16]
   d57c8:	6880      	ldr	r0, [r0, #8]
   d57ca:	428b      	cmp	r3, r1
   d57cc:	bf38      	it	cc
   d57ce:	1ac9      	subcc	r1, r1, r3
   d57d0:	4418      	add	r0, r3
   d57d2:	bf28      	it	cs
   d57d4:	2100      	movcs	r1, #0
   d57d6:	9b01      	ldr	r3, [sp, #4]
   d57d8:	f7fe ff30 	bl	d463c <vsnprintf>
    va_end(args);
    n_ += n;
   d57dc:	6923      	ldr	r3, [r4, #16]
   d57de:	4418      	add	r0, r3
   d57e0:	6120      	str	r0, [r4, #16]
}
   d57e2:	b003      	add	sp, #12
   d57e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d57e8:	b003      	add	sp, #12
   d57ea:	4770      	bx	lr

000d57ec <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d57ec:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d57ee:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d57f0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d57f4:	689b      	ldr	r3, [r3, #8]
   d57f6:	2201      	movs	r2, #1
   d57f8:	f10d 0107 	add.w	r1, sp, #7
   d57fc:	4798      	blx	r3
}
   d57fe:	b003      	add	sp, #12
   d5800:	f85d fb04 	ldr.w	pc, [sp], #4

000d5804 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d5804:	b510      	push	{r4, lr}
    write('}');
   d5806:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d5808:	4604      	mov	r4, r0
    write('}');
   d580a:	f7ff ffef 	bl	d57ec <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d580e:	2301      	movs	r3, #1
   d5810:	7123      	strb	r3, [r4, #4]
}
   d5812:	4620      	mov	r0, r4
   d5814:	bd10      	pop	{r4, pc}

000d5816 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   d5816:	b508      	push	{r3, lr}
    switch (state_) {
   d5818:	7903      	ldrb	r3, [r0, #4]
   d581a:	2b01      	cmp	r3, #1
   d581c:	d002      	beq.n	d5824 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d581e:	2b02      	cmp	r3, #2
   d5820:	d004      	beq.n	d582c <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   d5822:	bd08      	pop	{r3, pc}
        write(',');
   d5824:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d5826:	f7ff ffe1 	bl	d57ec <_ZN5spark10JSONWriter5writeEc>
}
   d582a:	e7fa      	b.n	d5822 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d582c:	213a      	movs	r1, #58	; 0x3a
   d582e:	e7fa      	b.n	d5826 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d5830 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d5830:	b510      	push	{r4, lr}
   d5832:	4604      	mov	r4, r0
    writeSeparator();
   d5834:	f7ff ffef 	bl	d5816 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d5838:	4620      	mov	r0, r4
   d583a:	217b      	movs	r1, #123	; 0x7b
   d583c:	f7ff ffd6 	bl	d57ec <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d5840:	2300      	movs	r3, #0
   d5842:	7123      	strb	r3, [r4, #4]
}
   d5844:	4620      	mov	r0, r4
   d5846:	bd10      	pop	{r4, pc}

000d5848 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d5848:	b513      	push	{r0, r1, r4, lr}
   d584a:	4604      	mov	r4, r0
   d584c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d584e:	f7ff ffe2 	bl	d5816 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d5852:	6823      	ldr	r3, [r4, #0]
   d5854:	9a01      	ldr	r2, [sp, #4]
   d5856:	68db      	ldr	r3, [r3, #12]
   d5858:	4903      	ldr	r1, [pc, #12]	; (d5868 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d585a:	4620      	mov	r0, r4
   d585c:	4798      	blx	r3
    state_ = NEXT;
   d585e:	2301      	movs	r3, #1
}
   d5860:	4620      	mov	r0, r4
    state_ = NEXT;
   d5862:	7123      	strb	r3, [r4, #4]
}
   d5864:	b002      	add	sp, #8
   d5866:	bd10      	pop	{r4, pc}
   d5868:	000d5d28 	.word	0x000d5d28

000d586c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5870:	460d      	mov	r5, r1
   d5872:	4617      	mov	r7, r2
    write('"');
   d5874:	2122      	movs	r1, #34	; 0x22
                printf("u%04x", (unsigned)c);
   d5876:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d5918 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d587a:	4604      	mov	r4, r0
    const char* const end = str + size;
   d587c:	442f      	add	r7, r5
    write('"');
   d587e:	f7ff ffb5 	bl	d57ec <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d5882:	4629      	mov	r1, r5
    while (s != end) {
   d5884:	42bd      	cmp	r5, r7
   d5886:	462a      	mov	r2, r5
   d5888:	d038      	beq.n	d58fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d588a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d588e:	2e22      	cmp	r6, #34	; 0x22
   d5890:	d003      	beq.n	d589a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d5892:	2e5c      	cmp	r6, #92	; 0x5c
   d5894:	d001      	beq.n	d589a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d5896:	2e1f      	cmp	r6, #31
   d5898:	d8f4      	bhi.n	d5884 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d589a:	6823      	ldr	r3, [r4, #0]
   d589c:	1a52      	subs	r2, r2, r1
   d589e:	689b      	ldr	r3, [r3, #8]
   d58a0:	4620      	mov	r0, r4
   d58a2:	4798      	blx	r3
            write('\\');
   d58a4:	215c      	movs	r1, #92	; 0x5c
   d58a6:	4620      	mov	r0, r4
   d58a8:	f7ff ffa0 	bl	d57ec <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d58ac:	2e0d      	cmp	r6, #13
   d58ae:	d80a      	bhi.n	d58c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d58b0:	2e07      	cmp	r6, #7
   d58b2:	d91c      	bls.n	d58ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d58b4:	f1a6 0308 	sub.w	r3, r6, #8
   d58b8:	2b05      	cmp	r3, #5
   d58ba:	d818      	bhi.n	d58ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d58bc:	e8df f003 	tbb	[pc, r3]
   d58c0:	17110f0d 	.word	0x17110f0d
   d58c4:	1513      	.short	0x1513
   d58c6:	2e22      	cmp	r6, #34	; 0x22
   d58c8:	d001      	beq.n	d58ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d58ca:	2e5c      	cmp	r6, #92	; 0x5c
   d58cc:	d10f      	bne.n	d58ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d58ce:	4631      	mov	r1, r6
                write('b');
   d58d0:	4620      	mov	r0, r4
   d58d2:	f7ff ff8b 	bl	d57ec <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   d58d6:	4629      	mov	r1, r5
    while (s != end) {
   d58d8:	e7d4      	b.n	d5884 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d58da:	2162      	movs	r1, #98	; 0x62
   d58dc:	e7f8      	b.n	d58d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d58de:	2174      	movs	r1, #116	; 0x74
   d58e0:	e7f6      	b.n	d58d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d58e2:	216e      	movs	r1, #110	; 0x6e
   d58e4:	e7f4      	b.n	d58d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d58e6:	2166      	movs	r1, #102	; 0x66
   d58e8:	e7f2      	b.n	d58d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d58ea:	2172      	movs	r1, #114	; 0x72
   d58ec:	e7f0      	b.n	d58d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d58ee:	6823      	ldr	r3, [r4, #0]
   d58f0:	4632      	mov	r2, r6
   d58f2:	68db      	ldr	r3, [r3, #12]
   d58f4:	4641      	mov	r1, r8
   d58f6:	4620      	mov	r0, r4
   d58f8:	4798      	blx	r3
                break;
   d58fa:	e7ec      	b.n	d58d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
   d58fc:	428d      	cmp	r5, r1
   d58fe:	d004      	beq.n	d590a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d5900:	6823      	ldr	r3, [r4, #0]
   d5902:	1a6a      	subs	r2, r5, r1
   d5904:	689b      	ldr	r3, [r3, #8]
   d5906:	4620      	mov	r0, r4
   d5908:	4798      	blx	r3
    write('"');
   d590a:	2122      	movs	r1, #34	; 0x22
   d590c:	4620      	mov	r0, r4
   d590e:	f7ff ff6d 	bl	d57ec <_ZN5spark10JSONWriter5writeEc>
}
   d5912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5916:	bf00      	nop
   d5918:	000d5d2b 	.word	0x000d5d2b

000d591c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d591c:	b513      	push	{r0, r1, r4, lr}
   d591e:	4604      	mov	r4, r0
   d5920:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d5924:	f7ff ff77 	bl	d5816 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d5928:	4620      	mov	r0, r4
   d592a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d592e:	f7ff ff9d 	bl	d586c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d5932:	2302      	movs	r3, #2
}
   d5934:	4620      	mov	r0, r4
    state_ = VALUE;
   d5936:	7123      	strb	r3, [r4, #4]
}
   d5938:	b002      	add	sp, #8
   d593a:	bd10      	pop	{r4, pc}

000d593c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d593c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d593e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5940:	d902      	bls.n	d5948 <pinAvailable+0xc>
    return false;
   d5942:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5944:	b002      	add	sp, #8
   d5946:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5948:	f1a0 030b 	sub.w	r3, r0, #11
   d594c:	2b02      	cmp	r3, #2
   d594e:	d81a      	bhi.n	d5986 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5950:	4c17      	ldr	r4, [pc, #92]	; (d59b0 <pinAvailable+0x74>)
   d5952:	7821      	ldrb	r1, [r4, #0]
   d5954:	f3bf 8f5b 	dmb	ish
   d5958:	f011 0101 	ands.w	r1, r1, #1
   d595c:	d10b      	bne.n	d5976 <pinAvailable+0x3a>
   d595e:	4620      	mov	r0, r4
   d5960:	9101      	str	r1, [sp, #4]
   d5962:	f7fe fb9c 	bl	d409e <__cxa_guard_acquire>
   d5966:	9901      	ldr	r1, [sp, #4]
   d5968:	b128      	cbz	r0, d5976 <pinAvailable+0x3a>
   d596a:	4812      	ldr	r0, [pc, #72]	; (d59b4 <pinAvailable+0x78>)
   d596c:	f7fe fec4 	bl	d46f8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5970:	4620      	mov	r0, r4
   d5972:	f7fe fb99 	bl	d40a8 <__cxa_guard_release>
   d5976:	4b0f      	ldr	r3, [pc, #60]	; (d59b4 <pinAvailable+0x78>)
   d5978:	7818      	ldrb	r0, [r3, #0]
   d597a:	f7fe fd4b 	bl	d4414 <hal_spi_is_enabled>
   d597e:	2800      	cmp	r0, #0
   d5980:	d1df      	bne.n	d5942 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5982:	2001      	movs	r0, #1
   d5984:	e7de      	b.n	d5944 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5986:	2801      	cmp	r0, #1
   d5988:	d809      	bhi.n	d599e <pinAvailable+0x62>
   d598a:	f000 f841 	bl	d5a10 <_Z19__fetch_global_Wirev>
   d598e:	2100      	movs	r1, #0
   d5990:	7c00      	ldrb	r0, [r0, #16]
   d5992:	f7fe fd27 	bl	d43e4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5996:	f080 0001 	eor.w	r0, r0, #1
   d599a:	b2c0      	uxtb	r0, r0
   d599c:	e7d2      	b.n	d5944 <pinAvailable+0x8>
   d599e:	3809      	subs	r0, #9
   d59a0:	2801      	cmp	r0, #1
   d59a2:	d8ee      	bhi.n	d5982 <pinAvailable+0x46>
   d59a4:	f7ff fd8a 	bl	d54bc <_Z22__fetch_global_Serial1v>
   d59a8:	7c00      	ldrb	r0, [r0, #16]
   d59aa:	f7fe fce3 	bl	d4374 <hal_usart_is_enabled>
   d59ae:	e7f2      	b.n	d5996 <pinAvailable+0x5a>
   d59b0:	2003e7c8 	.word	0x2003e7c8
   d59b4:	2003e7cc 	.word	0x2003e7cc

000d59b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d59b8:	2823      	cmp	r0, #35	; 0x23
{
   d59ba:	b538      	push	{r3, r4, r5, lr}
   d59bc:	4604      	mov	r4, r0
   d59be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d59c0:	d80a      	bhi.n	d59d8 <pinMode+0x20>
   d59c2:	29ff      	cmp	r1, #255	; 0xff
   d59c4:	d008      	beq.n	d59d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d59c6:	f7ff ffb9 	bl	d593c <pinAvailable>
   d59ca:	b128      	cbz	r0, d59d8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d59cc:	4629      	mov	r1, r5
   d59ce:	4620      	mov	r0, r4
}
   d59d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d59d4:	f7fe bc56 	b.w	d4284 <HAL_Pin_Mode>
}
   d59d8:	bd38      	pop	{r3, r4, r5, pc}

000d59da <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d59da:	f7fe bc5b 	b.w	d4294 <HAL_Pulse_In>
	...

000d59e0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d59e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d59e2:	2300      	movs	r3, #0
   d59e4:	2520      	movs	r5, #32
   d59e6:	8043      	strh	r3, [r0, #2]
   d59e8:	2314      	movs	r3, #20
{
   d59ea:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d59ec:	8003      	strh	r3, [r0, #0]
   d59ee:	6085      	str	r5, [r0, #8]
   d59f0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59f2:	4906      	ldr	r1, [pc, #24]	; (d5a0c <_Z17acquireWireBufferv+0x2c>)
   d59f4:	4628      	mov	r0, r5
   d59f6:	f000 f83a 	bl	d5a6e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59fa:	4904      	ldr	r1, [pc, #16]	; (d5a0c <_Z17acquireWireBufferv+0x2c>)
	};
   d59fc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59fe:	4628      	mov	r0, r5
   d5a00:	f000 f835 	bl	d5a6e <_ZnajRKSt9nothrow_t>
	};
   d5a04:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5a06:	4620      	mov	r0, r4
   d5a08:	bd38      	pop	{r3, r4, r5, pc}
   d5a0a:	bf00      	nop
   d5a0c:	000d5d4c 	.word	0x000d5d4c

000d5a10 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5a10:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a12:	4d0f      	ldr	r5, [pc, #60]	; (d5a50 <_Z19__fetch_global_Wirev+0x40>)
   d5a14:	7829      	ldrb	r1, [r5, #0]
   d5a16:	f3bf 8f5b 	dmb	ish
   d5a1a:	f011 0401 	ands.w	r4, r1, #1
{
   d5a1e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a20:	d113      	bne.n	d5a4a <_Z19__fetch_global_Wirev+0x3a>
   d5a22:	4628      	mov	r0, r5
   d5a24:	f7fe fb3b 	bl	d409e <__cxa_guard_acquire>
   d5a28:	b178      	cbz	r0, d5a4a <_Z19__fetch_global_Wirev+0x3a>
   d5a2a:	a801      	add	r0, sp, #4
   d5a2c:	f7ff ffd8 	bl	d59e0 <_Z17acquireWireBufferv>
   d5a30:	aa01      	add	r2, sp, #4
   d5a32:	4621      	mov	r1, r4
   d5a34:	4807      	ldr	r0, [pc, #28]	; (d5a54 <_Z19__fetch_global_Wirev+0x44>)
   d5a36:	f7ff fdab 	bl	d5590 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5a3a:	4628      	mov	r0, r5
   d5a3c:	f7fe fb34 	bl	d40a8 <__cxa_guard_release>
   d5a40:	4a05      	ldr	r2, [pc, #20]	; (d5a58 <_Z19__fetch_global_Wirev+0x48>)
   d5a42:	4906      	ldr	r1, [pc, #24]	; (d5a5c <_Z19__fetch_global_Wirev+0x4c>)
   d5a44:	4803      	ldr	r0, [pc, #12]	; (d5a54 <_Z19__fetch_global_Wirev+0x44>)
   d5a46:	f000 f80b 	bl	d5a60 <__aeabi_atexit>
	return wire;
}
   d5a4a:	4802      	ldr	r0, [pc, #8]	; (d5a54 <_Z19__fetch_global_Wirev+0x44>)
   d5a4c:	b007      	add	sp, #28
   d5a4e:	bd30      	pop	{r4, r5, pc}
   d5a50:	2003e7d8 	.word	0x2003e7d8
   d5a54:	2003e7dc 	.word	0x2003e7dc
   d5a58:	2003e5f4 	.word	0x2003e5f4
   d5a5c:	000d5539 	.word	0x000d5539

000d5a60 <__aeabi_atexit>:
   d5a60:	460b      	mov	r3, r1
   d5a62:	4601      	mov	r1, r0
   d5a64:	4618      	mov	r0, r3
   d5a66:	f000 b807 	b.w	d5a78 <__cxa_atexit>

000d5a6a <_ZdlPvj>:
   d5a6a:	f7fe bb16 	b.w	d409a <_ZdlPv>

000d5a6e <_ZnajRKSt9nothrow_t>:
   d5a6e:	f7fe bb12 	b.w	d4096 <_Znaj>

000d5a72 <_ZSt25__throw_bad_function_callv>:
   d5a72:	b508      	push	{r3, lr}
   d5a74:	f7fe fdea 	bl	d464c <abort>

000d5a78 <__cxa_atexit>:
   d5a78:	b510      	push	{r4, lr}
   d5a7a:	4c05      	ldr	r4, [pc, #20]	; (d5a90 <__cxa_atexit+0x18>)
   d5a7c:	4613      	mov	r3, r2
   d5a7e:	b12c      	cbz	r4, d5a8c <__cxa_atexit+0x14>
   d5a80:	460a      	mov	r2, r1
   d5a82:	4601      	mov	r1, r0
   d5a84:	2002      	movs	r0, #2
   d5a86:	f3af 8000 	nop.w
   d5a8a:	bd10      	pop	{r4, pc}
   d5a8c:	4620      	mov	r0, r4
   d5a8e:	e7fc      	b.n	d5a8a <__cxa_atexit+0x12>
   d5a90:	00000000 	.word	0x00000000

000d5a94 <memcpy>:
   d5a94:	440a      	add	r2, r1
   d5a96:	4291      	cmp	r1, r2
   d5a98:	f100 33ff 	add.w	r3, r0, #4294967295
   d5a9c:	d100      	bne.n	d5aa0 <memcpy+0xc>
   d5a9e:	4770      	bx	lr
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5aaa:	4291      	cmp	r1, r2
   d5aac:	d1f9      	bne.n	d5aa2 <memcpy+0xe>
   d5aae:	bd10      	pop	{r4, pc}

000d5ab0 <memset>:
   d5ab0:	4402      	add	r2, r0
   d5ab2:	4603      	mov	r3, r0
   d5ab4:	4293      	cmp	r3, r2
   d5ab6:	d100      	bne.n	d5aba <memset+0xa>
   d5ab8:	4770      	bx	lr
   d5aba:	f803 1b01 	strb.w	r1, [r3], #1
   d5abe:	e7f9      	b.n	d5ab4 <memset+0x4>

000d5ac0 <srand>:
   d5ac0:	b538      	push	{r3, r4, r5, lr}
   d5ac2:	4b0d      	ldr	r3, [pc, #52]	; (d5af8 <srand+0x38>)
   d5ac4:	681d      	ldr	r5, [r3, #0]
   d5ac6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5ac8:	4604      	mov	r4, r0
   d5aca:	b97b      	cbnz	r3, d5aec <srand+0x2c>
   d5acc:	2018      	movs	r0, #24
   d5ace:	f7fe fd9d 	bl	d460c <malloc>
   d5ad2:	4a0a      	ldr	r2, [pc, #40]	; (d5afc <srand+0x3c>)
   d5ad4:	4b0a      	ldr	r3, [pc, #40]	; (d5b00 <srand+0x40>)
   d5ad6:	63a8      	str	r0, [r5, #56]	; 0x38
   d5ad8:	e9c0 2300 	strd	r2, r3, [r0]
   d5adc:	4b09      	ldr	r3, [pc, #36]	; (d5b04 <srand+0x44>)
   d5ade:	6083      	str	r3, [r0, #8]
   d5ae0:	230b      	movs	r3, #11
   d5ae2:	8183      	strh	r3, [r0, #12]
   d5ae4:	2201      	movs	r2, #1
   d5ae6:	2300      	movs	r3, #0
   d5ae8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5aec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5aee:	2200      	movs	r2, #0
   d5af0:	611c      	str	r4, [r3, #16]
   d5af2:	615a      	str	r2, [r3, #20]
   d5af4:	bd38      	pop	{r3, r4, r5, pc}
   d5af6:	bf00      	nop
   d5af8:	2003e590 	.word	0x2003e590
   d5afc:	abcd330e 	.word	0xabcd330e
   d5b00:	e66d1234 	.word	0xe66d1234
   d5b04:	0005deec 	.word	0x0005deec

000d5b08 <strcpy>:
   d5b08:	4603      	mov	r3, r0
   d5b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5b0e:	f803 2b01 	strb.w	r2, [r3], #1
   d5b12:	2a00      	cmp	r2, #0
   d5b14:	d1f9      	bne.n	d5b0a <strcpy+0x2>
   d5b16:	4770      	bx	lr

000d5b18 <strdup>:
   d5b18:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <strdup+0xc>)
   d5b1a:	4601      	mov	r1, r0
   d5b1c:	6818      	ldr	r0, [r3, #0]
   d5b1e:	f000 b803 	b.w	d5b28 <_strdup_r>
   d5b22:	bf00      	nop
   d5b24:	2003e590 	.word	0x2003e590

000d5b28 <_strdup_r>:
   d5b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b2a:	4604      	mov	r4, r0
   d5b2c:	4608      	mov	r0, r1
   d5b2e:	460d      	mov	r5, r1
   d5b30:	f000 f80f 	bl	d5b52 <strlen>
   d5b34:	1c42      	adds	r2, r0, #1
   d5b36:	4611      	mov	r1, r2
   d5b38:	4620      	mov	r0, r4
   d5b3a:	9201      	str	r2, [sp, #4]
   d5b3c:	f7fe fd8e 	bl	d465c <_malloc_r>
   d5b40:	4604      	mov	r4, r0
   d5b42:	b118      	cbz	r0, d5b4c <_strdup_r+0x24>
   d5b44:	9a01      	ldr	r2, [sp, #4]
   d5b46:	4629      	mov	r1, r5
   d5b48:	f7ff ffa4 	bl	d5a94 <memcpy>
   d5b4c:	4620      	mov	r0, r4
   d5b4e:	b003      	add	sp, #12
   d5b50:	bd30      	pop	{r4, r5, pc}

000d5b52 <strlen>:
   d5b52:	4603      	mov	r3, r0
   d5b54:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b58:	2a00      	cmp	r2, #0
   d5b5a:	d1fb      	bne.n	d5b54 <strlen+0x2>
   d5b5c:	1a18      	subs	r0, r3, r0
   d5b5e:	3801      	subs	r0, #1
   d5b60:	4770      	bx	lr

000d5b62 <link_code_end>:
	...

000d5b64 <dynalib_user>:
   d5b64:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5b74:	0000 0000 6176 756c 0065 6974 656d 7473     ....value.timest
   d5b84:	6d61 0070 6f63 5f32 6f63 636e 6e65 7274     amp.co2_concentr
   d5b94:	7461 6f69 006e 203b 6300 726f 6572 7463     ation.; .correct
   d5ba4:	6465 4320 324f 7020 6d70 203a 0000 0000     ed CO2 ppm: ....

000d5bb4 <_ZTVN5spark13EthernetClassE>:
	...
   d5bbc:	46db 000d 46d1 000d 46c7 000d 46bd 000d     .F...F...F...F..
   d5bcc:	46b1 000d 46a5 000d 4699 000d 4691 000d     .F...F...F...F..
   d5bdc:	4687 000d 467d 000d 5699 000d 7061 0070     .F..}F...V..app.
   d5bec:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   d5bfc:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000d5c08 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5c10:	4ced 000d 4cf3 000d 4d31 000d 4d01 000d     .L...L..1M...M..
   d5c20:	4cef 000d                                   .L..

000d5c24 <_ZTV9IPAddress>:
	...
   d5c2c:	5235 000d 5225 000d 5227 000d               5R..%R..'R..

000d5c38 <_ZTV9USBSerial>:
	...
   d5c40:	530b 000d 5373 000d 5349 000d 4a05 000d     .S..sS..IS...J..
   d5c50:	533b 000d 530d 000d 531d 000d 536d 000d     ;S...S...S..mS..
   d5c60:	532d 000d 5307 000d                         -S...S..

000d5c68 <_ZTV11USARTSerial>:
	...
   d5c70:	5415 000d 5481 000d 5459 000d 4a05 000d     .T...T..YT...J..
   d5c80:	5429 000d 5445 000d 5437 000d 5453 000d     )T..ET..7T..ST..
   d5c90:	5417 000d 541b 000d                         .T...T..

000d5c98 <_ZTV7TwoWire>:
	...
   d5ca0:	5539 000d 5583 000d 555b 000d 553b 000d     9U...U..[U..;U..
   d5cb0:	5563 000d 556b 000d 5573 000d 557b 000d     cU..kU..sU..{U..

000d5cc0 <_ZTVN5spark9WiFiClassE>:
	...
   d5cc8:	5613 000d 5609 000d 55ff 000d 55b5 000d     .V...V...U...U..
   d5cd8:	55f3 000d 55e7 000d 55db 000d 55d3 000d     .U...U...U...U..
   d5ce8:	55c9 000d 55bf 000d 5699 000d               .U...U...V..

000d5cf4 <_ZTVN5spark12NetworkClassE>:
	...
   d5cfc:	5631 000d 563b 000d 5645 000d 564f 000d     1V..;V..EV..OV..
   d5d0c:	5659 000d 5665 000d 5671 000d 567d 000d     YV..eV..qV..}V..
   d5d1c:	5685 000d 568f 000d 5699 000d 6425 7500     .V...V...V..%d.u
   d5d2c:	3025 7834 0000 0000                         %04x....

000d5d34 <_ZTVN5spark16JSONBufferWriterE>:
	...
   d5d3c:	5781 000d 5783 000d 5791 000d 57b7 000d     .W...W...W...W..

000d5d4c <_ZSt7nothrow>:
	...

000d5d4d <link_const_variable_data_end>:
   d5d4d:	00          	.byte	0x00
	...

000d5d50 <link_constructors_location>:
   d5d50:	000d4259 	.word	0x000d4259
   d5d54:	000d46e5 	.word	0x000d46e5
   d5d58:	000d472d 	.word	0x000d472d
   d5d5c:	000d49dd 	.word	0x000d49dd
   d5d60:	000d4acd 	.word	0x000d4acd
   d5d64:	000d4b51 	.word	0x000d4b51
   d5d68:	000d4bad 	.word	0x000d4bad
   d5d6c:	000d561d 	.word	0x000d561d
   d5d70:	000d576d 	.word	0x000d576d

000d5d74 <link_constructors_end>:
	...
